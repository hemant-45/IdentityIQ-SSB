-- MySQL dump 10.13  Distrib 8.0.17, for Win64 (x86_64)
--
-- Host: localhost    Database: identityiq
-- ------------------------------------------------------
-- Server version	5.7.22-log

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `spt_workflow`
--

DROP TABLE IF EXISTS `spt_workflow`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `spt_workflow` (
  `id` varchar(32) NOT NULL,
  `created` bigint(20) DEFAULT NULL,
  `modified` bigint(20) DEFAULT NULL,
  `owner` varchar(32) DEFAULT NULL,
  `assigned_scope` varchar(32) DEFAULT NULL,
  `assigned_scope_path` varchar(450) DEFAULT NULL,
  `name` varchar(128) NOT NULL,
  `description` varchar(4000) DEFAULT NULL,
  `type` varchar(128) DEFAULT NULL,
  `task_type` varchar(255) DEFAULT NULL,
  `template` bit(1) DEFAULT NULL,
  `explicit_transitions` bit(1) DEFAULT NULL,
  `monitored` bit(1) DEFAULT NULL,
  `result_expiration` int(11) DEFAULT NULL,
  `complete` bit(1) DEFAULT NULL,
  `handler` varchar(128) DEFAULT NULL,
  `work_item_renderer` varchar(128) DEFAULT NULL,
  `variable_definitions` longtext,
  `config_form` varchar(128) DEFAULT NULL,
  `steps` longtext,
  `work_item_config` longtext,
  `variables` longtext,
  `libraries` varchar(128) DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`),
  KEY `FK51A3C947486634B7` (`assigned_scope`),
  KEY `FK51A3C947A5FB1B1` (`owner`),
  KEY `spt_workflow_assignedscopepath` (`assigned_scope_path`(255)),
  CONSTRAINT `FK51A3C947486634B7` FOREIGN KEY (`assigned_scope`) REFERENCES `spt_scope` (`id`),
  CONSTRAINT `FK51A3C947A5FB1B1` FOREIGN KEY (`owner`) REFERENCES `spt_identity` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `spt_workflow`
--

LOCK TABLES `spt_workflow` WRITE;
/*!40000 ALTER TABLE `spt_workflow` DISABLE KEYS */;
INSERT INTO `spt_workflow` VALUES ('40288103723133ac0172313b08a90003',1589963851946,1739425378016,NULL,NULL,NULL,'Importer',NULL,'',NULL,_binary '\0',_binary '',_binary '\0',0,_binary '\0',NULL,NULL,'<List>\n  <Variable name=\"result\" output=\"true\"/>\n  <Variable initializer=\"true\" name=\"transient\"/>\n  <Variable input=\"true\" name=\"resource\"/>\n  <Variable input=\"true\" name=\"operation\"/>\n  <Variable name=\"payload\" output=\"true\" type=\"java.lang.Object\"/>\n</List>\n',NULL,'<List>\n  <Step icon=\"Start\" name=\"Start\" posX=\"67\" posY=\"354\">\n    <Script>\n      <Source>\n serilog=org.apache.commons.logging.LogFactory.getLog(\"sailpoint.iiqda.Importer\"); serilog.debug(\"operation=\"+operation); \n</Source>\n    </Script>\n    <Transition to=\"Import\">\n      <Script>\n        <Source>\n return \"Import\".equals(operation); \n</Source>\n      </Script>\n    </Transition>\n    <Transition to=\"Get Object Types\">\n      <Script>\n        <Source>\n return \"getObjectTypes\".equals(operation); \n</Source>\n      </Script>\n    </Transition>\n    <Transition to=\"Get Objects\" when=\"&quot;getObjects&quot;.equals(operation);\"/>\n    <Transition to=\"Get Latest Objects\" when=\"&quot;getLatestObjects&quot;.equals(operation);\"/>\n    <Transition to=\"Get Object\" when=\"&quot;getObject&quot;.equals(operation);\"/>\n    <Transition to=\"Get Jar Size\" when=\"&quot;jarSize&quot;.equals(operation);\"/>\n    <Transition to=\"Get Jar Data\" when=\"&quot;jarData&quot;.equals(operation);\"/>\n    <Transition to=\"Get Task List\" when=\"&quot;getTaskList&quot;.equals(operation);\"/>\n    <Transition to=\"Run Task\" when=\"&quot;runTask&quot;.equals(operation);\"/>\n    <Transition to=\"Terminate Task\" when=\"&quot;terminateTask&quot;.equals(operation);\"/>\n    <Transition to=\"Get Task Result\" when=\"&quot;getTaskResult&quot;.equals(operation);\"/>\n    <Transition to=\"Invalid operation\"/>\n  </Step>\n  <Step icon=\"Provision\" name=\"Import\" posX=\"352\" posY=\"121\" resultVariable=\"payload\">\n    <Script>\n      <Source>\n import sailpoint.server.Importer; import sailpoint.tools.GeneralException; import sailpoint.web.system.ImportBean.ImportMonitor; serilog=org.apache.commons.logging.LogFactory.getLog(\"sailpoint.iiqda.Importer\"); serilog.debug(\"--\"); String fileData = workflow.get(\"resource\"); serilog.debug(\"fileData=\"+fileData); ImportMonitor _monitor = new ImportMonitor(); Importer importer = new Importer(context, _monitor); serilog.debug(\"got importer\"); try { importer.importXml(fileData); context.commitTransaction(); workflow.put(\"result\", \"success\"); } catch (Exception ex) { serilog.error(\"Exception :\"+ex); workflow.put(\"result\", \"failure\"); if (ex instanceof GeneralException) { GeneralException ge = (GeneralException) ex; return ge.getMessageInstance(); } else { return ex.getLocalizedMessage(); } } return \"\"; \n</Source>\n    </Script>\n    <Transition to=\"Stop\"/>\n  </Step>\n  <Step icon=\"Default\" name=\"Get Object Types\" posX=\"354\" posY=\"194\" resultVariable=\"payload\">\n    <Script>\n      <Source>\n import sailpoint.object.ClassLists; List l = new ArrayList(); for (Class clazz: ClassLists.MajorClasses) { l.add(clazz.getSimpleName()); } // Add this in, its a special type of Identity l.add(\"Workgroup\"); Collections.sort(l); workflow.put(\"result\", \"success\"); return l; \n</Source>\n    </Script>\n    <Transition to=\"Stop\"/>\n  </Step>\n  <Step icon=\"Default\" name=\"Invalid operation\" posX=\"354\" posY=\"44\" resultVariable=\"payload\">\n    <Script>\n      <Source>\n workflow.put(\"result\", \"failure\"); return \"Invalid Operation\"; \n</Source>\n    </Script>\n    <Transition to=\"Stop\"/>\n  </Step>\n  <Step icon=\"Stop\" name=\"Stop\" posX=\"509\" posY=\"351\"/>\n  <Step icon=\"Default\" name=\"Get Objects\" posX=\"355\" posY=\"272\" resultVariable=\"payload\">\n    <Script>\n      <Source>\n // objectType is a \'simple\' class name (no package) // look it up in ClassList import sailpoint.object.ClassLists; import sailpoint.object.QueryOptions; import sailpoint.object.Filter; // Expect: java.lang.String objectType // Expect: java.lang.String objectName Class theClass=null; boolean isWorkgroup=false; if(\"Workgroup\".equals(objectType)) { objectType=\"Identity\"; isWorkgroup=true; } for (Class clazz: ClassLists.MajorClasses) { if(clazz.getSimpleName().equals(objectType) ){ theClass=clazz; break; } } if(theClass==null) { workflow.put(\"result\", \"failure\"); return \"Could not find object type \'\"+objectType+\"\'\"; } QueryOptions qo=new QueryOptions(); if (isWorkgroup) { qo.addFilter(Filter.eq(\"workgroup\", Boolean.TRUE)); } String searchField=\"name\"; if (\"TaskSchedule\".equals(objectType)) { searchField=\"id\"; } Iterator iter=context.search(theClass, qo, searchField); List objects=new ArrayList(); while(iter.hasNext()) { Object[] obj=iter.next(); objects.add(obj[0]); } workflow.put(\"result\", \"success\"); return objects; \n</Source>\n    </Script>\n    <Transition to=\"Stop\"/>\n  </Step>\n  <Step icon=\"Default\" name=\"Get Task List\" posX=\"355\" posY=\"272\" resultVariable=\"payload\">\n    <Script>\n      <Source>\n import sailpoint.object.TaskDefinition; serilog=org.apache.commons.logging.LogFactory.getLog(\"sailpoint.iiqda.Importer.GetTaskList\"); List tasks=context.getObjects(TaskDefinition.class); serilog.debug(\"got \"+tasks.size()); List objects=new ArrayList(); for (TaskDefinition td: tasks) { if(!td.isHidden() &amp;&amp; !td.isTemplate() ){ objects.add(td.getName()); } } workflow.put(\"result\", \"success\"); serilog.debug(\"returning \"+objects.size()+\" tasks\"); return objects; \n</Source>\n    </Script>\n    <Transition to=\"Stop\"/>\n  </Step>\n  <Step icon=\"Default\" name=\"Run Task\" posX=\"355\" posY=\"272\" resultVariable=\"payload\">\n    <Script>\n      <Source>\n import sailpoint.object.TaskDefinition; import sailpoint.api.TaskManager; import sailpoint.object.TaskSchedule; import sailpoint.object.TaskResult; // Expect: java.lang.String taskName serilog=org.apache.commons.logging.LogFactory.getLog(\"sailpoint.iiqda.Importer.RunTask\"); serilog.debug(\"Run Task: \"+taskName); TaskManager tm = new TaskManager(context); Map args=new HashMap(); TaskDefinition td=context.getObjectByName(TaskDefinition.class, taskName); if(td==null) { workflow.put(\"result\", \"failure\"); return \"Task \'\"+taskName+\"\' not found\"; } TaskSchedule ts=tm.run(td, args); TaskResult tr=null; while (tr==null) { tr=ts.getLatestResult(); serilog.debug(\"task result=\"+tr); } workflow.put(\"result\", \"success\"); return tr.getId(); \n</Source>\n    </Script>\n    <Transition to=\"Stop\"/>\n  </Step>\n  <Step icon=\"Default\" name=\"Terminate Task\" posX=\"355\" posY=\"272\" resultVariable=\"payload\">\n    <Script>\n      <Source>\n import sailpoint.api.TaskManager; import sailpoint.object.TaskResult; // Expect: java.lang.String taskName // Expect: java.lang.String taskId serilog=org.apache.commons.logging.LogFactory.getLog(\"sailpoint.iiqda.Importer.TerminateTask\"); serilog.debug(\"Terminate Task: \"+taskId); TaskResult tr=context.getObjectById(TaskResult.class, taskId); if(tr==null) { workflow.put(\"result\", \"failure\"); return \"taskId \"+taskId+\" not found\"; } TaskManager tm=new TaskManager(context); tm.terminate(tr); workflow.put(\"result\", \"success\"); return tr.getId(); \n</Source>\n    </Script>\n    <Transition to=\"Stop\"/>\n  </Step>\n  <Step icon=\"Default\" name=\"Get Task Result\" posX=\"355\" posY=\"272\" resultVariable=\"payload\">\n    <Script>\n      <Source>\n import sailpoint.object.Attributes; import sailpoint.object.TaskResult; import sailpoint.tools.Internationalizer; import sailpoint.tools.Message; // Expect: java.lang.String taskId serilog=org.apache.commons.logging.LogFactory.getLog(\"sailpoint.iiqda.Importer.GetTaskResult\"); serilog.debug(\"Get Task Result: \"+taskId); if(taskId==null) { workflow.put(\"result\", \"failure\"); return \"Must specify taskId\"; } TaskResult tr=context.getObjectById(TaskResult.class, taskId); if(tr==null) { workflow.put(\"result\", \"failure\"); return \"taskId \"+taskId+\" not found\"; } Map result=new HashMap(); result.put(\"name\", tr.getName()); result.put(\"description\", tr.getDefinition().getDescription().trim()); if (tr.getCompletionStatus()==null) { result.put(\"status\", \"pending..\"); } else { String statusKey=tr.getCompletionStatus().getMessageKey(); result.put(\"status\", Internationalizer.getMessage(statusKey, Locale.ENGLISH)); } result.put(\"progress\", tr.getProgress()); result.put(\"started\", tr.getLaunched().toString()); if(tr.getCompleted()!=null) { result.put(\"completed\", tr.getCompleted().toString()); } List errors=tr.getMessages(); if (errors!=null) { List flatErrors=new ArrayList(); for (Message message: errors) { flatErrors.add(message.getLocalizedMessage()); } result.put(\"errors\", flatErrors); } Attributes attrs=tr.getAttributes(); if (attrs!=null) { Map flatAttrs=new HashMap(); for (String key: attrs.getKeys()) { flatAttrs.put(key, attrs.getString(key)); } result.put(\"attributes\", flatAttrs); } workflow.put(\"result\", \"success\"); return result; \n</Source>\n    </Script>\n    <Transition to=\"Stop\"/>\n  </Step>\n  <Step icon=\"Default\" name=\"Get Object\" posX=\"353\" posY=\"350\" resultVariable=\"payload\">\n    <Script>\n      <Source>\n // objectType is a \'simple\' class name (no package) // look it up in ClassList import sailpoint.object.ClassLists; import sailpoint.object.SailPointObject; // Expect: java.lang.String objectType // Expect: java.lang.String objectName serilog=org.apache.commons.logging.LogFactory.getLog(\"sailpoint.iiqda.Importer.getObject\"); serilog.debug(\"objectType=\"+objectType); serilog.debug(\"objectName=\"+objectName); Class theClass=null; if (\"Workgroup\".equals(objectType)) { objectType=\"Identity\"; } for (Class clazz: ClassLists.MajorClasses) { if(clazz.getSimpleName().equals(objectType) ){ theClass=clazz; break; } } if(theClass==null) { workflow.put(\"result\", \"failure\"); return \"Could not find object type \'\"+objectType+\"\'\"; } SailPointObject obj=context.getObjectByName(theClass, objectName); if(obj==null) { workflow.put(\"result\", \"failure\"); return \"Could not find \"+objectType+\" \'\"+objectName+\"\'\"; } serilog.debug(\"obj=\"+obj); workflow.put(\"result\", \"success\"); return obj.toXml(); \n</Source>\n    </Script>\n    <Transition to=\"Stop\"/>\n  </Step>\n  <Step icon=\"Default\" name=\"Get Jar Size\" posX=\"356\" posY=\"434\" resultVariable=\"payload\">\n    <Script>\n      <Source>\n // jarName is the name of a jar in WEB-INF/lib // return a JSON string of the binary import java.io.File; import java.io.InputStream; import org.apache.commons.io.IOUtils; import org.apache.commons.codec.binary.Base64; import sailpoint.object.ClassLists; import sailpoint.object.SailPointObject; serilog=org.apache.commons.logging.LogFactory.getLog(\"sailpoint.iiqda.Importer.jarSize\"); serilog.debug(\"jar=\"+jar); if(jar==null||jar==void) { workflow.put(\"result\", \"failure\"); return(\"No JAR Specified\"); } URL url=this.getClass().getResource(\"/../lib/\"+jar); serilog.debug(\"url=\"+url); if(url==null) { workflow.put(\"result\", \"failure\"); return(\"JAR \'\"+jar+\"\' not found\"); } serilog.debug(\"got URL\"); File file=new File(url.toURI()); workflow.put(\"result\", \"success\"); String ret=Long.toString(file.length()); serilog.debug(\"returning \"+ret); return ret \n</Source>\n    </Script>\n    <Transition to=\"Stop\"/>\n  </Step>\n  <Step icon=\"Default\" name=\"Get Jar Data\" posX=\"356\" posY=\"515\" resultVariable=\"payload\">\n    <Script>\n      <Source>\n // jarName is the name of a jar in WEB-INF/lib // return a JSON string of the binary import java.io.File; import java.io.InputStream; import org.apache.commons.codec.binary.Base64; import sailpoint.object.ClassLists; import sailpoint.object.SailPointObject; serilog=org.apache.commons.logging.LogFactory.getLog(\"sailpoint.iiqda.Importer.getJarData\"); serilog.trace(\"jar=\"+jar); serilog.trace(\"start=\"+start); serilog.trace(\"length=\"+length); iStart=Integer.parseInt(start); iLength=Integer.parseInt(length); if(jar==null||jar==void) { workflow.put(\"result\", \"failure\"); return(\"No JAR Specified\"); } URL url=this.getClass().getResource(\"/../lib/\"+jar); serilog.trace(\"url=\"+url); if(url==null) { workflow.put(\"result\", \"failure\"); return(\"JAR \'\"+jar+\"\' not found\"); } File file=new File(url.toURI()); RandomAccessFile raFile=new RandomAccessFile(file, \"r\"); serilog.debug(\"skipping \"+iStart+\" bytes\"); raFile.skipBytes(iStart); byte[] buffer=new byte[iLength]; int bytesRead=raFile.read(buffer, 0, iLength); serilog.trace(\"read \"+bytesRead+\" bytes\"); if(bytesRead&lt;iLength) { serilog.debug(\"eof: found \"+bytesRead+\" bytes, not \"+iLength); byte[] buf=new byte[bytesRead]; System.arraycopy(buffer, 0, buf, 0, bytesRead); buffer=buf; } String out=Base64.encodeBase64String(buffer); workflow.put(\"result\", \"success\"); serilog.trace(\"returning \"+out); return out; \n</Source>\n    </Script>\n    <Transition to=\"Stop\"/>\n  </Step>\n  <Step icon=\"Default\" name=\"Get Latest Objects\" posX=\"360\" posY=\"599\" resultVariable=\"payload\">\n    <Script>\n      <Source>\n import java.text.*; import sailpoint.object.*; // Expect: java.lang.String classes // classes is a CSV list of the selected classes in the UI // Declare a logger class for us to isolate these messages during aggregation. serilog=org.apache.commons.logging.LogFactory.getLog(\"sailpoint.iiqda.importer.getLatestObjects\"); // log.setLevel(Level.DEBUG); // The maximuim number of objects to return back to the querying item. int maxObjectsToReturn = 100; // We return back a sorted array list of objects that were recently modified. // Format of each CSV entry, with exampels below a header line: // objectType, objectName, modifiedDate // Application, AD-CorpDomain, 2014-09-17 14:35:15 // Rule, AD-Correlation, 2014-09-16 14:34:46 // etc. // This workflow passes this list back to the caller. ArrayList recentlyModifiedCSVStrings = new ArrayList(); // We decalre a TreeSet to store the recently modified records. This allows // us to keep track of the \"maxObjectsToReturn\" most recently modified objects. TreeSet objStrTreeSet = new TreeSet(); // Certain classes do not contain modified dates, which is yucky. // Mainually maintain a list of classes here that we know do not have // modified dates. We skip these classes from the import/export list. // Some are missing the \'name\' property as well, those get added here too. ArrayList skipClasses = new ArrayList(); skipClasses.add(\"ApplicationActivity\"); skipClasses.add(\"ApplicationScorecard\"); skipClasses.add(\"AuditEvent\"); skipClasses.add(\"AuthenticationQuestion\"); skipClasses.add(\"BatchRequest\"); skipClasses.add(\"DatabaseVersion\"); skipClasses.add(\"GroupIndex\"); skipClasses.add(\"Identity\"); // We don\'t want to export each Id. skipClasses.add(\"IdentityEntitlement\"); skipClasses.add(\"IdentityHistoryItem\"); skipClasses.add(\"IdentitySnapshot\"); // We don\'t export Identity Snapshots. skipClasses.add(\"JasperTemplate\"); skipClasses.add(\"JasperResult\"); skipClasses.add(\"ManagedAttribute\"); skipClasses.add(\"MitigationExpiration\"); skipClasses.add(\"PolicyViolation\"); // We don\'t export Policy Violations. skipClasses.add(\"Profile\"); skipClasses.add(\"ProcessLog\"); skipClasses.add(\"ProvisioningRequest\"); skipClasses.add(\"QuickLinkOptions\"); skipClasses.add(\"ResourceEvent\"); skipClasses.add(\"RoleChangeEvent\"); skipClasses.add(\"RoleIndex\"); skipClasses.add(\"RoleMetadata\"); skipClasses.add(\"RoleScorecard\"); skipClasses.add(\"Scorecard\"); skipClasses.add(\"Server\"); // Skip the Server objects. skipClasses.add(\"SyslogEvent\"); skipClasses.add(\"TargetAssociation\"); skipClasses.add(\"TaskSchedule\"); // Included for invalid query options. skipClasses.add(\"TaskResult\"); // We don\'t export TaskResult. skipClasses.add(\"UIPreferences\"); List majClasses = new ArrayList(); if (classes==null) { // Ask sailpoint.object.ClassLists for what major classes are defined. for (Class clazz: ClassLists.MajorClasses) { String simpleName = clazz.getSimpleName(); if ( !skipClasses.contains(simpleName) ) { majClasses.add(clazz.getSimpleName()); } } majClasses.add(\"Workgroup\"); } else { String[] strClasses=classes.split(\",\"); majClasses=Arrays.asList(strClasses); } Collections.sort(majClasses); // We now have a list of all the major configurable IdentityIQ classes. // Next we need to projection query pull back name, created, modified time // for each item. // Use a projection query to initially pull back only the columns we need. ArrayList resultColumns = new ArrayList(); resultColumns.add(\"id\"); resultColumns.add(\"name\"); resultColumns.add(\"created\"); resultColumns.add(\"modified\"); QueryOptions qo = new QueryOptions(); qo.setResultLimit(maxObjectsToReturn); ArrayList orderings = new ArrayList(); orderings.add( new QueryOptions.Ordering( \"modified\", false ) ); orderings.add( new QueryOptions.Ordering( \"created\", false ) ); qo.setOrderings(orderings); for (String className : majClasses) { boolean isWorkgroup=false; String fullClassName = \"sailpoint.object.\" + className; if(\"Workgroup\".equals(className)) { isWorkgroup=true; } serilog.debug(\"Examining class: \" + fullClassName); Iterator it=null; if (isWorkgroup) { QueryOptions wgQo=new QueryOptions(qo); wgQo.addFilter(Filter.eq(\"workgroup\", Boolean.TRUE)); it = context.search(Identity.class, wgQo, resultColumns); } else { Class clazz = Class.forName(fullClassName); if (null == clazz) { serilog.error(\"could not load class forName: \" + fullClassName); continue; } it = context.search(clazz, qo, resultColumns); } while (it.hasNext()) { Object [] result = it.next(); String id = (String) result[0]; String name = (String) result[1]; Date createdDate = (java.util.Date) result[2]; Date modifiedDate = (java.util.Date) result[3]; // If no modified date substituting if (null == createdDate) { createdDate = new Date(); } // If no modified date substituting if (null == modifiedDate) { modifiedDate = createdDate; } String created = createdDate.toString(); String modified = modifiedDate.toString(); // Create a date string sortable by string operations. DateFormat formatter = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS\"); String createdSortable = formatter.format(createdDate); String modifiedSortable = formatter.format(modifiedDate); // We buld a sortable delimited string, with the modified date first so // that the date primarily controls the sorting. The format of the string: // modifiedDate,className,objectName,objectId // Once we have the sortable string we put that in a TreeSet so that // we can monitor the size of the tree set and only keep the N most // recently created/modified objects in the tree. String sortableString = modifiedSortable + \",\" + className + \",\" + name + \",\" + id; serilog.debug(\"object:\" + sortableString); // serilog.debug(\"Class: \" + className + \" id:\" + id + \" modified:\" + modifiedSortable + \" name:\" + name); serilog.debug(\"objStrTreeSet.size(): \" + objStrTreeSet.size()); if (objStrTreeSet.size() &lt; maxObjectsToReturn) { // We have not added the max objects to the tree set, add this one. objStrTreeSet.add(sortableString); } else { // The tree set has the full number of objects. If this new // object\'s modified date is older than the oldest in the tree set // then do not add it. Otherwise, add it to the tree set // and then remove the lowest modified date from the tree set. String leastRecentlyModified = objStrTreeSet.first(); if ( 0 > sortableString.compareTo(leastRecentlyModified) ) { serilog.debug(\"older than oldest: skipping\"); // The current objects modified date is earlier than the oldest // in the tree set. Do not add the current object to the tree set. } else { serilog.debug(\"newer than oldest: adding to list\"); // The current object is more recently modified than at least one // object in the tree set. Add the current object to the tree set // and remove the lowest object in the tree set. objStrTreeSet.add(sortableString); objStrTreeSet.remove(leastRecentlyModified); } } } } // At this point we have a populated TreeSet of objStrTreeSet size. This // has the objStrTreeSet most recently modified objects in the IdentityIQ // system. Convert that to an ArrayList of strings and return that to // the caller for passing back to Eclipse or other external tooling. while ( 0 != objStrTreeSet.size() ) { String mostRecentlyModified = objStrTreeSet.last(); recentlyModifiedCSVStrings.add(mostRecentlyModified); objStrTreeSet.remove(mostRecentlyModified); } workflow.put(\"result\", \"success\"); return recentlyModifiedCSVStrings; \n</Source>\n    </Script>\n    <Transition to=\"Stop\"/>\n  </Step>\n</List>\n',' ',' ',NULL),('4028ab1063f427af0163f429029a017e',1528809718427,1739425375009,NULL,NULL,NULL,'Do Provisioning Forms',NULL,'Subprocess',NULL,_binary '\0',_binary '\0',_binary '\0',0,_binary '\0',NULL,NULL,'<List>\n  <Variable input=\"true\" name=\"identityName\" required=\"true\">\n    <Description>\n      The name of the identity object being modified.\n    </Description>\n  </Variable>\n  <Variable initializer=\"script:(identityDisplayName != void) ? identityDisplayName : resolveDisplayName(identityName)\" input=\"true\" name=\"identityDisplayName\">\n    <Description>\n      The displayName of the identity being updated.\n      This may be passed in, if not the script queries for this\n      using a projection query and falls back to the name.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"project\" output=\"true\" required=\"true\">\n    <Description>\n      A ProvisioningProject object describing the modifications to the identity.\n      This may include a list of Question objects which will \n      cause the generation of a Form and a WorkItem to solicit\n      additional information necessary for provisioning.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"formTemplate\" required=\"true\">\n    <Description>\n      The name of the Form object that will be the template for\n      generated forms.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"preferredOwner\">\n    <Description>\n      Optional argument to buildProvisioningForm to pass in the name of\n      an identity we should try to process first when feeding\n      forms back to the workflow.  If there are no questions for that\n      identity and there are questions for other identities, a form for\n      one of the other identities is generated at random.  When set the\n      value is usually the same as \"sessionOwner\" a built-in system variable\n      containing the name of the user currently interacting with a \n      workflow session.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"priority\">\n    <Description>\n      String version of WorkItem.level that will be used\n      to set the priority of any generated workitems.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"requiredOwner\">\n    <Description>\n      Optional argument to buildProvisioningForm to pass in the name of\n      an identity we should try to process first when feeding\n      forms back to the workflow.  If there are no questions for that\n      identity and there are questions for other identities, no form is \n      returned and the workflow may terminate without answering all of the\n      questions in the project.\n\n      This variable should only be on if you want to generate provisioning\n      forms for the requester before approval. When called after approval (from Identity Request Provision),\n      we don\'t pass in this attribute and all the rest of the provisioning forms can be generated.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"fallbackOwner\">\n    <Description>\n      Optional argument to specify a fallback identity to own Forms when nothing else is specified.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"accountSelectionOwner\">\n    <Description>\n      Optional argument to buildAccountSelectionForm to specify identity that owns the Form.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"disableManualAccountSelection\">\n    <Description>\n      When set to \'true\' the system will not send out Account Selection Notification emails \n      for users with more than one account on any one application and the system \n      can\'t determine the provisioning account.\n      This is only passed in from Identity Refresh workflow.\n    </Description>\n  </Variable>\n  <Variable name=\"workItemForm\">\n    <Description>\n      Holds the assembled provisioning form for this user. This is generated\n      dynamically and passed into a work item for presentation.  \n      During rendering the new field values are saved in the form fields.  \n      When the work item is assimilated, we copy the form from the work\n      item back to this variable for further processing.\n      \n      Note that this must be named workItemForm if you want to use it\n      in the \"send\" list of an Approval.  This is the name recognized\n      by WorkItemFormBean.  If you need to use a different name, or\n      have multiple forms then you will need to use an Arg in the Approval\n      to do the name translation.\n    </Description>\n  </Variable>\n  <Variable name=\"formOwnerError\">\n    <Description>\n      Set to true if we ever have difficulty determining a form owner.\n      Used to break out of the provisioning loop.  This really shouldn\'t\n      be necessary but be safe.\n    </Description>\n  </Variable>\n  <Variable name=\"workItemComments\">\n    <Description>\n     Global comments list which should be appended to the comments list ofr\n     each approval.\n    </Description>\n  </Variable>\n  <Variable name=\"accountSelectionForm\">\n    <Description>\n      Dynamic account selection form generated when target account is ambiguous.\n    </Description>\n  </Variable>\n  <Variable name=\"calculatedAccountSelectionOwner\">\n    <Description>\n      Calculated owner value for account selection form.\n    </Description>\n  </Variable>\n</List>\n',NULL,'<List>\n  <Step icon=\"Start\" name=\"start\" posX=\"33\" posY=\"16\">\n    <Transition to=\"Get Account Selection Owner\"/>\n  </Step>\n  <Step action=\"call:getAccountSelectionOwner\" condition=\"script:project != null &amp;&amp; !isTrue(disableManualAccountSelection) &amp;&amp; (project.hasUnansweredProvisioningTargets() || project.hasUnansweredAccountSelections())\" name=\"Get Account Selection Owner\" posX=\"372\" posY=\"12\" resultVariable=\"calculatedAccountSelectionOwner\">\n    <Arg name=\"accountSelectionOwner\" value=\"ref:accountSelectionOwner\"/>\n    <Arg name=\"owner\" value=\"ref:requiredOwner\"/>\n    <Arg name=\"preferredOwner\" value=\"ref:preferredOwner\"/>\n    <Arg name=\"fallbackOwner\" value=\"ref:fallbackOwner\"/>\n    <Transition to=\"Build Account Selection Form\"/>\n  </Step>\n  <Step action=\"call:buildAccountSelectionForm\" condition=\"script:project != null &amp;&amp; !isTrue(disableManualAccountSelection) &amp;&amp; project.hasUnansweredProvisioningTargets()\" name=\"Build Account Selection Form\" posX=\"561\" posY=\"12\" resultVariable=\"accountSelectionForm\">\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Arg name=\"owner\" value=\"ref:calculatedAccountSelectionOwner\"/>\n    <Description>\n      Call the standard handler method to build the account selection form.\n    </Description>\n    <Transition to=\"Present Account Selection Form\"/>\n  </Step>\n  <Step condition=\"script:!isNull(accountSelectionForm)\" name=\"Present Account Selection Form\" posX=\"561\" posY=\"12\">\n    <Approval owner=\"script:accountSelectionForm.getTargetUser()\" send=\"identityName,identityDisplayName,launcher\">\n      <AfterScript>\n        <Source>\n          import sailpoint.object.Form;\n          import sailpoint.object.ProvisioningTarget;\n          import sailpoint.object.AccountSelection;\n          import sailpoint.object.Field;\n\n          Form accountSelectionForm = item.getForm();\n          \n          Iterator fieldIterator = accountSelectionForm.iterateFields();\n\n          List targets = project.getProvisioningTargets();\n          \n          //apply selected value to matching AccountSelection\n          //if accountSelectionId, then apply to the first unanswered AccountSelection\n          while (fieldIterator.hasNext()) {\n              Field fld = (Field)fieldIterator.next();\n              if (fld == null) \n                continue;\n\n              Integer targetIndex = (Integer)fld.getAttribute(\"targetIndex\");\n              Integer selectionIndex = (Integer)fld.getAttribute(\"selectionIndex\");\n              \n              if (targetIndex == null || selectionIndex == null) continue;\n                            \n              ProvisioningTarget target = (ProvisioningTarget) targets.get(targetIndex.intValue());\n              \n              List selections = target.getAccountSelections();\n              AccountSelection selection = (AccountSelection) selections.get(selectionIndex.intValue()); \n                 \n              if (selection.isAnswered()) continue;\n              \n              if (fld.getValue().equals(\"doCreateOpt\")) {\n                selection.setDoCreate(true);\n              }\n              else {\n                selection.setSelection(fld.getValue());\n              }\n          }\n          \n        </Source>\n      </AfterScript>\n      <Arg name=\"workItemType\" value=\"Form\"/>\n      <Arg name=\"workItemDescription\" value=\"Role Account Selection for $(identityDisplayName)\"/>\n      <Arg name=\"workItemForm\" value=\"ref:accountSelectionForm\"/>\n      <Arg name=\"workItemDisableNotification\">\n        <Script>\n          <Source>\n           \n            // If this is interactive then don\'t bother sending email notifications.\n            return (null != sessionOwner) &amp;&amp; !sessionOwner.equals(\"System\") &amp;&amp; !sessionOwner.equals(\"Scheduler\");\n            \n          </Source>\n        </Script>\n      </Arg>\n      <Arg name=\"workItemPriority\" value=\"ref:priority\"/>\n      <WorkItemConfig escalationStyle=\"none\">\n        <NotificationEmailTemplateRef>\n          <Reference class=\"sailpoint.object.EmailTemplate\" id=\"4028ab1063f427af0163f428fc640172\" name=\"Account Selection Notification\"/>\n        </NotificationEmailTemplateRef>\n      </WorkItemConfig>\n    </Approval>\n    <Description>\n      Present the account selection form and check to make sure all account selections were made.\n    </Description>\n    <Transition to=\"Handle Old Account Selections\"/>\n  </Step>\n  <Step condition=\"script:project != null &amp;&amp; !isTrue(disableManualAccountSelection) &amp;&amp; project.hasUnansweredAccountSelections()\" name=\"Handle Old Account Selections\" posX=\"561\" posY=\"12\">\n    <Approval owner=\"ref:calculatedAccountSelectionOwner\" renderer=\"accountSelectionRenderer.xhtml\">\n      <AfterScript>\n        <Source>\n          import sailpoint.object.Attributes;\n          import sailpoint.api.Provisioner;\n\n          // Set the account selections back on the project.  Later these will\n          // be consulted when the native identities are resolved.\n          List accountSelections = approval.get(\"accountSelectionsFromWorkItem\");\n          project.setAccountSelections(accountSelections);\n\n          // Recompile project so that selected native identities get put into\n          // provisioning plans.\n          Provisioner p = new Provisioner(wfcontext.getSailPointContext());\n          Attributes args = wfcontext.getStepArguments();\n          p.recompile(project, args);\n        </Source>\n      </AfterScript>\n      <Arg name=\"workItemRequester\" value=\"$(launcher)\"/>\n      <Arg name=\"workItemDescription\" value=\"Account Selection for User: $(identityDisplayName)\"/>\n      <Arg name=\"workItemDisableNotification\">\n        <Script>\n          <Source>\n           \n            // If this is interactive then don\'t bother sending email notifications.\n            return (null != sessionOwner) &amp;&amp; !sessionOwner.equals(\"System\") &amp;&amp; !sessionOwner.equals(\"Scheduler\");\n            \n          </Source>\n        </Script>\n      </Arg>\n      <Arg name=\"workItemPriority\" value=\"ref:priority\"/>\n      <Arg name=\"accounts\" value=\"script:project.getAccountSelections()\"/>\n      <Arg name=\"expansionItems\" value=\"script:project.getExpansionItems()\"/>\n      <Arg name=\"identityDisplayName\" value=\"$(identityDisplayName)\"/>\n      <Arg name=\"identityName\" value=\"$(identityName)\"/>\n      <Return local=\"true\" name=\"accounts\" to=\"accountSelectionsFromWorkItem\"/>\n      <ValidationScript>\n        <Source>\n          import sailpoint.object.AccountSelection;\n          import sailpoint.tools.Util;\n\n          // The return has not yet been processed since we\'re in the validator\n          // script.  Grab the account selections from the work item.\n          List accountSelections = item.getAttribute(\"accounts\");\n\n          // Make sure that all account selections have decisions.\n          for (AccountSelection sel : accountSelections) {\n              if (Util.isEmpty(sel.getSelectedNativeIdentities())) {\n                  return \"Please make a selection for each application.\";\n              }\n          }\n          return null;\n        </Source>\n      </ValidationScript>\n      <WorkItemConfig escalationStyle=\"none\">\n        <NotificationEmailTemplateRef>\n          <Reference class=\"sailpoint.object.EmailTemplate\" id=\"4028ab1063f427af0163f428fc640172\" name=\"Account Selection Notification\"/>\n        </NotificationEmailTemplateRef>\n      </WorkItemConfig>\n    </Approval>\n    <Description>\n      There are two ways to model account selections.  Pre 6.3 workflows use a \n      top-level List of AccountSelection objects on the project.  6.3 added a List\n      of ProvisioningTarget objects.  We need to handle both, but there will never\n      be a combination of them in the same workflow case.  This step handles\n      the old model.\n    </Description>\n    <Transition to=\"Recompile Provisioning Project\"/>\n  </Step>\n  <Step action=\"call:recompileProject\" name=\"Recompile Provisioning Project\" posX=\"99\" posY=\"112\" resultVariable=\"project\">\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Description>\n      Recompile the project.\n    </Description>\n    <Transition to=\"Build Provisioning Form\"/>\n  </Step>\n  <Step action=\"call:buildProvisioningForm\" name=\"Build Provisioning Form\" posX=\"99\" posY=\"112\" resultVariable=\"workItemForm\">\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Arg name=\"template\" value=\"ref:formTemplate\"/>\n    <Arg name=\"owner\" value=\"ref:requiredOwner\"/>\n    <Arg name=\"preferredOwner\" value=\"ref:preferredOwner\"/>\n    <Arg name=\"fallbackOwner\" value=\"ref:fallbackOwner\"/>\n    <Arg name=\"workItemComments\" value=\"ref:workItemComments\"/>\n    <Arg name=\"workItemPriority\" value=\"ref:priority\"/>\n    <Description>\n      Call the standard handler method to build the provisioning form\n      from the specified template and question list.\n    </Description>\n    <Transition to=\"Present Provisioning Form\"/>\n  </Step>\n  <Step condition=\"script:!isNull(workItemForm)\" name=\"Present Provisioning Form\" posX=\"99\" posY=\"252\">\n    <Approval owner=\"script:workItemForm.getTargetUser()\" return=\"workItemForm\" send=\"identityName,identityDisplayName,workItemForm,launcher\">\n      <Arg name=\"workItemType\" value=\"Form\"/>\n      <Arg name=\"workItemDescription\" value=\"Complete provisioning form for $(identityDisplayName)\"/>\n      <Arg name=\"workItemDisableNotification\">\n        <Script>\n          <Source>\n            \n            // \n            // If this is interactive then don\'t bother sending email\n            // notifications.\n            // \n            // There is some subtle logic here. Basically requiredOwner\n            // is null most of the time except in the case of pre-approval\n            // forms. In that case we want to return the forms for the\n            // required owner so they can fill it in during the request\n            // process instead of waiting on a workitem.  \n            //\n            boolean disableEmail = false;\n            String owner = ( requiredOwner != null ) ? requiredOwner : sessionOwner;\n            if ( Util.nullSafeEq(owner, workItemForm.getTargetUser()) ) { \n                disableEmail = true;\n            }\n            return disableEmail;\n            \n          </Source>\n        </Script>\n      </Arg>\n      <Arg name=\"workItemPriority\" value=\"ref:priority\"/>\n      <WorkItemConfig escalationStyle=\"none\">\n        <NotificationEmailTemplateRef>\n          <Reference class=\"sailpoint.object.EmailTemplate\" id=\"4028ab1063f427af0163f428fc390171\" name=\"Provisioning Form Notification\"/>\n        </NotificationEmailTemplateRef>\n      </WorkItemConfig>\n    </Approval>\n    <Description>\n      Present the form we calculated in the previous step.\n      TODO: Need something more formal to determine who the owner\n      of this should be.\n    </Description>\n    <Transition to=\"Assimilate Provisioning Form\"/>\n  </Step>\n  <Step action=\"call:assimilateProvisioningForm\" condition=\"script:!isNull(workItemForm)\" name=\"Assimilate Provisioning Form\" posX=\"314\" posY=\"252\" resultVariable=\"project\">\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Arg name=\"form\" value=\"ref:workItemForm\"/>\n    <Description>\n      Assimilate the results of the provisining form back into the workflow.\n      This may result in the generation of another set of questions for\n      a different user.  Assimilation can also theoretically generate new\n      questions for the same user if some of the template fields had\n      conditional rendering.\n\n      You can pass things into the Template and Field scripts by\n      defining Args in this step.  You cannot change plan copmiler\n      options, those were specified in the call to compileProvisioningProject\n      and stored in the project for recompilation and execution.\n\n      A new project is returned, but actually it will always be the\n      same as the project passed in.\n    </Description>\n    <Transition to=\"Build Provisioning Form\" when=\"(project != null &amp;&amp; project.hasQuestions()) &amp;&amp; !isNull(workItemForm)\"/>\n    <Transition to=\"end\"/>\n  </Step>\n  <Step icon=\"Stop\" name=\"end\" posX=\"853\" posY=\"12\"/>\n</List>\n',' ',' ','Identity'),('4028ab1063f427af0163f42903300180',1528809718577,1739425374542,NULL,NULL,NULL,'Do Manual Actions','\n     Preset the unmanaged portion of a provisioning project as work items\n     to be processed manually.  This is used by the Identity Update and\n     Identity Refresh workflows.  LCM has a similar step but it audits\n     differently. Need to reconsider this and see if we can share the\n     same subprocess.\n   ','Subprocess',NULL,_binary '\0',_binary '\0',_binary '\0',0,_binary '\0',NULL,NULL,'<List>\n  <Variable input=\"true\" name=\"identityName\" required=\"true\">\n    <Description>\n      The name of the identity object being modified.\n    </Description>\n  </Variable>\n  <Variable initializer=\"script:(identityDisplayName != void) ? identityDisplayName : resolveDisplayName(identityName)\" input=\"true\" name=\"identityDisplayName\">\n    <Description>\n      The displayName of the identity being updated.\n      This may be passed in, if not the script queries for this\n      using a projection query and falls back to the name.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"project\" output=\"true\" required=\"true\">\n    <Description>\n      A ProvisioningProject object describing the modifications to the identity.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"priority\">\n    <Description>\n      String version of WorkItem.level that will be used\n      to set the priority any generated workitems.\n    </Description>\n  </Variable>\n  <Variable initializer=\"spadmin\" input=\"true\" name=\"fallbackApprover\">\n    <Description>\n      A String that specifies the name of the Identity that will \n      be assigned any approvals where the owner of the approver \n      can\'t be resolved. Example if the scheme is \"owner\" and the \n      application doesn\'t specify and owner.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"doAudit\">\n    <Description>\n      When true we will audit the completion of manual action work items.\n    </Description>\n  </Variable>\n</List>\n',NULL,'<List>\n  <Step icon=\"Approval\" name=\"Manual Actions\">\n    <Approval mode=\"parallelPoll\" owner=\"rule:Build Manual Action Approvals\" renderer=\"lcmManualActionsRenderer.xhtml\" send=\"identityDisplayName,identityName\">\n      <AfterScript>\n        <Source>\n          // Mark all items finished, LCM workflows do this for the dashboard\n          // widget that tracks provisioning completion (the closed loop).\n          // I\'m not sure if we need that here, depends on which TaskResults\n          // the scanner looks at, but be consistent.\n\n          import sailpoint.object.ApprovalSet;\n          import sailpoint.object.ApprovalItem;\n          import sailpoint.object.WorkItem;\n\n          // must be a leaf approval\n          if (item != null) {\n            ApprovalSet set = (ApprovalSet)item.get(\"approvalSet\");\n            if ( set != null ) {\n                List approvalItems = set.getItems();\n                for ( ApprovalItem approvalItem : approvalItems ) {\n                    approvalItem.setState(WorkItem.State.Finished);\n                }\n            }\n\n            // Audit the manual change\n            // this is in LCM Workflow Library, if we think we need the\n            // same level of auditing this will have to be brought over\n            // to IdentityLibrary\n            // if (doAudit)\n            //   auditManualAction(item);\n          }\n        </Source>\n      </AfterScript>\n      <Arg name=\"workItemRequester\" value=\"$(launcher)\"/>\n      <Arg name=\"workItemDescription\" value=\"Manual Changes requested for User: $(identityDisplayName)\"/>\n      <Arg name=\"workItemPriority\" value=\"ref:priority\"/>\n      <Arg name=\"workItemType\" value=\"ManualAction\"/>\n      <WorkItemConfig escalationStyle=\"none\">\n        <NotificationEmailTemplateRef>\n          <Reference class=\"sailpoint.object.EmailTemplate\" id=\"4028ab1063f427af0163f42902fa017f\" name=\"Pending Manual Changes\"/>\n        </NotificationEmailTemplateRef>\n      </WorkItemConfig>\n    </Approval>\n    <Description>\n      Build an Approval structure for the unmanaged plan in the provisioning project.\n      The construtor is in the rule \"Build Manual Action Approvals\" that expects\n      to be passed launcher, project, identityName, and fallbackApprover.\n    </Description>\n  </Step>\n</List>\n',' ',' ','Identity'),('4028ab1063f427af0163f42903ed0181',1528809718766,1739425380643,NULL,NULL,NULL,'Provision with retries',NULL,'Subprocess',NULL,_binary '\0',_binary '\0',_binary '\0',0,_binary '\0',NULL,NULL,'<List>\n  <Variable input=\"true\" name=\"project\" output=\"true\" required=\"true\">\n    <Description>\n      Project that will be provisioned.\n    </Description>\n  </Variable>\n  <Variable initializer=\"script:new Integer(60);\" input=\"true\" name=\"provisioningRetryThreshold\" type=\"integer\">\n    <Description>\n      The interval in minutes to wait to retry the request defaults to \n      60 minutes.  The retryInterval will be read from the underlying\n      applications involved in the retry provisioning activity and\n      the max interval defined across all applications will be used .\n      If an interval is not specified on any of the Applications \n      we\'ll fall back to the setting in this variable which defaultws\n      to an hour.\n    </Description>\n  </Variable>\n  <Variable editable=\"true\" initializer=\"script:new Integer(-1);\" input=\"true\" name=\"provisioningMaxRetries\" type=\"integer\">\n    <Description>\n       The maximum number of retries that will be attempted before failure \n       of the provisioning activities.  A value of -1 will execute\n       retries indefinetly.\n \n       Like provisioningRetry the value will be read from the\n       application, if not defined on the application \n       we\'ll fall back to this setting which will default to -1.\n    </Description>\n  </Variable>\n  <Variable initializer=\"false\" input=\"true\" name=\"enableRetryRequest\">\n    <Description>\n      When set to true it will disable the retries loop and let the \n      Provision step launch requests to handle the retries.  Enabling\n      this flag will enable some older functionality.\n    </Description>\n  </Variable>\n  <Variable editable=\"true\" initializer=\"true\" input=\"true\" name=\"foregroundProvisioning\">\n    <Description>\n      Normally provisioning is done in a step that uses the \"background\"\n      option to force the workflow to be suspend and be resumed in a\n      background task thread.  This prevents the browser session from\n      hanging since provision can sometimes take a long time.  For demos\n      and testing it can be better to do this in the foreground so that\n      provisioning will have been performed when control is returned to the\n      user.  This prevents having to run the Perform Maintenance task to \n      see the resutls of the request.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"disableIdentityRequests\">\n    <Description>\n      May be passed by the calling workflow to disable processing of\n      IdentityRequest objects after provisioning.  This option should\n      be passed by any workflow that is not used by LCM and does not\n      maintain the IdentityRequest model.  This avoids logging a warning\n      when the IdentityRequest is not found.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"identityRequestId\">\n    <Description>\n      The ID of the IdentityRequest for this request.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"trace\">\n    <Description>\n      Used for debugging this subprocess and when set to true trace\n      statements will be sent to stdout.\n    </Description>\n  </Variable>\n  <Variable name=\"retries\" output=\"true\" type=\"integer\">\n    <Description>\n       The number of retries performed during the execution\n       of the provisioning activities.\n    </Description>\n  </Variable>\n  <Variable name=\"retryProject\">\n    <Description>\n      Project that is assembled for retry purposes, the parts of\n      original plan are broken into a separate plan that includes\n      only the account requests that need to be retried.\n\n      After each visit to retr this project will be rebuilt after\n      the previous execution results are assimimlated back onto\n      the \"main\" project.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"splitProvisioning\">\n    <Description>\n            True to denote this is a partial of the full ProvisioningPlan. This should be true in the case of LCM Provisioning\n            splits.\n        </Description>\n  </Variable>\n</List>\n',NULL,'<List>\n  <Step icon=\"Start\" name=\"Start\" posX=\"17\" posY=\"104\">\n    <Transition to=\"Initialize Retries\"/>\n  </Step>\n  <Step icon=\"Task\" name=\"Initialize Retries\" posX=\"101\" posY=\"104\">\n    <Description>\n      When visiting for the first time initalize the \n      retry variable and avoid the sleep that we\'ll \n      want when looping for retries.\n    </Description>\n    <Script>\n      <Source>\n        if ( retries == null ) { \n            retries = new Integer(0); \n        } else {\n            retries++;\n        }\n        wfcontext.getWorkflowCase().put(\"retries\", retries);\n      </Source>\n    </Script>\n    <Transition to=\"Wait for next retry\" when=\"script:(retries > 0)\"/>\n    <Transition to=\"Provision\"/>\n  </Step>\n  <Step name=\"Wait for next retry\" posX=\"159\" posY=\"17\" wait=\"ref:retryInterval\">\n    <Description>\n      This is a sleep step and just waits to execute the next step.\n      Typically only called when we are retrying to give us some delay\n      between calls down to the PE. Skipped during the first loop.\n    </Description>\n    <Transition to=\"Provision Retry\"/>\n  </Step>\n  <Step action=\"call:provisionProject\" icon=\"Provision\" name=\"Provision\" posX=\"258\" posY=\"100\">\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Arg name=\"background\" value=\"!ref:foregroundProvisioning\"/>\n    <Description> \n       Call the typical provisionProject method during our first time\n       through the workflow.  If there are retries this step\n       will be skipped and should fall into the \"Retry Provision\"\n       step.\n\n       The only thing special here is the flag we specify to\n       the PlanEvaluator to prevent the Request object from\n       from being created if there are retries in the project.\n       Then we can handle them directly in the workflow looping \n       until we are complete.\n    </Description>\n    <Transition to=\"Refresh Identity Request\"/>\n  </Step>\n  <Step action=\"call:refreshIdentityRequestAfterProvisioning\" name=\"Refresh Identity Request\" posX=\"365\" posY=\"100\">\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Arg name=\"disableIdentityRequests\" value=\"ref:disableIdentityRequests\"/>\n    <Description> \n       Refresh the identity request to include provisioning results and\n       any other provisioning side effects in the project.\n       \n       Note that the disableIdentityRequests input variable is passed\n       to skip request processing if we\'re being called from a non-LCM workflow.\n       It is easier to pass this option than to transition around this step.\n    </Description>\n    <Transition to=\"Check for retry\" when=\"!ref:enableRetryRequest\"/>\n    <Transition to=\"End\" when=\"ref:enableRetryRequest\"/>\n  </Step>\n  <Step action=\"call:retryProvisionProject\" icon=\"Provision\" name=\"Provision Retry\" posX=\"421\" posY=\"17\" resultVariable=\"retryProject\">\n    <Arg name=\"project\" value=\"ref:retryProject\"/>\n    <Arg name=\"disableRetryRequest\" value=\"true\"/>\n    <Description> \n       Call retryProvisionProject method that will retry the plans\n       in the project. Notice we pass in the retryProject which \n       contains only the parts of the main project that need\n       to be retried.\n    </Description>\n    <Transition to=\"Merge Retry Project Results\"/>\n  </Step>\n  <Step action=\"call:mergeRetryProjectResults\" name=\"Merge Retry Project Results\" posX=\"603\" posY=\"17\" resultVariable=\"project\">\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Arg name=\"retryProject\" value=\"ref:retryProject\"/>\n    <Description>\n       Merge the results from the retry project back into the project.\n       This step will take and items that are no longer marked rety\n       over to the orginal project.\n    </Description>\n    <Transition to=\"Check for retry\"/>\n  </Step>\n  <Step action=\"call:assembleRetryProject\" icon=\"Task\" name=\"Check for retry\" posX=\"603\" posY=\"98\" resultVariable=\"retryProject\">\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Description> \n       Dig into the project and look for things marked retryable.\n       Build an new plan that contains only the retryable parts.\n    </Description>\n    <Transition to=\"Update Identity Request\"/>\n  </Step>\n  <Step action=\"call:refreshIdentityRequestAfterRetry\" condition=\"script:(retryProject != null)\" name=\"Update Identity Request\" posX=\"49\" posY=\"262\">\n    <Arg name=\"project\" value=\"ref:retryProject\"/>\n    <Description> \n       Update the Identity Request object with the retry details.\n    </Description>\n    <Transition to=\"Calculate Max Retry\"/>\n  </Step>\n  <Step action=\"call:getProvisioningMaxRetries\" name=\"Calculate Max Retry\" posX=\"178\" posY=\"262\" resultVariable=\"provisioningMaxRetries\">\n    <Arg name=\"project\" value=\"ref:retryProject\"/>\n    <Description> \n       Calculate the provisioningMaxRetries variable by digging into the\n       retry project in an attempt to resolve the provisioningMaxRetries\n       from the applications that are involved falling back\n       to a system config.\n\n       Use the provisioningMaxRetries to drive if we continue to loop or end.\n    </Description>\n    <Transition to=\"Calculate Retry Threshold\"/>\n  </Step>\n  <Step action=\"call:getProvisioningRetryThreshold\" name=\"Calculate Retry Threshold\" posX=\"309\" posY=\"262\" resultVariable=\"retryInterval\">\n    <Arg name=\"project\" value=\"ref:retryProject\"/>\n    <Description> \n       Calculate the retryInterval variable by digging into the\n       retry project in an attempt to resolve the provisioningMaxRetries\n       from the applications that are involved falling back\n       to the workflow setting.\n    </Description>\n    <Transition to=\"Start\" when=\"script:( ( retryProject != null ) &amp;&amp; ( provisioningMaxRetries == -1 || retries &lt; provisioningMaxRetries ) )\"/>\n    <Transition to=\"Timeout\" when=\"script:( ( retryProject != null ) &amp;&amp;( retries >= provisioningMaxRetries ) )\"/>\n    <Transition to=\"Check for more provisioning\"/>\n  </Step>\n  <Step name=\"Check for more provisioning\" posX=\"472\" posY=\"259\" resultVariable=\"project\">\n    <Description>\n      There may be cases when dependencies that were waiting on a dependency will still have to be fulfulled,\n      for those cases loop back to provisioning.\n    </Description>\n    <Script>\n      <Source>\n        if ( project.hasUnfinishedIntegrationPlans() ) {\n            project.put(\"disableProjectReset\", true);\n        }\n        return project;\n      </Source>\n    </Script>\n    <Transition to=\"Provision\" when=\"script: ( ( project != null ) &amp;&amp; (project.hasUnfinishedIntegrationPlans()) ) ;\"/>\n    <Transition to=\"End\"/>\n  </Step>\n  <Step action=\"call:forceRetryTimeoutFailure\" name=\"Timeout\" posX=\"374\" posY=\"413\" resultVariable=\"project\">\n    <Arg name=\"message\" value=\"Retry timeout occured.\"/>\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Arg name=\"disableIdentityRequests\" value=\"ref:disableIdentityRequests\"/>\n    <Arg name=\"retryProject\" value=\"ref:retryProject\"/>\n    <Description> \n       Go back through the project and mark everything that was being\n       retried to failure.\n    </Description>\n    <Transition to=\"Update Identity Request with timeouts failures\"/>\n  </Step>\n  <Step action=\"call:refreshIdentityRequestAfterProvisioning\" name=\"Update Identity Request with timeouts failures\" posX=\"539\" posY=\"413\">\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Description> \n       Update the Identity Request object with the failures that were added to\n       the project due to retry timeout.\n    </Description>\n    <Transition to=\"End\"/>\n  </Step>\n  <Step icon=\"Stop\" name=\"End\" posX=\"695\" posY=\"413\"/>\n</List>\n',' ',' ','Identity,IdentityRequest'),('4028ab1063f427af0163f42904560182',1528809718871,1739425374285,NULL,NULL,NULL,'Check Status of queued items',NULL,'Subprocess',NULL,_binary '\0',_binary '\0',_binary '\0',0,_binary '\0',NULL,NULL,'<List>\n  <Variable input=\"true\" name=\"project\" output=\"true\" required=\"true\">\n    <Description>\n      Project that has account requests in the QUEUED state.\n    </Description>\n  </Variable>\n  <Variable initializer=\"script:new Integer(60);\" input=\"true\" name=\"provisioningStatusCheckInterval\" type=\"integer\">\n    <Description>\n      The interval in minutes to retry the check status call,\n      defaults to 1 hour.\n    </Description>\n  </Variable>\n  <Variable initializer=\"script:new Integer(-1);\" name=\"provisioningMaxStatusChecks\" type=\"integer\">\n    <Description>\n       The maximum number of status checks that will be tried before failure \n       of the provisioning activities.  A value of -1 will execute\n       indefinetly, which is the default.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"disableIdentityRequests\">\n    <Description>\n      May be passed by the calling workflow to disable processing of\n      IdentityRequest objects after provisioning.  This option should\n      be passed by any workflow that is not used by LCM and does not\n      maintain the IdentityRequest model.  This avoids logging a warning\n      when the IdentityRequest is not found.\n    </Description>\n  </Variable>\n  <Variable initializer=\"false\" input=\"true\" name=\"trace\">\n    <Description>\n      Used for debugging this subprocess and when set to true trace\n      statements will be sent to stdout.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"splitProvisioning\">\n    <Description>\n      True to denote this is a partial of the full ProvisioningPlan. This should be true in the case of LCM Provisioning\n      splits.\n    </Description>\n  </Variable>\n  <Variable name=\"statusChecks\" output=\"true\" type=\"integer\">\n    <Description>\n       The number of status checks performed during the execution\n       of the provisioning activities.\n    </Description>\n  </Variable>\n</List>\n',NULL,'<List>\n  <Step icon=\"Start\" name=\"Start\" posX=\"25\" posY=\"233\">\n    <Transition to=\"Requires Check\"/>\n  </Step>\n  <Step action=\"call:requiresStatusCheck\" icon=\"Task\" name=\"Requires Check\" posX=\"134\" posY=\"233\" resultVariable=\"requiresStatusCheck\">\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Description>\n       Up front check to compute if the status check is necessary.\n\n       Dig into the plan and check to see if any of the plan results have \n       queued items with requestIds??\n\n       If both are not true, bail out -- otherwise enter a loop \n       that will checking for status.       \n    </Description>\n    <Transition to=\"Initialize Status Checks\" when=\"script:(requiresStatusCheck)\"/>\n    <Transition to=\"Apply Committed Results\"/>\n  </Step>\n  <Step icon=\"Task\" name=\"Initialize Status Checks\" posX=\"192\" posY=\"119\">\n    <Description>\n      When visiting for the first time initalize the \n      statusChecks counter variable and avoid the sleep that we\'ll \n      want when looping while checking status.\n    </Description>\n    <Script>\n      <Source>\n        if ( statusChecks == null ) { \n            statusChecks = new Integer(0); \n        } else {\n            statusChecks++;\n        }\n        wfcontext.getWorkflowCase().put(\"statusChecks\", statusChecks);\n      </Source>\n    </Script>\n    <Transition to=\"Calculate Max Checks\"/>\n  </Step>\n  <Step action=\"call:getProvisioningMaxStatusChecks\" name=\"Calculate Max Checks\" posX=\"344\" posY=\"119\" resultVariable=\"provisioningMaxStatusChecks\">\n    <Description> \n       Calculate the maxRetries variable by digging into the\n       retry project in an attempt to resolve the maxRetries \n       from the applications that are involved falling back\n       to a system config.\n    </Description>\n    <Transition to=\"Calculate StatusCheck Threshold\"/>\n  </Step>\n  <Step action=\"call:getProvisioningStatusCheckInterval\" name=\"Calculate StatusCheck Threshold\" posX=\"526\" posY=\"119\" resultVariable=\"provisioningCheckStatusInterval\">\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Description> \n       Calculate the provisioningStatusCheckInterval variable by digging into the\n       retry project in an attempt to resolve the maxRetries \n       from the applications that are involved falling back\n       to the workflow setting.\n    </Description>\n    <Transition to=\"CheckStatus\" when=\"script:(statusChecks == 0)\"/>\n    <Transition to=\"Wait for next check\"/>\n  </Step>\n  <Step name=\"Wait for next check\" posX=\"584\" posY=\"16\" wait=\"ref:provisioningCheckStatusInterval\">\n    <Description>\n       Pause and waiting for things to happen on the PE side.  \n       Use the configurable interval to determine how long\n       we wait in between checks.\n    </Description>\n    <Transition to=\"CheckStatus\"/>\n  </Step>\n  <Step action=\"call:checkProvisioningStatus\" name=\"CheckStatus\" posX=\"730\" posY=\"16\" resultVariable=\"project\">\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Description> \n       Call the connector\'s checkStatus method for each queued item found in a project.\n       This method will also update the status on the plan as items complete.\n    </Description>\n  </Step>\n  <Step action=\"call:refreshIdentityRequestAfterProvisioning\" name=\"Refresh Identity Request\" posX=\"730\" posY=\"121\">\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Arg name=\"disableIdentityRequests\" value=\"ref:disableIdentityRequests\"/>\n    <Description> \n       Refresh the identity request to include provisioning results returned\n       from the connector\'s checkStatus any other provisioning side effects updated in the project.\n       \n       This method gives us the update of each access request item so it can\n       be displayed in the UI as they complete instead of waiting for\n       the entire process to complete.\n       \n       Note that the disableIdentityRequests input variable is passed\n       to skip request processing if we\'re being called from a non-LCM workflow.\n       It is easier to pass this option than to transition around this step.\n    </Description>\n    <Transition to=\"Requires Check\" when=\"script:( provisioningMaxStatusChecks == -1 || statusChecks &lt; provisioningMaxStatusChecks)\"/>\n    <Transition to=\"Timeout\" when=\"script:( statusChecks >= provisioningMaxStatusChecks )\"/>\n    <Transition to=\"Apply Committed Results\"/>\n  </Step>\n  <Step action=\"call:addMessage\" name=\"Timeout\" posX=\"916\" posY=\"118\">\n    <Arg name=\"message\" value=\"Max number of status checks occurred.\"/>\n    <Description> \n    </Description>\n    <Transition to=\"Apply Committed Results\"/>\n  </Step>\n  <Step action=\"call:applyCommittedResults\" condition=\"script: return (statusChecks != null );\" icon=\"Task\" name=\"Apply Committed Results\" posX=\"916\" posY=\"229\">\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Description>\n      Apply any of the commited plans, account requests or attribute requests \n      that result from our checking the request status.\n    </Description>\n    <Transition to=\"End\"/>\n  </Step>\n  <Step icon=\"Stop\" name=\"End\" posX=\"1116\" posY=\"229\"/>\n</List>\n',' ',' ','Identity,IdentityRequest'),('4028ab1063f427af0163f42904b20183',1528809718962,1739425380428,NULL,NULL,NULL,'Manage Ticket','\n   A workflow subprocss designed to allow service/help desk tickets opened\n   or updated during the lifecycle of a workflow.\n  ','Subprocess',NULL,_binary '\0',_binary '\0',_binary '\0',0,_binary '\0',NULL,NULL,'<List>\n  <Variable input=\"true\" name=\"project\" required=\"true\">\n    <Description>\n      Project that is being provisioninged.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"identityRequestId\" output=\"true\" required=\"true\">\n    <Description>\n      The ID of the IdentityRequest object which can can be used to read/update \n      the external ticket id. \n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"ticketManagementApplication\" required=\"true\">\n    <Description>\n      Ticketing application that supports creating/updating objects of type ticket.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"ticketDataGenerationRule\">\n    <Description>\n      A rule that builds up the ticketing provisioning plan based on the workflow\n      context.  This rule gets all of the arguments to this subprocess \n      plus the curreent workflow context.  The rule can return either a \n      ProvisioningPlan or a Map of name value pairs. \n      \n      The rule name can be specified here on the subprocess or on the \n      ticketManagementApplication config under the same name as this \n      variable.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"action\" required=\"true\">\n    <Description>\n      This is a breadcrumb given to the rule to help it generate the proper\n      provisioning plan for the current injection point.  There will be several\n      default injection points that will map to an action.\n     \n      OOTB There are four points which all workflow are injected and will map to the\n      \"actions\" passed into this subprocess.\n     \n      open\n      postApproval\n      postProvisioning\n      close\n    </Description>\n  </Variable>\n  <Variable initializer=\"true\" input=\"true\" name=\"trace\">\n    <Description>\n      Used for debugging this subprocess and when set to true trace\n      statements will be sent to stdout.\n    </Description>\n  </Variable>\n  <Variable name=\"ticketPlan\">\n    <Description>\n      Plan that is generated during the processing of the ticektDataGenerationRule\n      execution.  This will eventually be turned in to the ticketProject which can \n      be provisioned.\n    </Description>\n  </Variable>\n  <Variable name=\"ticketProject\">\n    <Description>\n      Variable that will hold our compiled project, that eventually will be \n      provisioned to the backend ticketing system.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"ticketId\" output=\"true\">\n    <Description>\n      Variable that will hold the ticketId, it may be passed in for update\n      and will be returned on create.  If this value is null AND the\n      its not a create action, the ticket id will be read from \n      the identityRequest.externalTicketId field.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"priority\">\n    <Description>\n      String version of WorkItem.level that will be used\n      to set the priority of any workitems.\n    </Description>\n  </Variable>\n</List>\n',NULL,'<List>\n  <Step icon=\"Start\" name=\"Start\" posX=\"27\" posY=\"12\"/>\n  <Step action=\"call:generateTicketPlan\" name=\"Generate Ticket Plan\" posX=\"132\" posY=\"12\" resultVariable=\"ticketPlan\">\n    <Arg name=\"priority\" value=\"ref:priority\"/>\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Arg name=\"identityRequest\" value=\"ref:identityRequest\"/>\n    <Arg name=\"action\" value=\"ref:action\"/>\n    <Arg name=\"application\" value=\"ref:ticketManagementApplication\"/>\n    <Arg name=\"rule\" value=\"ref:ticketDataGenerationRule\"/>\n    <Arg name=\"ticketId\" value=\"ref:ticketId\"/>\n    <Description>\n      A workflow service that will call to the generation rule to help\n      generate an \'ObjectRequest\' based provisioning plan that will be used to \n      create/update the ticket.  If the rule returns a plan that plan will be \n      returned directly by the buildTicketPlan call.  the rule returns a Map it will \n      be converted into a provisioning plan.\n    </Description>\n  </Step>\n  <Step action=\"call:compileGroupProject\" name=\"Compile Ticket\" posX=\"251\" posY=\"12\" resultVariable=\"ticketProject\">\n    <Arg name=\"plan\" value=\"ref:ticketPlan\"/>\n    <Arg name=\"requester\" value=\"ref:launcher\"/>\n    <Arg name=\"source\" value=\"ref:source\"/>\n    <Arg name=\"disableRetryRequest\" value=\"true\"/>\n    <Arg name=\"optimisticProvisioning\" value=\"false\"/>\n    <Description>\n      Compile the generated plan in a project so it can be provisioned.\n      These will normally compile down to a single targeted connector plan.      \n    </Description>\n  </Step>\n  <Step icon=\"Task\" name=\"Provision Ticket\" posX=\"379\" posY=\"12\">\n    <Arg name=\"priority\" value=\"ref:priority\"/>\n    <Arg name=\"project\" value=\"ref:ticketProject\"/>\n    <Arg name=\"foregroundProvisioning\" value=\"true\"/>\n    <Arg name=\"trace\" value=\"ref:trace\"/>\n    <Description>\n      Call the standard subprocess to initialize the request, this includes\n      auditing, building the approvalset, compiling the plan into \n      project and checking policy violations.\n    </Description>\n    <Return name=\"retries\" to=\"retries\"/>\n    <Return name=\"project\" to=\"ticketProject\"/>\n    <WorkflowRef>\n      <Reference class=\"sailpoint.object.Workflow\" id=\"4028ab1063f427af0163f42903ed0181\" name=\"Provision with retries\"/>\n    </WorkflowRef>\n    <Transition to=\"Update IdentityRequest External ID\"/>\n  </Step>\n  <Step action=\"call:updateExternalTicketId\" condition=\"script:( action.startsWith(&quot;open&quot;) );\" name=\"Update IdentityRequest External ID\" posX=\"551\" posY=\"12\" resultVariable=\"ticketId\">\n    <Arg name=\"project\" value=\"ref:ticketProject\"/>\n    <Arg name=\"application\" value=\"ref:ticketManagementApplication\"/>\n    <Description>\n      Typically only called once, after the create of the ticket. This call will update\n      the IdentityRequest.externalTicketId with the returned ticketId (String).\n    </Description>\n  </Step>\n  <Step icon=\"Stop\" name=\"End\" posX=\"722\" posY=\"12\"/>\n</List>\n',' ',' ','Identity,IdentityRequest,Group'),('4028ab1063f427af0163f42905f90185',1528809719289,1739425380796,NULL,NULL,NULL,'Role Modeler - Impact Analysis',NULL,'RoleModeler',NULL,_binary '\0',_binary '\0',_binary '\0',0,_binary '\0',NULL,'workflow.xhtml','<List>\n  <Variable editable=\"true\" name=\"doArchive\" type=\"boolean\">\n    <Description>Set to true to enable archiving role versions.</Description>\n    <Prompt>Enable Role Versioning</Prompt>\n  </Variable>\n  <Variable editable=\"true\" initializer=\"true\" name=\"doOverlapAnalysis\" type=\"boolean\">\n    <Description>Set to true to enable role overlap analysis.</Description>\n    <Prompt>Enable Overlap Enalysis</Prompt>\n  </Variable>\n  <Variable editable=\"true\" initializer=\"1\" name=\"overlapThreshold\" type=\"int\">\n    <Description>Minimum overlap percentage in any facet a role must have to be included in the result.</Description>\n    <Prompt>Minimum Overlap Percentage</Prompt>\n  </Variable>\n  <Variable input=\"true\" name=\"approvalObject\">\n    <Description>New version of role to approve</Description>\n  </Variable>\n  <Variable name=\"approvalType\">\n    <Description>Set to \"delete\" when deleting roles. Set to \"rollback\" when restoring a role archive.  Otherwise null.</Description>\n  </Variable>\n  <Variable input=\"true\" name=\"approvalSource\">\n    <Description>\n       Where in the UI we are requesting the approval.\n       Values: modeler, directed, undirected, certification.\n     </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"impactAnalysisOwner\">\n    <Description>Name of user to receive impact analysis result</Description>\n  </Variable>\n  <Variable initializer=\"call:getDisplayableRoleName\" name=\"roleName\">\n    <Description>Role name referenced by the email templates</Description>\n  </Variable>\n  <Variable editable=\"true\" initializer=\"false\" name=\"noRolePropagation\" type=\"boolean\">\n    <Description>Set to true to disable role change propagation.</Description>\n  </Variable>\n</List>\n',NULL,'<List>\n  <Step icon=\"Start\" name=\"start\">\n    <Transition to=\"Impact Analysis\"/>\n  </Step>\n  <Step action=\"launchImpactAnalysis\" condition=\"script:!(impactAnalysisOwner == unbound || impactAnalysisOwner == null)\" icon=\"Analysis\" name=\"Impact Analysis\" posX=\"141\" posY=\"17\">\n    <Arg name=\"doOverlapAnalysis\" value=\"ref:doOverlapAnalysis\"/>\n    <Arg name=\"overlapThreshold\" value=\"ref:overlapThreshold\"/>\n    <Arg name=\"noApplicationTemplates\" value=\"true\"/>\n    <Transition to=\"Review Analysis\"/>\n  </Step>\n  <Step condition=\"script:!(impactAnalysisOwner == unbound || impactAnalysisOwner == null)\" icon=\"Email\" name=\"Review Analysis\" posX=\"258\" posY=\"17\">\n    <Approval owner=\"ref:impactAnalysisOwner\">\n      <Arg name=\"workItemDescription\" value=\"Review impact analysis of $(call:getObjectClass): $(call:getDisplayableRoleName)\"/>\n      <WorkItemConfig escalationStyle=\"none\">\n        <NotificationEmailTemplateRef>\n          <Reference class=\"sailpoint.object.EmailTemplate\" id=\"4028ab1063f427af0163f42905cf0184\" name=\"Role Modeler - Impact Analysis Review\"/>\n        </NotificationEmailTemplateRef>\n      </WorkItemConfig>\n    </Approval>\n    <Transition to=\"Commit\"/>\n  </Step>\n  <Step action=\"commit\" condition=\"script:(impactAnalysisOwner == unbound || impactAnalysisOwner == null) || approved\" name=\"Commit\" posX=\"375\" posY=\"17\">\n    <Arg name=\"archive\" value=\"ref:doArchive\"/>\n    <Transition to=\"stop\"/>\n  </Step>\n  <Step icon=\"Stop\" name=\"stop\" posX=\"541\" posY=\"17\"/>\n</List>\n',' ',' ','Role'),('4028ab1063f427af0163f42906de0187',1528809719519,1739425380860,NULL,NULL,NULL,'Role Modeler - Owner Approval',NULL,'RoleModeler',NULL,_binary '\0',_binary '\0',_binary '\0',0,_binary '\0',NULL,'workflow.xhtml','<List>\n  <Variable editable=\"true\" name=\"doArchive\" type=\"boolean\">\n    <Description>Set to true to enable archiving role versions.</Description>\n    <Prompt>Enable Role Versioning</Prompt>\n  </Variable>\n  <Variable editable=\"true\" initializer=\"true\" name=\"doOverlapAnalysis\" type=\"boolean\">\n    <Description>Set to true to enable role overlap analysis.</Description>\n    <Prompt>Enable Overlap Enalysis</Prompt>\n  </Variable>\n  <Variable editable=\"true\" initializer=\"1\" name=\"overlapThreshold\" type=\"int\">\n    <Description>Minimum overlap percentage in any facet a role must have to be included in the result.</Description>\n    <Prompt>Minimum Overlap Percentage</Prompt>\n  </Variable>\n  <Variable input=\"true\" name=\"approvalObject\">\n    <Description>New version of role to approve</Description>\n  </Variable>\n  <Variable name=\"approvalType\">\n    <Description>Set to \"delete\" when deleting roles. Set to \"rollback\" when restoring an archive.  Otherwise null.</Description>\n  </Variable>\n  <Variable input=\"true\" name=\"approvalSource\">\n    <Description>\n       Where in the UI we are requesting the approval.\n       Values: modeler, directed, undirected, certification.\n     </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"impactAnalysisOwner\">\n    <Description>Name of user to receive impact analysis result</Description>\n  </Variable>\n  <Variable name=\"roleName\">\n    <Description>Role name referenced by the email templates</Description>\n  </Variable>\n  <Variable editable=\"true\" initializer=\"false\" name=\"noRolePropagation\" type=\"boolean\">\n    <Description>Set to true to disable role change propagation.</Description>\n  </Variable>\n</List>\n',NULL,'<List>\n  <Step action=\"getDisplayableRoleName\" icon=\"Start\" name=\"start\" resultVariable=\"roleName\">\n    <Description>\n      Copy the role name to a variable for easier reference in the\n      email template.  Skip to approvals if there is no impact\n      analysis owner.\n    </Description>\n    <Transition to=\"Check Approvals\" when=\"impactAnalysisOwner == unbound || impactAnalysisOwner == null\"/>\n    <Transition to=\"Impact Analysis\"/>\n  </Step>\n  <Step action=\"launchImpactAnalysis\" icon=\"Analysis\" name=\"Impact Analysis\" posX=\"167\" posY=\"16\">\n    <Arg name=\"doOverlapAnalysis\" value=\"ref:doOverlapAnalysis\"/>\n    <Arg name=\"overlapThreshold\" value=\"ref:overlapThreshold\"/>\n    <Arg name=\"noApplicationTemplates\" value=\"true\"/>\n    <Description>\n      Call a handler method to launch the impact analysis task.\n    </Description>\n    <Transition to=\"Review Analysis\"/>\n  </Step>\n  <Step icon=\"Email\" name=\"Review Analysis\" posX=\"276\" posY=\"16\">\n    <Approval owner=\"ref:impactAnalysisOwner\">\n      <Arg name=\"workItemDescription\" value=\"Review impact analysis of $(call:getObjectClass): $(call:getDisplayableRoleName)\"/>\n      <WorkItemConfig escalationStyle=\"none\">\n        <NotificationEmailTemplateRef>\n          <Reference class=\"sailpoint.object.EmailTemplate\" id=\"4028ab1063f427af0163f42905cf0184\" name=\"Role Modeler - Impact Analysis Review\"/>\n        </NotificationEmailTemplateRef>\n      </WorkItemConfig>\n    </Approval>\n    <Description>\n      Wait for review of the impact analyis report.\n    </Description>\n    <Transition to=\"stop\" when=\"!approved\"/>\n    <Transition to=\"Check Approvals\"/>\n  </Step>\n  <Step name=\"Check Approvals\" posX=\"85\" posY=\"125\">\n    <Description>\n      Skip approvals if the launcher is also the (previous) role owner.\n    </Description>\n    <Transition to=\"Audit Success\" when=\"call:isSelfApproval\"/>\n    <Transition to=\"Approve\"/>\n  </Step>\n  <Step icon=\"Approval\" name=\"Approve\" posX=\"276\" posY=\"222\">\n    <Approval owner=\"call:buildOwnerApproval\">\n      <WorkItemConfig escalationStyle=\"none\">\n        <NotificationEmailTemplateRef>\n          <Reference class=\"sailpoint.object.EmailTemplate\" id=\"4028ab1063f427af0163f42906970186\" name=\"Role Modeler - Approval\"/>\n        </NotificationEmailTemplateRef>\n      </WorkItemConfig>\n    </Approval>\n    <Description>\n      Single stage approval by the role owner.\n      The handler method will build a suitable Approval object.\n    </Description>\n    <Transition to=\"Audit Success\" when=\"approved\"/>\n    <Transition to=\"Audit Failure\" when=\"!approved\"/>\n  </Step>\n  <Step action=\"audit\" icon=\"Audit\" name=\"Audit Failure\" posX=\"423\" posY=\"218\">\n    <Arg name=\"source\" value=\"ref:launcher\"/>\n    <Arg name=\"action\" value=\"call:getApprovalAuditAction\"/>\n    <Arg name=\"target\" value=\"Role: $(roleName)\"/>\n    <Arg name=\"string1\" value=\"failure\"/>\n    <Transition to=\"stop\"/>\n  </Step>\n  <Step action=\"audit\" icon=\"Audit\" name=\"Audit Success\" posX=\"334\" posY=\"120\">\n    <Arg name=\"source\" value=\"ref:launcher\"/>\n    <Arg name=\"action\" value=\"call:getApprovalAuditAction\"/>\n    <Arg name=\"target\" value=\"Role: $(roleName)\"/>\n    <Arg name=\"string1\" value=\"success\"/>\n    <Transition to=\"Commit\"/>\n  </Step>\n  <Step action=\"commit\" name=\"Commit\" posX=\"423\" posY=\"120\">\n    <Arg name=\"archive\" value=\"ref:doArchive\"/>\n    <Transition to=\"stop\"/>\n  </Step>\n  <Step icon=\"Stop\" name=\"stop\" posX=\"423\" posY=\"12\"/>\n</List>\n',' ',' ','Role'),('4028ab1063f427af0163f42907740188',1528809719670,1739425376672,NULL,NULL,NULL,'Identity Refresh',NULL,'IdentityRefresh',NULL,_binary '\0',_binary '\0',_binary '\0',-1,_binary '\0',NULL,NULL,'<List>\n  <Variable input=\"true\" name=\"identitizer\" transient=\"true\" type=\"object\">\n    <Description>\n      Instance of sailpoint.object.Identitizer that launched this workflow.\n      This is a transient object that will only be used if the\n      workflow executes synchronously to completion when launched.\n      It saves having finishRefresh allocate and initialize a new Identitizer.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"identity\" transient=\"true\" type=\"object\">\n    <Description>\n      Identity object we\'re refreshing.  This is a transient object\n      that will only be used by finishRefresh if the workflow runs to \n      completion without suspending.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"refreshOptions\" type=\"object\">\n    <Description>\n      Map of options to configure Identitizer when we\'re ready to \n      complete the refresh.  These were culled from the original set of\n      options given to the Identitizer that launched this workflow.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"identityName\" type=\"string\">\n    <Description>\n      The name of the identity object being refreshed.  The first half\n      of the refresh will have been committed, this includes link refresh,\n      attribute promotion, and role detction.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"project\">\n    <Description>\n      A ProvisioningProject object describing the modifications to the identity.\n      This may include a list of Question objects which will \n      cause the generation of a Form and a WorkItem to solicit\n      additional information necessary for provisioning.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"changeEvents\">\n    <Description>\n      A list of IdentityChangeEvent objects generated by pre-provisioning\n      triggers.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"detectionDifference\">\n    <Description>\n      A sailpoint.object.Difference object with changes made to the\n      detected role list during the first half of the refresh.  These\n      will already have been committed to the database.  In theory this\n      could be used to trigger approvals or notifications though we \n      don\'t really support the notion of \"rejecting\" a detection.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"previousVersion\" type=\"object\">\n    <Description>\n      A copy of the Identity object made before the refresh.\n      This is needed in the second phase of refresh for trigger processing.\n    </Description>\n  </Variable>\n  <Variable editable=\"true\" initializer=\"false\" input=\"true\" name=\"doManualActions\">\n    <Description>\n      When set to \'true\' the unmanged plan from the provisioning project\n      will be converted into one or more manual action work items to request\n      the changes since they can\'t be done automatically.\n      This may be passed in from the refresh task arguments.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"enableManualAccountSelection\">\n    <Description>\n      When set to \'true\' the system will send out Account Selection Notification emails \n      for users with more than one account on any one application and the system \n      can\'t determine the provisioning account.\n      This may be passed in from the refresh task arguments.\n    </Description>\n  </Variable>\n</List>\n',NULL,'<List>\n  <Step icon=\"Start\" name=\"start\" posX=\"28\" posY=\"10\">\n    <Transition to=\"Evaluate Change Events\"/>\n  </Step>\n  <Step condition=\"changeEvents != null\" name=\"Evaluate Change Events\" posX=\"161\" posY=\"10\">\n    <Transition to=\"Do Provisioning Forms\"/>\n  </Step>\n  <Step condition=\"project != null &amp;&amp; (project.hasQuestions() || (isTrue(enableManualAccountSelection) &amp;&amp; (project.hasUnansweredAccountSelections() ||  project.hasUnansweredProvisioningTargets())))\" name=\"Do Provisioning Forms\" posX=\"346\" posY=\"10\">\n    <Arg name=\"identityName\" value=\"ref:identityName\"/>\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Arg name=\"fallbackOwner\" value=\"spadmin\"/>\n    <Arg name=\"accountSelectionOwner\" value=\"applicationOwner\"/>\n    <Arg name=\"formTemplate\" value=\"Identity Refresh\"/>\n    <Arg name=\"disableManualAccountSelection\" value=\"script:!isTrue(enableManualAccountSelection)\"/>\n    <Description>\n      Call the standard subprocess for assembling, presenting, and assimilating\n      provisioning forms.\n    </Description>\n    <Return name=\"project\" to=\"project\"/>\n    <WorkflowRef>\n      <Reference class=\"sailpoint.object.Workflow\" id=\"4028ab1063f427af0163f429029a017e\" name=\"Do Provisioning Forms\"/>\n    </WorkflowRef>\n    <Transition to=\"Finish Refresh\"/>\n  </Step>\n  <Step action=\"finishRefresh\" name=\"Finish Refresh\" posX=\"515\" posY=\"10\">\n    <Arg name=\"identitizer\" value=\"ref:identitizer\"/>\n    <Arg name=\"identity\" value=\"ref:identity\"/>\n    <Arg name=\"identityName\" value=\"ref:identityName\"/>\n    <Arg name=\"refreshOptions\" value=\"ref:refreshOptions\"/>\n    <Arg name=\"previousVersion\" value=\"ref:previousVersion\"/>\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Description>\n      Provision what is left in the project then finish the refresh\n      by running policy checks, recalculating scores, and other things.\n    </Description>\n    <Transition to=\"Manual Actions\"/>\n  </Step>\n  <Step condition=\"isTrue(doManualActions) &amp;&amp; project.getUnmanagedPlan() != null\" name=\"Manual Actions\" posX=\"696\" posY=\"10\">\n    <Arg name=\"identityName\" value=\"ref:identityName\"/>\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Description>\n      Present work items for the parts of the project that could not be sent\n      to an integrated IDM system.\n    </Description>\n    <WorkflowRef>\n      <Reference class=\"sailpoint.object.Workflow\" id=\"4028ab1063f427af0163f42903300180\" name=\"Do Manual Actions\"/>\n    </WorkflowRef>\n    <Transition to=\"end\"/>\n  </Step>\n  <Step name=\"end\" posX=\"859\" posY=\"10\"/>\n</List>\n',' ',' ','Identity'),('4028ab1063f427af0163f42908270189',1528809719847,1739425377653,NULL,NULL,NULL,'Identity Update',NULL,'IdentityUpdate',NULL,_binary '\0',_binary '\0',_binary '\0',0,_binary '\0',NULL,NULL,'<List>\n  <Variable initializer=\"false\" name=\"trace\">\n    <Description>\n      Used for debugging this workflow and when set to true trace\n      will be sent to stdout.\n    </Description>\n  </Variable>\n  <Variable editable=\"true\" name=\"optimisticProvisioning\">\n    <Description>\n      Set to true to enable optimistic provisioning.  This will cause\n      changes to the entitlements compiled from role assignments to be \n      applied immediately to the identity cube rather than waiting\n      for the next refresh/reaggregation after the provisioning system\n      completes the request.\n    </Description>\n  </Variable>\n  <Variable editable=\"true\" initializer=\"true\" name=\"foregroundProvisioning\">\n    <Description>\n      Normally provisioning is done in a step that uses the \"backgroud\"\n      option to force the workfow to be suspend and be resumed in a\n      background task thread.  This prevents the browser session from\n      hanging since provision can sometimes take a long time.  For demos\n      and testing it can be better to do this in the foreground so that\n      provisioning will have been performed when control is returned to the\n      user.  This prevents having to run the Perform Maintanance task to \n      see the resutls of the request.\n    </Description>\n  </Variable>\n  <Variable editable=\"true\" initializer=\"false\" name=\"doManualActions\">\n    <Description>\n      When set to \'true\' the unmanged plan from the provisioning project\n      will be converted into one or more manual action work items to request\n      the changes since they can\'t be done automatically.\n    </Description>\n  </Variable>\n  <Variable editable=\"true\" initializer=\"false\" name=\"doRefresh\">\n    <Description>\n      Set to true to cause an identity refresh after the changes in the plan\n      have been provisioned.  This is normally off, you might want this on\n      if you want modification of identity or link attributes to result in\n      an immediate re-evaluation of assigned and detected roles.\n    </Description>\n  </Variable>\n  <Variable editable=\"true\" initializer=\"false\" name=\"requireCreateTemplates\">\n    <Description>\n      When set to \'true\' any requests for an account that does not exist\n      will be forced into the unmanaged plan unless the target application\n      specifies an account creation template.  This may be combined with\n      doManualActions to have work items sent out to handle account creation.\n    </Description>\n  </Variable>\n  <Variable editable=\"true\" name=\"approver\">\n    <Description>\n      Name of Identity to approve role assignments.\n      This is not set when launched from the UI, but you may want\n      to hard code an initializer for testing.\n    </Description>\n  </Variable>\n  <Variable editable=\"true\" initializer=\"spadmin\" name=\"fallbackApprover\">\n    <Description>\n      The name of an Identity that will be assigned ownership of any\n      manual action work items if the application owner is not set.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"identityName\" required=\"true\">\n    <Description>\n      Name of Identity that is being updated.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"plan\" required=\"true\">\n    <Description>\n      Master provisioning plan containing the changes to process.\n    </Description>\n  </Variable>\n  <Variable name=\"sessionOwner\">\n    <Description>\n      This is a system variable that we do not need to declare, but it\'s \n      good for documentation.  This will be set when the workflow is launched\n      to the name of the Identity that is considered to be the owner\n      of the interactive UI session.  This is passed to call:buildProvisioningForm\n      so that we present forms to the active user first before suspending and\n      opening work items for other users.\n    </Description>\n  </Variable>\n  <Variable initializer=\"script:(identityDisplayName != void) ? identityDisplayName : resolveDisplayName(identityName)\" name=\"identityDisplayName\">\n    <Description>\n      The displayName of the identity being updated.\n      Query for this using a projection query and fall back to the name.\n    </Description>\n  </Variable>\n  <Variable name=\"project\">\n    <Description>\n      Provisioning project containing assigned roles and side effects,\n      compiled from the input plan.\n    </Description>\n  </Variable>\n  <Variable name=\"newRoles\"/>\n  <Variable name=\"oldRoles\"/>\n  <Variable name=\"linksToAdd\"/>\n  <Variable name=\"linksToMove\"/>\n  <Variable name=\"linksToRemove\"/>\n  <Variable name=\"approvalSet\"/>\n  <Variable initializer=\"LCM Identity Update Approval\" input=\"true\" name=\"approvalEmailTemplate\">\n    <Description>\n     The email template to use for approval notifications.\n    </Description>\n  </Variable>\n</List>\n','Identity Update Config Form','<List>\n  <Step icon=\"Start\" name=\"start\" posX=\"19\" posY=\"17\">\n    <Transition to=\"Inspect Plan\"/>\n  </Step>\n  <Step action=\"calculateIdentityDifference\" name=\"Inspect Plan\" posX=\"106\" posY=\"17\">\n    <Arg name=\"identityName\" value=\"ref:identityName\"/>\n    <Arg name=\"plan\" value=\"ref:plan\"/>\n    <Arg name=\"oldRoles\" value=\"oldRoles\"/>\n    <Arg name=\"newRoles\" value=\"newRoles\"/>\n    <Arg name=\"linksToAdd\" value=\"linksToAdd\"/>\n    <Arg name=\"linksToMove\" value=\"linksToMove\"/>\n    <Arg name=\"linksToRemove\" value=\"linksToRemove\"/>\n    <Arg name=\"approvalSet\" value=\"approvalSet\"/>\n    <Description>\n      Dig some things out of the plan into variables.\n      We\'re setting newRoles and oldRoles temporarily so we can use\n      the old approval pages.  Sould be calculating other differences!\n    </Description>\n    <Transition to=\"Compile Project\"/>\n  </Step>\n  <Step action=\"compileProvisioningProject\" name=\"Compile Project\" posX=\"204\" posY=\"17\" resultVariable=\"project\">\n    <Arg name=\"identityName\" value=\"ref:identityName\"/>\n    <Arg name=\"plan\" value=\"ref:plan\"/>\n    <Arg name=\"requester\" value=\"ref:launcher\"/>\n    <Arg name=\"source\" value=\"UI\"/>\n    <Arg name=\"optimisticProvisioning\" value=\"ref:optimisticProvisioning\"/>\n    <Arg name=\"requireCreateTemplates\" value=\"ref:requireCreateTemplates\"/>\n    <Description>\n      Compile the provisioning plan into a provisioning project.\n      If you need to pass in provisioner options like \"noFiltering\"\n      or \"noRoleDeprovisioning\" you must pass them as explicit\n      arguments to the call.\n\n      The evaluation options \"requester\" and \"source\" are commonly\n      set here.\n\n      You can also pass things into the Template and Field scripts by\n      defining Args in this step.\n    </Description>\n    <Transition to=\"Start Approval Process\" when=\"ref:approver\"/>\n    <Transition to=\"Start Provisioning Form Process\"/>\n  </Step>\n  <Step action=\"setLaunchMessage\" icon=\"Message\" name=\"Start Approval Process\" posX=\"358\" posY=\"13\">\n    <Arg name=\"message\" value=\"workflow_identity_approval\"/>\n    <Arg name=\"arg1\" value=\"ref:identityDisplayName\"/>\n    <Arg name=\"arg2\" value=\"ref:approver\"/>\n    <Description> \n      Add a message to the worflow launch result indicating that an approval is in progress.\n      This also serves an example of building localized messages from the \n      catalog.\n    </Description>\n    <Transition to=\"Approval\"/>\n  </Step>\n  <Step icon=\"Approval\" name=\"Approval\" posX=\"462\" posY=\"13\">\n    <Approval description=\"Approve modification to $(identityDisplayName)\" owner=\"ref:approver\" renderer=\"identityUpdate.xhtml\" send=\"identityName,identityDisplayName,newRoles,oldRoles,linksToAdd,linksToMove,linksToRemove,approvalSet\">\n      <Arg name=\"workItemNotificationTemplate\" value=\"ref:approvalEmailTemplate\"/>\n    </Approval>\n    <Transition to=\"end\" when=\"!ref:approved\"/>\n    <Transition to=\"Start Provisioning Form Process\"/>\n  </Step>\n  <Step action=\"setLaunchMessage\" icon=\"Message\" name=\"Start Provisioning Form Process\" posX=\"270\" posY=\"124\">\n    <Arg name=\"message\" value=\"workflow_identity_forms\"/>\n    <Arg name=\"arg1\" value=\"ref:identityDisplayName\"/>\n    <Transition to=\"Do Provisioning Forms\"/>\n  </Step>\n  <Step name=\"Do Provisioning Forms\" posX=\"270\" posY=\"219\">\n    <Arg name=\"identityName\" value=\"ref:identityName\"/>\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Arg name=\"formTemplate\" value=\"Identity Update\"/>\n    <Arg name=\"preferredOwner\" value=\"ref:sessionOwner\"/>\n    <Description>\n      Call the standard subprocess for assembling, presenting, and assimilating\n      provisioning forms.\n    </Description>\n    <Return name=\"project\" to=\"project\"/>\n    <WorkflowRef>\n      <Reference class=\"sailpoint.object.Workflow\" id=\"4028ab1063f427af0163f429029a017e\" name=\"Do Provisioning Forms\"/>\n    </WorkflowRef>\n    <Transition to=\"Start Provisioning Process\"/>\n  </Step>\n  <Step action=\"setLaunchMessage\" icon=\"Message\" name=\"Start Provisioning Process\" posX=\"270\" posY=\"315\">\n    <Arg name=\"message\">\n      <Script>\n        <Source>\n          // pick a message with more detail if we\'re provisioning\n          import sailpoint.object.ProvisioningPlan;\n          String msg = \"workflow_identity_saved\";\n          boolean otherPlans = false;\n          List plans = project.getPlans();\n          if (plans != null) {\n              for (int i = 0 ; i &lt; plans.size() ; i++) {\n                  ProvisioningPlan plan = (ProvisioningPlan)plans.get(i);\n                  if (!ProvisioningPlan.APP_IIQ.equals(plan.getTargetIntegration())) {\n                     otherPlans = true;\n                     break;\n                  }\n              }\n          }\n\n          if (project.getUnmanagedPlan() != null &amp;&amp; isTrue(doManualActions)) {\n              if (otherPlans)\n                  msg = \"workflow_identity_provisioning_manual\";\n              else\n                  msg = \"workflow_identity_manual\";\n          }\n          else if (otherPlans) {\n              msg = \"workflow_identity_provisioning\";\n          }\n\n          return msg;\n        </Source>\n      </Script>\n    </Arg>\n    <Arg name=\"arg1\" value=\"ref:identityDisplayName\"/>\n    <Transition to=\"Provision\"/>\n  </Step>\n  <Step action=\"call:provisionProject\" icon=\"Provision\" name=\"Provision\" posX=\"394\" posY=\"315\">\n    <Arg name=\"background\" value=\"!ref:foregroundProvisioning\"/>\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Description>\n      Provision what remains in the project.  Normally we won\'t\n      be here with unanswered provisioning questions, but if we have them\n      the provisioner will just skip creating those accounts and do what it can.\n    </Description>\n    <Transition to=\"Manual Actions\"/>\n  </Step>\n  <Step condition=\"isTrue(doManualActions) &amp;&amp; project.getUnmanagedPlan() != null\" name=\"Manual Actions\" posX=\"490\" posY=\"315\">\n    <Arg name=\"identityName\" value=\"ref:identityName\"/>\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Description>\n      Present work items for the parts of the project that could not be sent\n      to an integrated IDM system.\n    </Description>\n    <WorkflowRef>\n      <Reference class=\"sailpoint.object.Workflow\" id=\"4028ab1063f427af0163f42903300180\" name=\"Do Manual Actions\"/>\n    </WorkflowRef>\n    <Transition to=\"Refresh Identity\"/>\n  </Step>\n  <Step action=\"call:refreshIdentity\" condition=\"ref:doRefresh\" icon=\"Task\" name=\"Refresh Identity\" posX=\"599\" posY=\"315\">\n    <Arg name=\"identityName\" value=\"ref:identityName\"/>\n    <Arg name=\"correlateEntitlements\" value=\"true\"/>\n    <Arg name=\"provision\" value=\"true\"/>\n    <Arg name=\"synchronizeAttributes\" value=\"true\"/>\n    <Arg name=\"doManualActions\" value=\"ref:doManualActions\"/>\n    <Description>\n      Add arguments as necessary to enable refresh features.  Typically you only want this\n      to correlate roles and possibly provision if we notice new assigned roles.\n      Note that provisioning will be done in the Identity Refresh workflow so if there\n      are any provisioning forms to display we won\'t feed them directly to the \n      current user, they\'ll have to return to the inbox.\n    </Description>\n    <Transition to=\"end\"/>\n  </Step>\n  <Step name=\"Form Owner Error\" posX=\"701\" posY=\"9\">\n    <Script>\n      <Source>\n        //println(\"Unable to determine owner for provisioning form, terminating process\");\n        //println(wfcontext.getWorkflowCase().toXml());\n      </Source>\n    </Script>\n    <Transition to=\"end\"/>\n  </Step>\n  <Step icon=\"Stop\" name=\"end\" posX=\"599\" posY=\"9\"/>\n</List>\n',' ',' ','Identity'),('4028ab1063f427af0163f429087f018a',1528809719935,1739425381018,NULL,NULL,NULL,'Scheduled Assignment','\nWorkflow called to handle a scheduled assignment and deassignments,\ncommonly known as \"sunrise\" and \"sunset\".  These are intended to\nbe used only from Request objects that are scheduled by the provisioning\nplan evaluator.\n  ','ScheduledAssignment',NULL,_binary '\0',_binary '\0',_binary '\0',-1,_binary '\0',NULL,NULL,'<List>\n  <Variable input=\"true\" name=\"identity\">\n    <Description>The database id of the target identity</Description>\n  </Variable>\n  <Variable input=\"true\" name=\"identityName\">\n    <Description>The name of the target identity</Description>\n  </Variable>\n  <Variable input=\"true\" name=\"assigner\">\n    <Description>The name of the identity considered to be the source of the assignment.\nThis is used for the audit event.  It is not necessary to make the assignment\nbecuase the original assigner will also be stored in RoleAssignment metadata\nin the cube.</Description>\n  </Variable>\n  <Variable editable=\"true\" initializer=\"script:System.getProperty(&quot;iiq.forceRefreshAfterScheduledRoleChange&quot;)\" name=\"doRefresh\">\n    <Description>Set to true to cause a cube refresh after the assignment</Description>\n  </Variable>\n  <Variable input=\"true\" name=\"eventType\">\n    <Description>The type of assignment.  This will be one of the constants defined in RoleEventGenerator.</Description>\n  </Variable>\n  <Variable input=\"true\" name=\"role\">\n    <Description>The database id of the role to assign, if this is a role event</Description>\n  </Variable>\n  <Variable input=\"true\" name=\"roleName\">\n    <Description>The name of the role to assign, if this is a role event</Description>\n  </Variable>\n  <Variable input=\"true\" name=\"assignmentId\">\n    <Description>The unique id of the RoleAssignment, if this is a role event</Description>\n  </Variable>\n  <Variable input=\"true\" name=\"application\">\n    <Description>The database id of an application, if this is an entitlement event</Description>\n  </Variable>\n  <Variable input=\"true\" name=\"applicationName\">\n    <Description>The name of an application, if this is an entitlement event</Description>\n  </Variable>\n  <Variable input=\"true\" name=\"instance\">\n    <Description>The name of an application instance, if this is an entitlement event</Description>\n  </Variable>\n  <Variable input=\"true\" name=\"nativeIdentity\">\n    <Description>The specific id of the target account in the application, if this is an entitlement event</Description>\n  </Variable>\n  <Variable input=\"true\" name=\"name\">\n    <Description>The name of an attribute in the account schema, if this is an entitlement event</Description>\n  </Variable>\n  <Variable input=\"true\" name=\"value\">\n    <Description>The value of the account attribute, if this is an entitlement event</Description>\n  </Variable>\n  <Variable initializer=\"false\" input=\"true\" name=\"enableRetryRequest\">\n    <Description>\n      When set to true it will disable the workflow retry loop and let the\n      Provision step launch requests to handle the retries.  Enabling\n      this flag will enable some older functionality.\n    </Description>\n  </Variable>\n  <Variable initializer=\"true\" input=\"true\" name=\"enableManualAccountSelection\">\n    <Description>When set to &amp;#39;true&amp;#39; the system will send out Account Selection Notification emails \n    for users with more than one account on any one application and the system \n    can&amp;#39;t determine the provisioning account.\n    This may be passed in from the refresh task arguments.</Description>\n  </Variable>\n  <Variable name=\"project\">\n    <Description>ProvisioningProject compiled from the Request</Description>\n  </Variable>\n  <Variable editable=\"true\" initializer=\"false\" input=\"true\" name=\"doManualActions\">\n    <Description>When set to &amp;#39;true&amp;#39; the unmanged plan from the provisioning project\n      will be converted into one or more manual action work items to request\n      the changes since they can&amp;#39;t be done automatically.\n      This may be passed in from the refresh task arguments.</Description>\n  </Variable>\n  <Variable initializer=\"false\" name=\"identityHasOutstandingForms\"/>\n</List>\n',NULL,'<List>\n  <Step icon=\"Start\" name=\"start\" posX=\"28\" posY=\"10\">\n    <Transition to=\"Compile Assignment Project\"/>\n  </Step>\n  <Step action=\"call:compileScheduledAssignmentProject\" icon=\"Task\" name=\"Compile Assignment Project\" posX=\"161\" posY=\"10\" resultVariable=\"project\">\n    <Arg name=\"identity\" value=\"ref:identity\"/>\n    <Arg name=\"application\" value=\"ref:application\"/>\n    <Arg name=\"nativeIdentity\" value=\"ref:nativeIdentity\"/>\n    <Arg name=\"name\" value=\"ref:name\"/>\n    <Arg name=\"value\" value=\"ref:value\"/>\n    <Arg name=\"role\" value=\"ref:role\"/>\n    <Arg name=\"assigner\" value=\"ref:assigner\"/>\n    <Arg name=\"eventType\" value=\"ref:eventType\"/>\n    <Arg name=\"instance\" value=\"ref:instance\"/>\n    <Arg name=\"assignmentId\" value=\"ref:assignmentId\"/>\n    <Arg name=\"optimisticProvisioning\" value=\"ref:optimisticProvisioning\"/>\n    <Arg name=\"disableRetryRequest\" value=\"!ref:enableRetryRequest\"/>\n    <Arg name=\"enableManualAccountSelection\" value=\"ref:enableManualAccountSelection\"/>\n    <Transition to=\"Inspect Project\"/>\n  </Step>\n  <Step name=\"Inspect Project\" posX=\"336\" posY=\"10\">\n    <Script>\n      <Source>\n        // hooks for project customization before execution\n      </Source>\n    </Script>\n    <Transition to=\"Check For Outstanding Forms\" when=\"!ref:identityHasOutstandingForms\"/>\n    <Transition to=\"Do Provisioning Forms\"/>\n  </Step>\n  <Step action=\"call:outstandingProvisioningFormsForIdentity\" name=\"Check For Outstanding Forms\" resultVariable=\"identityHasOutstandingForms\">\n    <Arg name=\"identity\" value=\"ref:identity\"/>\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Transition to=\"Recompile\" when=\"ref:identityHasOutstandingForms\"/>\n    <Transition to=\"Do Provisioning Forms\"/>\n  </Step>\n  <Step action=\"call:compileScheduledAssignmentProject\" icon=\"Task\" name=\"Recompile\" resultVariable=\"project\" wait=\"script:new Integer(5);\">\n    <Arg name=\"identity\" value=\"ref:identity\"/>\n    <Arg name=\"application\" value=\"ref:application\"/>\n    <Arg name=\"nativeIdentity\" value=\"ref:nativeIdentity\"/>\n    <Arg name=\"name\" value=\"ref:name\"/>\n    <Arg name=\"value\" value=\"ref:value\"/>\n    <Arg name=\"role\" value=\"ref:role\"/>\n    <Arg name=\"assigner\" value=\"ref:assigner\"/>\n    <Arg name=\"eventType\" value=\"ref:eventType\"/>\n    <Arg name=\"instance\" value=\"ref:instance\"/>\n    <Arg name=\"assignmentId\" value=\"ref:assignmentId\"/>\n    <Arg name=\"optimisticProvisioning\" value=\"ref:optimisticProvisioning\"/>\n    <Arg name=\"disableRetryRequest\" value=\"!ref:enableRetryRequest\"/>\n    <Arg name=\"enableManualAccountSelection\" value=\"ref:enableManualAccountSelection\"/>\n    <ConditionScript>\n      <Source>identityHasOutstandingForms</Source>\n    </ConditionScript>\n    <Transition to=\"Inspect Project\"/>\n  </Step>\n  <Step name=\"Do Provisioning Forms\" posX=\"486\" posY=\"10\">\n    <Arg name=\"preferredOwner\"/>\n    <Arg name=\"workItemComments\"/>\n    <Arg name=\"requiredOwner\"/>\n    <Arg name=\"fallbackOwner\" value=\"spadmin\"/>\n    <Arg name=\"accountSelectionOwner\" value=\"applicationOwner\"/>\n    <Arg name=\"formOwnerError\"/>\n    <Arg name=\"identityDisplayName\"/>\n    <Arg name=\"formTemplate\" value=\"Identity Refresh\"/>\n    <Arg name=\"disableManualAccountSelection\" value=\"script:!isTrue(enableManualAccountSelection)\"/>\n    <Arg name=\"calculatedAccountSelectionOwner\"/>\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Arg name=\"workItemForm\"/>\n    <Arg name=\"priority\"/>\n    <Arg name=\"identityName\" value=\"ref:identityName\"/>\n    <Arg name=\"accountSelectionForm\"/>\n    <ConditionScript>\n      <Source>project != null &amp;&amp; (project.hasQuestions() || (isTrue(enableManualAccountSelection) &amp;&amp; (project.hasUnansweredAccountSelections() ||  project.hasUnansweredProvisioningTargets())))</Source>\n    </ConditionScript>\n    <Description>\n      Call the standard subprocess for assembling, presenting, and assimilating\n      provisioning forms.\n    </Description>\n    <Return name=\"project\" to=\"project\"/>\n    <WorkflowRef>\n      <Reference class=\"sailpoint.object.Workflow\" id=\"4028ab1063f427af0163f429029a017e\" name=\"Do Provisioning Forms\"/>\n    </WorkflowRef>\n    <Transition to=\"Process Project Pre-Actions\"/>\n  </Step>\n  <Step action=\"call:processProject\" name=\"Process Project Pre-Actions\">\n    <Arg name=\"identity\" value=\"ref:identity\"/>\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Transition to=\"Provision\"/>\n  </Step>\n  <Step icon=\"Task\" name=\"Provision\" posX=\"633\" posY=\"9\">\n    <Arg name=\"disableIdentityRequests\" value=\"true\"/>\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Arg name=\"maxRetries\"/>\n    <Arg name=\"provisioningRetryThreshold\"/>\n    <Arg name=\"trace\" value=\"ref:trace\"/>\n    <Arg name=\"identityRequestId\"/>\n    <Arg name=\"retryProject\"/>\n    <Arg name=\"retries\"/>\n    <Arg name=\"enableRetryRequest\"/>\n    <Arg name=\"foregroundProvisioning\" value=\"true\"/>\n    <Description>\n      Execute the scheduled assignment project.\n      We call the standard subprocess that handles retries.\n      Note that the disableIdentityRequests option is passed\n      to prevent logging a warning since this workflow does\n      not maintain IdentityRequest objects.\n    </Description>\n    <Return name=\"project\" to=\"project\"/>\n    <WorkflowRef>\n      <Reference class=\"sailpoint.object.Workflow\" id=\"4028ab1063f427af0163f42903ed0181\" name=\"Provision with retries\"/>\n    </WorkflowRef>\n    <Transition to=\"Refresh Identity\"/>\n  </Step>\n  <Step action=\"call:refreshIdentity\" condition=\"script:isTrue(doRefresh)\" icon=\"Task\" name=\"Refresh Identity\" posX=\"786\" posY=\"10\">\n    <Arg name=\"identity\" value=\"ref:identity\"/>\n    <Arg name=\"doManualActions\" value=\"false\"/>\n    <Arg name=\"correlateEntitlements\" value=\"true\"/>\n    <Arg name=\"provision\" value=\"true\"/>\n    <Description>\nAdd arguments as necessary to enable refresh features.  Provisioning is usually done\nwith an option to the Activate Assignment step.  Here you might want to check\npolicies or refresh the scorecard.  Correlating entitlements might pick up new\ndetected roles if the provisioning was done synchronously.\n    </Description>\n    <Transition to=\"Manual Actions\"/>\n  </Step>\n  <Step condition=\"script:project.getUnmanagedPlan() != null\" name=\"Manual Actions\" posX=\"944\" posY=\"10\">\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Arg name=\"doAudit\"/>\n    <Arg name=\"priority\"/>\n    <Arg name=\"identityDisplayName\"/>\n    <Arg name=\"identityName\" value=\"ref:identityName\"/>\n    <Arg name=\"fallbackApprover\"/>\n    <Description>\n      Present work items for the parts of the project that could not be sent\n      to an integrated IDM system.\n    </Description>\n    <WorkflowRef>\n      <Reference class=\"sailpoint.object.Workflow\" id=\"4028ab1063f427af0163f42903300180\" name=\"Do Manual Actions\"/>\n    </WorkflowRef>\n    <Transition to=\"end\"/>\n  </Step>\n  <Step icon=\"Stop\" name=\"end\" posX=\"1086\" posY=\"10\"/>\n</List>\n',' ',' ','Identity'),('4028ab1063f427af0163f42908d2018b',1528809720018,1739425381127,NULL,NULL,NULL,'Scheduled Role Activation','\nWorkflow called when a role is ready to be enabled or disabled.\n  ','ScheduledRoleActivation',NULL,_binary '\0',_binary '\0',_binary '\0',1,_binary '\0',NULL,NULL,'<List>\n  <Variable input=\"true\" name=\"eventType\">\n    <Description>The type of the role activation event.  This will be one of the constants defined in RoleEventGenerator: roleActivation or roleDeactivation</Description>\n  </Variable>\n  <Variable input=\"true\" name=\"role\">\n    <Description>The database id of the role we\'re changing.</Description>\n  </Variable>\n  <Variable input=\"true\" name=\"roleName\">\n    <Description>The name of the role we\'re changing.</Description>\n  </Variable>\n  <Variable editable=\"true\" initializer=\"script:System.getProperty(&quot;iiq.forceRefreshAfterScheduledRoleChange&quot;)\" name=\"doRefresh\">\n    <Description>Set to true to cause a full identity refresh after activation.</Description>\n  </Variable>\n  <Variable name=\"activate\">\n    <Script>\n      <Source>\n        // we sholld only be here for activation or deactivation events, \n        // but err on the side of activation in case the type is wrong\n        import sailpoint.api.RoleEventGenerator;\n        return !RoleEventGenerator.EVENT_TYPE_ROLE_DEACTIVATION.equals(eventType);\n      </Source>\n    </Script>\n  </Variable>\n  <Variable editable=\"true\" initializer=\"false\" name=\"noRolePropagation\" type=\"boolean\">\n    <Description>Set to true to disable role change propagation.</Description>\n  </Variable>\n</List>\n',NULL,'<List>\n  <Step icon=\"Start\" name=\"start\" posX=\"30\" posY=\"10\">\n    <Transition to=\"Activate Role\"/>\n  </Step>\n  <Step action=\"call:enableRole\" condition=\"ref:activate\" icon=\"Task\" name=\"Activate Role\" posX=\"140\" posY=\"10\">\n    <Arg name=\"role\" value=\"ref:role\"/>\n    <Transition to=\"Deactivate Role\"/>\n  </Step>\n  <Step action=\"call:disableRole\" condition=\"!ref:activate\" icon=\"Task\" name=\"Deactivate Role\" posX=\"260\" posY=\"10\">\n    <Arg name=\"role\" value=\"ref:role\"/>\n    <Transition to=\"Audit Success\"/>\n  </Step>\n  <Step action=\"audit\" icon=\"Audit\" name=\"Audit Success\" posX=\"390\" posY=\"10\">\n    <Arg name=\"source\" value=\"ref:launcher\"/>\n    <Arg name=\"action\" value=\"script:(activate) ? &quot;activate&quot; : &quot;deactivate&quot;\"/>\n    <Arg name=\"target\" value=\"ref:roleName\"/>\n    <Arg name=\"string1\" value=\"script:((activate) ? &quot;Activated &quot; : &quot;Deactivated &quot;) + roleName\"/>\n    <Arg name=\"string2\" value=\"Success\"/>\n    <Transition to=\"Refresh Identities\"/>\n  </Step>\n  <Step action=\"call:refreshIdentities\" condition=\"ref:doRefresh\" icon=\"Task\" name=\"Refresh Identities\" posX=\"525\" posY=\"10\">\n    <Arg name=\"identitiesWithRoles\">\n      <Script>\n        <Source>\n          // if we\'re deactivating, only refresh roles that have us\n          import sailpoint.api.RoleEventGenerator;\n          Object retval = null;\n          if (RoleEventGenerator.EVENT_TYPE_ROLE_DEACTIVATION.equals(eventType)) \n             retval = role;\n          return retval;\n      </Source>\n      </Script>\n    </Arg>\n    <Arg name=\"correlateEntitlements\" value=\"true\"/>\n    <Arg name=\"provision\" value=\"true\"/>\n    <Arg name=\"doManualActions\" value=\"false\"/>\n    <Transition to=\"end\"/>\n  </Step>\n  <Step icon=\"Stop\" name=\"end\" posX=\"650\" posY=\"10\"/>\n</List>\n',' ',' ','Role,Identity'),('4028ab1063f427af0163f429095a018c',1528809720154,1739425375197,NULL,NULL,NULL,'Entitlement Update',NULL,'ManagedAttribute',NULL,_binary '\0',_binary '\0',_binary '\0',0,_binary '\0',NULL,NULL,'<List>\n  <Variable editable=\"true\" name=\"optimisticProvisioning\">\n    <Description>\n      Set to true to enable optimistic provisioning.  This will cause\n      changes to the entitlements compiled from role assignments to be \n      applied immediately to the identity cube rather than waiting\n      for the next refresh/reaggregation after the provisioning system\n      completes the request.\n    </Description>\n  </Variable>\n  <Variable editable=\"true\" initializer=\"true\" name=\"foregroundProvisioning\">\n    <Description>\n      Normally provisioning is done in a step that uses the \"backgroud\"\n      option to force the workfow to be suspend and be resumed in a\n      background task thread.  This prevents the browser session from\n      hanging since provision can sometimes take a long time.  For demos\n      and testing it can be better to do this in the foreground so that\n      provisioning will have been performed when control is returned to the\n      user.  This prevents having to run the Perform Maintanance task to \n      see the resutls of the request.  For group requests this is much less\n      of a problem than it is for account provisioning.\n    </Description>\n  </Variable>\n  <Variable editable=\"true\" initializer=\"false\" name=\"doManualActions\">\n    <Description>\n      When set to \'true\' the unmanged plan from the provisioning project\n      will be converted into one or more manual action work items to request\n      the changes since they can\'t be done automatically.\n    </Description>\n  </Variable>\n  <Variable editable=\"true\" initializer=\"spadmin\" name=\"fallbackApprover\">\n    <Description>\n      The name of an Identity that will be assigned ownership of any\n      manual action work items if the application owner is not set.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"plan\" required=\"true\">\n    <Description>\n      Master provisioning plan containing the changes to process.\n    </Description>\n  </Variable>\n  <Variable initializer=\"script:System.getProperty(&quot;iiq.forceApprover&quot;)\" input=\"true\" name=\"approver\">\n    <Description>\n      Name of Identity to approve entitlement changes.\n      This is not set when launched from the UI, but you may want\n      to hard code an initializer for testing.\n    </Description>\n  </Variable>\n  <Variable name=\"sessionOwner\">\n    <Description>\n      This is a system variable that we do not need to declare, but it\'s \n      good for documentation.  This will be set when the workflow is launched\n      to the name of the Identity that is considered to be the owner\n      of the interactive UI session.  This is passed to call:buildProvisioningForm\n      so that we present forms to the active user first before suspending and\n      opening work items for other users.\n    </Description>\n  </Variable>\n  <Variable name=\"summaryName\">\n    <Description>\n      Single string representation of ManagedAttribute identity.\n      This must be at least a combination of the application name\n      and the managed attribute value (group name).\n    </Description>\n  </Variable>\n  <Variable name=\"project\">\n    <Description>\n      Provisioning project containing assigned roles and side effects,\n      compiled from the input plan.\n    </Description>\n  </Variable>\n  <Variable name=\"changes\">\n    <Description>\n      A ChangeSummary object containing a JSF friendly summary of the\n      changes being made.  \n    </Description>\n  </Variable>\n</List>\n',NULL,'<List>\n  <Step icon=\"Start\" name=\"start\" posX=\"17\" posY=\"19\">\n    <Transition to=\"Examine Plan\"/>\n  </Step>\n  <Step action=\"getSummaryName\" name=\"Examine Plan\" posX=\"112\" posY=\"19\" resultVariable=\"summaryName\">\n    <Description>\n      Derive a single string we can use as the name of the entitlement\n      in approvals and logging.\n    </Description>\n    <Transition to=\"Compile Project\"/>\n  </Step>\n  <Step action=\"compileGroupProject\" name=\"Compile Project\" posX=\"219\" posY=\"19\" resultVariable=\"project\">\n    <Arg name=\"plan\" value=\"ref:plan\"/>\n    <Arg name=\"requester\" value=\"ref:launcher\"/>\n    <Arg name=\"source\" value=\"GroupManagement\"/>\n    <Arg name=\"optimisticProvisioning\" value=\"ref:optimisticProvisioning\"/>\n    <Description>\n      Compile the provisioning plan into a provisioning project.\n      Unlike the project compilation step for identities, we do not\n      expect to be dealing with provisioning policies and forms.\n    </Description>\n    <Transition to=\"Start Approval Process\" when=\"ref:approver\"/>\n    <Transition to=\"Start Provisioning Process\"/>\n  </Step>\n  <Step action=\"setLaunchMessage\" icon=\"Message\" name=\"Start Approval Process\" posX=\"285\" posY=\"112\">\n    <Arg name=\"message\" value=\"workflow_identity_approval\"/>\n    <Arg name=\"arg1\" value=\"ref:summaryName\"/>\n    <Arg name=\"arg2\" value=\"ref:approver\"/>\n    <Description> \n      Add a message to the worflow launch result indicating that an approval is in progress.\n      This also serves an example of building localized messages from the catalog.\n    </Description>\n    <Transition to=\"Build Approval Summary\"/>\n  </Step>\n  <Step action=\"buildGroupChangeSummary\" name=\"Build Approval Summary\" posX=\"432\" posY=\"112\" resultVariable=\"changes\">\n    <Arg name=\"plan\" value=\"ref:plan\"/>\n    <Transition to=\"Approval\"/>\n  </Step>\n  <Step icon=\"Approval\" name=\"Approval\" posX=\"554\" posY=\"112\">\n    <Approval owner=\"ref:approver\" renderer=\"entitlement.xhtml\" send=\"summaryName,changes\">\n      <Arg name=\"workItemDescription\">\n        <Script>\n          <Source>\n            String action = \"modification\";\n            if (changes.delete)\n                action = \"deletion\";\n            else if (changes.create)\n                action = \"creation\";\n            return \"Approve \" + action + \" of entitlement \" + summaryName;\n          </Source>\n        </Script>\n      </Arg>\n    </Approval>\n    <Transition to=\"end\" when=\"!ref:approved\"/>\n    <Transition to=\"Start Provisioning Process\"/>\n  </Step>\n  <Step action=\"setLaunchMessage\" icon=\"Message\" name=\"Start Provisioning Process\" posX=\"612\" posY=\"15\">\n    <Arg name=\"message\">\n      <Script>\n        <Source>\n          // pick a message with more detail if we\'re provisioning\n          import sailpoint.object.ProvisioningPlan;\n          String msg = \"workflow_identity_saved\";\n          boolean otherPlans = false;\n          List plans = project.getPlans();\n          if (plans != null) {\n              for (int i = 0 ; i &lt; plans.size() ; i++) {\n                  ProvisioningPlan plan = (ProvisioningPlan)plans.get(i);\n                  if (!ProvisioningPlan.APP_IIQ.equals(plan.getTargetIntegration())) {\n                     otherPlans = true;\n                     break;\n                  }\n              }\n          }\n\n          if (project.getUnmanagedPlan() != null &amp;&amp; isTrue(doManualActions)) {\n              if (otherPlans)\n                  msg = \"workflow_identity_provisioning_manual\";\n              else\n                  msg = \"workflow_identity_manual\";\n          }\n          else if (otherPlans) {\n              // jsl - if there are errors it looks odd to show\n              // a \"succesfully requesting provisioning\" message\n              // followed by the error message, just leave this out,\n              // we can say something about manual provisioning but if\n              // simply committed the change we dont\' need anything more\n              // msg = \"workflow_identity_provisioning\";\n          }\n          return msg;\n        </Source>\n      </Script>\n    </Arg>\n    <Arg name=\"arg1\" value=\"ref:summaryName\"/>\n    <Description>\n      Leave a launch message that can be displayed in the browser before\n      we start provisioning which may be asynchronous.  Note that this\n      uses the same message catalog keys as the identity update workflows\n      which is okay because they don\'t mention the type of object being\n      processed.  If that changes we\'ll need our own set of keys.\n    </Description>\n    <Transition to=\"Provision\"/>\n  </Step>\n  <Step action=\"call:provisionGroupProject\" icon=\"Provision\" name=\"Provision\" posX=\"732\" posY=\"15\">\n    <Arg name=\"background\" value=\"!ref:foregroundProvisioning\"/>\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Description>\n      Provision what remains in the project.  Normally we won\'t\n      be here with unanswered provisioning questions.\n    </Description>\n    <Transition to=\"Check Provisioning Errors\"/>\n  </Step>\n  <Step name=\"Check Provisioning Errors\" posX=\"851\" posY=\"15\">\n    <Description>\n      Placeholder for custom logging or other actions.  \n      If there were group provisioning errors, provisionGroupProject\n      will have left them in the WorkflowCase.messages list.\n    </Description>\n    <Script>\n      <Source>\n        import sailpoint.tools.Message;\n        //System.out.println(\"Checking provisioning errors...\");\n        List errors = wfcontext.getWorkflowCase().getErrors();\n        if (errors != null) {\n            for (Message error : errors) {\n                //System.out.println(\"*** \" + error.toString());\n            }\n        }\n      </Source>\n    </Script>\n    <Transition to=\"end\"/>\n  </Step>\n  <Step icon=\"Stop\" name=\"end\" posX=\"977\" posY=\"14\"/>\n</List>\n',' ',' ','Group'),('4028ab1063f427af0163f4290997018d',1528809720215,1739425380510,NULL,NULL,NULL,'Password Intercept',NULL,'PasswordIntercept',NULL,_binary '\0',_binary '\0',_binary '\0',0,_binary '\0',NULL,NULL,'<List>\n  <Variable editable=\"true\" initializer=\"true\" name=\"syncAll\">\n    <Description>\n      Set to true to enable full synchronization over all\n      accounts.\n    </Description>\n  </Variable>\n  <Variable editable=\"true\" name=\"targetApplications\">\n    <Description>\n      Set to a csv or List(String) of Application names that will be synchronized.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"identityName\" required=\"true\">\n    <Description>\n      Name of the Identity whose password has changed.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"applicationName\" required=\"true\">\n    <Description>\n      Name of the Application where the password change was detected.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"nativeIdentity\" required=\"true\">\n    <Description>\n      Name of the account on the Application where the password change was detected.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"password\" required=\"true\">\n    <Description>\n      The new password, encrypted.\n    </Description>\n  </Variable>\n  <Variable name=\"project\">\n    <Description>\n      A ProvisionignProject compiled from the target list.\n    </Description>\n  </Variable>\n</List>\n',NULL,'<List>\n  <Step icon=\"Start\" name=\"start\" posX=\"28\" posY=\"15\">\n    <Transition to=\"Select Targets\"/>\n  </Step>\n  <Step name=\"Select Targets\" posX=\"127\" posY=\"15\">\n    <Script>\n      <Source>\n        // Placeholder for custom application selection.\n        // The result must be left on the targetApplications list\n        // as either a csv or List(String) of Application names.\n      </Source>\n    </Script>\n    <Transition to=\"Compile Project\"/>\n  </Step>\n  <Step action=\"call:compilePasswordInterceptProject\" name=\"Compile Project\" posX=\"239\" posY=\"15\" resultVariable=\"project\">\n    <Arg name=\"password\" value=\"ref:password\"/>\n    <Arg name=\"identityName\" value=\"ref:identityName\"/>\n    <Arg name=\"sourceApplication\" value=\"ref:applicationName\"/>\n    <Arg name=\"targetApplications\" value=\"ref:targetApplications\"/>\n    <Arg name=\"syncAll\" value=\"ref:syncAll\"/>\n    <Description>\n      Perform the default password synchronization using the\n      supplied application list. \n    </Description>\n    <Transition to=\"Empty Project\" when=\"project == null\"/>\n    <Transition to=\"Examine Project\"/>\n  </Step>\n  <Step name=\"Examine Project\" posX=\"305\" posY=\"150\">\n    <Description>\n      This is a placeholder for custom code that may want to alter\n      the project before execution.\n    </Description>\n    <Script>\n      <Source>\n        //System.out.println(\"Password intercept project:\");\n        //System.out.println(project.toXml());\n      </Source>\n    </Script>\n    <Transition to=\"Provision\"/>\n  </Step>\n  <Step icon=\"Task\" name=\"Provision\" posX=\"418\" posY=\"150\">\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Arg name=\"foregroundProvisioning\" value=\"true\"/>\n    <Arg name=\"disableIdentityRequests\" value=\"true\"/>\n    <Arg name=\"trace\" value=\"ref:trace\"/>\n    <Description>\n      Execute the password synchronization project.\n      We call the standard subprocess that handles retries.\n      Note that the disableIdentityRequests option is passed\n      to prevent logging a warning since this workflow does\n      not maintain IdentityRequest objects.\n    </Description>\n    <Return name=\"project\" to=\"project\"/>\n    <WorkflowRef>\n      <Reference class=\"sailpoint.object.Workflow\" id=\"4028ab1063f427af0163f42903ed0181\" name=\"Provision with retries\"/>\n    </WorkflowRef>\n    <Transition to=\"Audit\"/>\n  </Step>\n  <Step name=\"Audit\" posX=\"535\" posY=\"150\">\n    <Description>\n      Placeholder, what kind of auditing should we do?\n      We\'ve got low level ProvisioningResults in the project.\n    </Description>\n    <Transition to=\"end\"/>\n  </Step>\n  <Step name=\"Empty Project\" posX=\"418\" posY=\"11\">\n    <Description>\n      Here if there wasn\'t enough to build a project.  If there\n      were missing inputs there should be errors in the log.  We could\n      just be here because there were no sync targets.\n    </Description>\n    <Script>\n      <Source>\n        //System.out.println(\"Empty synchronization project\");\n      </Source>\n    </Script>\n    <Transition to=\"end\"/>\n  </Step>\n  <Step icon=\"Stop\" name=\"end\" posX=\"535\" posY=\"11\"/>\n</List>\n',' ',' ','Identity'),('4028ab1063f427af0163f42909c9018e',1528809720265,1739425372791,NULL,NULL,NULL,'Alert - Disable Account','Disable accounts when alert is triggered.\n\n    If the alert\'s targetType is Identity, this will set the Identity inactive.\n\n    If the alert\'s targetType is Link, this will disable the account associated to the link.','Alert',NULL,_binary '\0',_binary '',_binary '\0',0,_binary '\0',NULL,NULL,'<List>\n  <Variable input=\"true\" name=\"alertDefinition\" required=\"true\">\n    <Description>The alertDefinition object that matched the alert.</Description>\n  </Variable>\n  <Variable input=\"true\" name=\"alertId\" required=\"true\">\n    <Description>The id of the Alert that triggered the workflow.</Description>\n  </Variable>\n  <Variable name=\"plan\" output=\"true\">\n    <Description>ProvisioningPlan generated for the Alert.</Description>\n  </Variable>\n  <Variable name=\"project\" output=\"true\">\n    <Description>The compiled project from the plan</Description>\n  </Variable>\n  <Variable initializer=\"Disable\" name=\"op\">\n    <Description>Operation to take.</Description>\n  </Variable>\n</List>\n',NULL,'<List>\n  <Step icon=\"Start\" name=\"Start\" posX=\"28\" posY=\"10\">\n    <Transition to=\"Build Provisioning Plan\"/>\n  </Step>\n  <Step action=\"buildAlertPlan\" icon=\"Task\" name=\"Build Provisioning Plan\" posX=\"98\" posY=\"10\" resultVariable=\"plan\">\n    <Arg name=\"op\" value=\"ref:op\"/>\n    <Arg name=\"alertId\" value=\"ref:alertId\"/>\n    <Description>Build the Provisioning plan to disable the correct account</Description>\n    <Transition to=\"Compile Plan\"/>\n  </Step>\n  <Step action=\"compileProvisioningProject\" icon=\"Task\" name=\"Compile Plan\" posX=\"312\" posY=\"10\" resultVariable=\"project\">\n    <Arg name=\"plan\" value=\"ref:plan\"/>\n    <Transition to=\"Provision\"/>\n  </Step>\n  <Step action=\"provisionProject\" icon=\"Provision\" name=\"Provision\" posX=\"438\" posY=\"10\">\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Transition to=\"Stop\"/>\n  </Step>\n  <Step icon=\"Stop\" name=\"Stop\" posX=\"540\" posY=\"10\"/>\n</List>\n',' ',' ',NULL),('4028ab1063f427af0163f4290b6e0191',1528809720686,1739425376514,NULL,NULL,NULL,'Identity Correlation',NULL,'IdentityCorrelation',NULL,_binary '\0',_binary '\0',_binary '\0',0,_binary '\0','sailpoint.api.StandardWorkflowHandler',NULL,'<List>\n  <Variable input=\"true\" name=\"identityName\">\n    <Description>The name of the identity we\'re supposed to update.</Description>\n  </Variable>\n  <Variable initializer=\"script:(identityDisplayName != void) ? identityDisplayName : resolveDisplayName(identityName)\" input=\"true\" name=\"identityDisplayName\">\n    <Description>\n      The displayName of the identity being updated.\n      Query for this using a projection query and fall back to the name.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"plan\">\n    <Description>The provisioning plan ready to execute.</Description>\n  </Variable>\n  <Variable input=\"true\" name=\"flow\">\n    <Description>\n      The name of the LCM flow that launched this workflow.\n\n      This is one of these two values:\n\n      IdentityCreateRequest\n      IdentityEditRequest\n    </Description>\n  </Variable>\n  <Variable editable=\"true\" name=\"optimisticProvisioning\">\n    <Description>\n      Set to true to enable optimistic provisioning.  This will cause\n      changes to the entitlements compiled from role assignments to be \n      applied immediately to the identity cube rather than waiting\n      for the next refresh/reaggregation after the provisioning system\n      completes the request.\n    </Description>\n  </Variable>\n  <Variable editable=\"true\" initializer=\"true\" name=\"foregroundProvisioning\">\n    <Description>\n      Normally provisioning is done in a step that uses the \"backgroud\"\n      option to force the workfow to be suspend and be resumed in a\n      background task thread.  This prevents the browser session from\n      hanging since provision can sometimes take a long time.  For demos\n      and testing it can be better to do this in the foreground so that\n      provisioning will have been performed when control is returned to the\n      user.  This prevents having to run the Perform Maintanance task to \n      see the resutls of the request.\n    </Description>\n  </Variable>\n  <Variable initializer=\"user,requester\" input=\"true\" name=\"notificationScheme\">\n    <Description>\n     A string that specifies who should be notified when the request has been complete.\n     The value can be null or a csv of one or more of the following options. \n\n     none or null\n       disable notifications\n\n     user \n       Identity that is being update will be notified.\n\n     manager\n       The manager of the Identity that is being updated will be notified.\n\n     requester\n       The person that has requested the update will be notified.\n    </Description>\n  </Variable>\n  <Variable initializer=\"serial\" input=\"true\" name=\"approvalMode\">\n    <Description>\n     A string that specifies how we should handle the approvals.  \n\n     By default this is serial since most of these request with\n     the exception of manager transfers will have only one approver.\n\n     parallel\n       Approvals are processed concurrently and there must be consensus,\n       we wait for all approvers to approve.  The first approver that\n       rejects terminates the entire approval.\n \n     parallelPoll \n       Approvals are processed concurrently but consensus is not required.\n       All approvals will be processed, we don\'t stop if there are any\n       rejections.  \n\n     serial\n       Approvals are processed one at a time and there must be consensus.\n       The first approver that rejects terminates the entire approval.\n\n     serialPoll\n       Approvals are processed in order but consensus is not required.\n       All approvals will be processed, we don\'t stop if there are any\n       rejections.  In effect we are \"taking a poll\" of the approvers.\n\n     any\n      Approvals are processed concurrently, the first approver to \n      respond makes the decision for the group.\n    </Description>\n  </Variable>\n  <Variable initializer=\"manager, newManager\" input=\"true\" name=\"approvalScheme\">\n    <Description>\n      A String that specifies how approvals should be generated for \n      this workflow there are five built-in modes\n\n      none - disabled approvals\n\n      manager - The user\'s current manager will get approvals\n\n      newManager - The newly assigned manager will get approvals when \n                   manager transfers occur. Otherwise the user\'s manager \n                   current manager will be the approver.\n    </Description>\n  </Variable>\n  <Variable initializer=\"spadmin\" input=\"true\" name=\"fallbackApprover\">\n    <Description>\n      A String that specifies the name of the Identity that will \n      be assigned any approvals where the owner of the approver \n      can\'t be resolved. Example if the scheme is \"owner\" and the \n      application doesn\'t specify and owner.\n    </Description>\n  </Variable>\n  <Variable initializer=\"continue\" input=\"true\" name=\"policyScheme\">\n    <Description>\n      A String that specifies how policy checks effect the overall\n      process.\n\n      none - disabled policy checking\n\n      fail -  fail and exit the workflow if any policy violations are found\n\n      continue -  continue if policy violations are found\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"policiesToCheck\">\n    <Description>\n      A List of policies that should be checked. If this list is\n      empty all violations will be checked. Used in combination\n      with policyScheme.\n    </Description>\n  </Variable>\n  <Variable name=\"approvalSet\">\n    <Description>\n       This attributes is set during the \"Build Approval Set\" step,\n       which builds this list by going through the ProvisioningPlan\n       to build the line items that need to be approved,\n\n       This variable includes all ApprovalItems that are part of \n       the request process and is updated during the AfterScript\n       of the approval process by assimilating the decisions \n       and comments from the Approvals copy of the ApprovalItem.\n    </Description>\n  </Variable>\n  <Variable initializer=\"false\" name=\"trace\">\n    <Description>\n      Used for debugging this workflow and when set to true trace\n      will be sent to stdout.\n    </Description>\n  </Variable>\n  <Variable name=\"project\">\n    <Description>\n      ProvisioningProject which is just a compiled version of the ProvisioningPlan.\n    </Description>\n  </Variable>\n  <Variable name=\"policyViolations\">\n    <Description> \n       List of policy violations that were found during our initial policy scan.\n       This list is passed into each work item so the approvers can see \n       pending violations.\n    </Description>\n  </Variable>\n  <Variable name=\"approvalForm\">\n    <Description>\n       The form that is generated based on the changes that were made.  This\n       form will be sent into the workitem and allow editing of the \n       requested values during the approval process. This is generated\n       in \"Build Approval Form\" based on the passed-in plan.\n    </Description>\n  </Variable>\n  <Variable initializer=\"IdentityCorrelation\" name=\"interface\">\n    <Description>\n      This variable shows up in Audit logs.\n    </Description>\n  </Variable>\n</List>\n',NULL,'<List>\n  <Step icon=\"Start\" name=\"start\" posX=\"2\" posY=\"19\">\n    <Transition to=\"Build Approval Set\"/>\n  </Step>\n  <Step action=\"call:buildApprovalSet\" icon=\"Task\" name=\"Build Approval Set\" posX=\"60\" posY=\"92\" resultVariable=\"approvalSet\">\n    <Description>\n       The rule will go through the plan and build an approvalItem for each AccountRequest, \n       typically there is just one for the IIQ application requests.\n\n       The rule will also annotate the plan with the previousValues so that they \n       can be assimilated onto the Form that is build, which is used during the approval \n       process for edits.\n    </Description>\n    <Transition to=\"Audit Start\"/>\n  </Step>\n  <Step action=\"auditLCMStart\" icon=\"Audit\" name=\"Audit Start\" posX=\"60\" posY=\"185\">\n    <Arg name=\"approvalSet\" value=\"ref:approvalSet\"/>\n    <Transition to=\"Build Approval Form\"/>\n  </Step>\n  <Step action=\"call:buildPlanApprovalForm\" icon=\"Task\" name=\"Build Approval Form\" posX=\"60\" posY=\"287\" resultVariable=\"approvalForm\">\n    <Arg name=\"plan\" value=\"ref:plan\"/>\n    <Arg name=\"template\" value=\"LCM Identity Approval\"/>\n    <Transition to=\"Customize Approval Form\"/>\n  </Step>\n  <Step name=\"Customize Approval Form\" posX=\"60\" posY=\"381\" resultVariable=\"approvalForm\">\n    <Description>\n       using the form that was generaed, mMrk the password field read only so approvers \n       can\'t change it.  Also associate a Rule with the name so name changes during \n       approvals can be validate.\n    </Description>\n    <Script>\n      <Source>\n        import sailpoint.object.Field;\n        import sailpoint.object.Form;\n        import sailpoint.object.Rule;\n\n        if ( approvalForm != null ) {\n            Field passwordField = approvalForm.getField(\"IIQ:password\");\n            if ( passwordField != null ) {\n                passwordField.setReadOnly(true);\n            }\n            Field userId = approvalForm.getField(\"IIQ:name\");\n            if ( userId != null ) {\n                String ruleName = \"LCM Validate Identity Name\";\n                Rule rule = wfcontext.getSailPointContext().getObject(Rule.class, ruleName);\n                if ( rule != null ) {\n                    userId.setValidationRule(rule);\n                }\n            }\n            Field manager = approvalForm.getField(\"IIQ:manager\");\n            if ( manager != null ) {\n                // tell the FormBean to output the value as a name\n                // instead of ID which is the default\n                manager.addAttribute(Field.ATTR_VALUE_PROPERTY, \"name\");\n            }\n        }\n        return approvalForm;\n      </Source>\n    </Script>\n    <Transition to=\"Check Policies\"/>\n  </Step>\n  <Step action=\"checkPolicyViolations\" condition=\"script: !policyScheme.equals(&quot;none&quot;)\" icon=\"Task\" name=\"Check Policies\" posX=\"180\" posY=\"381\" resultVariable=\"policyViolations\">\n    <Arg name=\"identityName\" value=\"ref:identityName\"/>\n    <Arg name=\"plan\" value=\"ref:plan\"/>\n    <Arg name=\"policies\" value=\"ref:policiesToCheck\"/>\n    <Transition to=\"Exit On Policy Violation\" when=\"script:((Util.size(policyViolations) > 0 ) &amp;&amp; (policyScheme.equals(&quot;fail&quot;)))\"/>\n    <Transition to=\"Approval\"/>\n  </Step>\n  <Step condition=\"script:!approvalScheme.equals(&quot;none&quot;)\" icon=\"Approval\" name=\"Approval\" posX=\"238\" posY=\"288\">\n    <Approval mode=\"ref:approvalMode\" owner=\"rule:LCM Build Identity Approvers\" renderer=\"lcmEditableWorkItemRenderer.xhtml\" send=\"identityDisplayName,identityName,policyViolations,approvalSet\">\n      <AfterScript>\n        <Source>\n          import sailpoint.object.ApprovalSet;\n          import sailpoint.object.WorkItem;\n          import sailpoint.object.Workflow.WorkflowCase;\n          import sailpoint.object.WorkflowCase;\n          import sailpoint.object.Form;\n          import sailpoint.util.GeneralException;\n\n          if (item == null) {\n              return;\n          }\n          // Assimilate all of the approvalItem changes into our gloval\n          // approval set\n          // \n          ApprovalSet set = (ApprovalSet)item.get(\"approvalSet\");\n          if ( set != null ) {\n              // Global completion comments will apply to each of the items\n              // If there are completion comments append them\n              // to any other completion comments, but typically its \n              // one or the other\n              String completionComments = item.getCompletionComments();\n              Identity id = item.getOwner();\n              String ownerName = null;\n              if ( id != null ) {\n                  ownerName = id.getName();\n              }\n              approvalSet.assimilate(set, ownerName, completionComments, true);\n          } else {\n              throw new GeneralException(\"ApprovalSet not found in afterscript.\");\n          }\n \n          // djs: this is kind of a hack, do I have alternatives?\n          // come back to this\n          Form form = (Form)item.get(\"workItemForm\");\n          if ( form != null ) {\n              WorkflowCase c = wfcontext.getWorkflowCase();\n              if ( c != null ) {\n                  c.put(\"approvalForm\", form);\n              }\n          }\n\n          //\n          // If they are all rejected mark the Approval Rejected.\n          // This allows the Transition to execute once we\n          // get a rejection.\n          //\n          if ( approvalSet.isAllRejected() ) {\n              approval.setState(WorkItem.State.Rejected);          \n          }\n\n          auditWorkItemOwnerHistory(item);\n          auditWorkItemComments(item);\n        </Source>\n      </AfterScript>\n      <Arg name=\"workItemRequester\" value=\"$(launcher)\"/>\n      <Arg name=\"workItemDescription\" value=\"Account Changes for User: $(identityDisplayName)\"/>\n      <Arg name=\"workItemForm\" value=\"ref:approvalForm\"/>\n      <WorkItemConfig escalationStyle=\"none\">\n        <NotificationEmailTemplateRef>\n          <Reference class=\"sailpoint.object.EmailTemplate\" id=\"4028ab1063f427af0163f4290b070190\" name=\"LCM Identity Update Approval\"/>\n        </NotificationEmailTemplateRef>\n      </WorkItemConfig>\n    </Approval>\n    <Transition to=\"Start Provisioning Process\"/>\n  </Step>\n  <Step action=\"call:addMessage\" condition=\"script:!approvalSet.isAllRejected()\" icon=\"Message\" name=\"Start Provisioning Process\" posX=\"238\" posY=\"191\">\n    <Arg name=\"message\" value=\"Modifications to $(identityDisplayName) are being provisioned.\"/>\n    <Transition to=\"Assimilate Form Changes\"/>\n  </Step>\n  <Step action=\"assimilatePlanApprovalForm\" icon=\"Task\" name=\"Assimilate Form Changes\" posX=\"238\" posY=\"107\" resultVariable=\"plan\">\n    <Arg name=\"form\" value=\"ref:approvalForm\"/>\n    <Arg name=\"approvalSet\" value=\"ref:approvalSet\"/>\n    <Arg name=\"plan\" value=\"ref:plan\"/>\n    <Description>\n      This step takes the form from the workitem and applys any edits that were\n      made back into the plan.\n    </Description>\n    <Transition to=\"Process Approval Decisions\"/>\n  </Step>\n  <Step action=\"call:processPlanApprovalDecisions\" icon=\"Task\" name=\"Process Approval Decisions\" posX=\"238\" posY=\"14\" resultVariable=\"plan\">\n    <Arg name=\"approvalSet\" value=\"ref:approvalSet\"/>\n    <Arg name=\"plan\" value=\"ref:plan\"/>\n    <Description>\n    </Description>\n    <Transition to=\"Notify\" when=\"script:approvalSet.isAllRejected()\"/>\n    <Transition to=\"Compile Project\"/>\n  </Step>\n  <Step action=\"compileProvisioningProject\" icon=\"Task\" name=\"Compile Project\" posX=\"391\" posY=\"11\" resultVariable=\"project\">\n    <Arg name=\"identityName\" value=\"ref:identityName\"/>\n    <Arg name=\"plan\" value=\"ref:plan\"/>\n    <Arg name=\"requester\" value=\"ref:launcher\"/>\n    <Arg name=\"source\" value=\"LCM\"/>\n    <Arg name=\"optimisticProvisioning\" value=\"ref:optimisticProvisioning\"/>\n    <Description>\n      Compile the provisioning plan into a provisioning project.\n      If you need to pass in provisioner options like \"noFiltering\"\n      or \"noRoleDeprovisioning\" you must pass them as explicit\n      arguments to the call.\n\n      The evaluation options \"requester\" and \"source\" are commonly\n      set here.\n\n      You can also pass things into the Template and Field scripts by\n      defining Args in this step.\n    </Description>\n    <Transition to=\"Provision\"/>\n  </Step>\n  <Step action=\"call:provisionProject\" icon=\"Provision\" name=\"Provision\" posX=\"502\" posY=\"11\">\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Arg name=\"background\" value=\"!ref:foregroundProvisioning\"/>\n    <Description>Provision what remains in the project.  Normally we won\'t\n      be here with unanswered provisioning questions, but if we have them\n      the provisioner will just skip creating those accounts and do what it can.</Description>\n    <Transition to=\"Post Provision\"/>\n  </Step>\n  <Step action=\"script:approvalSet.setAllProvisioned();\" icon=\"Task\" name=\"Post Provision\" posX=\"605\" posY=\"11\">\n    <Description>\n      Mark all of the items in the approvalset provisioned since these\n      are all synchronous activities.\n    </Description>\n    <Transition to=\"Audit Completion\"/>\n  </Step>\n  <Step action=\"call:auditLCMCompletion\" icon=\"Audit\" name=\"Audit Completion\" posX=\"715\" posY=\"11\">\n    <Arg name=\"approvalSet\" value=\"ref:approvalSet\"/>\n    <Transition to=\"Notify\"/>\n  </Step>\n  <Step icon=\"Email\" name=\"Notify\" posX=\"362\" posY=\"163\">\n    <Transition to=\"Notify User\"/>\n  </Step>\n  <Step action=\"call:sendEmail\" condition=\"script:Util.csvToList(notificationScheme).contains(&quot;user&quot;)\" icon=\"Email\" name=\"Notify User\" posX=\"576\" posY=\"163\">\n    <Arg name=\"template\" value=\"LCM User Notification\"/>\n    <Arg name=\"to\" value=\"script:getEmail(identityName)\"/>\n    <Transition to=\"Notify Requester\"/>\n  </Step>\n  <Step action=\"call:sendEmail\" condition=\"script:Util.csvToList(notificationScheme).contains(&quot;requester&quot;)\" icon=\"Email\" name=\"Notify Requester\" posX=\"691\" posY=\"163\">\n    <Arg name=\"template\" value=\"LCM Requester Notification\"/>\n    <Arg name=\"to\" value=\"script:getEmail(launcher)\"/>\n    <Transition to=\"Notify Manager\"/>\n  </Step>\n  <Step action=\"call:sendEmail\" condition=\"script:Util.csvToList(notificationScheme).contains(&quot;manager&quot;)\" icon=\"Email\" name=\"Notify Manager\" posX=\"812\" posY=\"163\">\n    <Arg name=\"template\" value=\"LCM Manager Notification\"/>\n    <Arg name=\"to\" value=\"script:getManagersEmail(identityName)\"/>\n    <Transition to=\"end\"/>\n  </Step>\n  <Step action=\"call:addMessage\" name=\"Exit On Policy Violation\" posX=\"919\" posY=\"378\">\n    <Arg name=\"message\" value=\"Failed due to policy violation(s)\"/>\n    <Arg name=\"type\" value=\"Error\"/>\n    <Transition to=\"end\"/>\n  </Step>\n  <Step icon=\"Catches\" name=\"Check Plan and Update Cart\" posX=\"919\" posY=\"17\" resultVariable=\"plan\">\n    <Description>\n      This step takes looks for name changes during creates and updates\n      the stub identity on the plan accordingly.\n    </Description>\n    <Script>\n      <Source>\n        import sailpoint.object.ApprovalSet;\n        import sailpoint.object.ApprovalItem;\n        import sailpoint.object.Identity;\n        import sailpoint.object.ProvisioningPlan;\n        import sailpoint.object.ProvisioningPlan.AccountRequest;\n        import sailpoint.object.ProvisioningPlan.AttributeRequest;\n\n        AccountRequest iiq = plan.getAccountRequest(ProvisioningPlan.APP_IIQ);\n        if ( iiq != null ) {\n            // Look for the name attribute\n            boolean nameChanged = false;\n            String idName = identityName;\n            AttributeRequest name = iiq.getAttributeRequest(\"name\");\n            if ( name != null ) {\n                String nameStr = Util.otoa(name.getValue());\n                if ( nameStr != null ) {\n                    // If they don\'t match this indicates a form\n                    // update changes the accountId\n                    if ( identityName.compareTo(nameStr) != 0 ) {\n                        idName = nameStr; \n                        nameChanged = true;\n                    }\n                }\n            }\n            Identity planIdentity = plan.getIdentity();\n            if ( ( planIdentity == null ) || ( nameChanged ) ) {\n                SailPointContext ctx = wfcontext.getSailPointContext();\n                Identity stub = ctx.getObject(Identity.class, idName);\n                if ( stub == null ) {\n                    stub = new Identity();\n                    stub.setName(idName);\n                }\n                plan.setIdentity(stub);\n            }\n\n            //\n            // Update the approval item with any changes that \n            // were made during the approval process\n            // \n            if ( approvalSet != null ) {\n                List approvalItems =  approvalSet.getItems();\n                // in the default case there is always just one item for all the changes\n                if ( Util.size(approvalItems) == 1 ) { \n                    // Re-flatten the attribute values so they are accurate when auditing changes\n                    // and notifying. The values may have been updated in the approvalForm.\n                    ApprovalItem item = approvalItems.get(0);\n                    List attrRequestFlat = flattenAttributeRequests(iiq.getAttributeRequests());\n                    if ( attrRequestFlat != null ) {\n                        item.setValue(attrRequestFlat);\n                    }\n                    if ( nameChanged ) {\n                        item.setNativeIdentity(idName);\n                    }\n                }\n            }\n        }\n        return plan;\n      </Source>\n    </Script>\n    <Transition to=\"end\"/>\n  </Step>\n  <Step icon=\"Stop\" name=\"end\" posX=\"919\" posY=\"163\"/>\n</List>\n',' ',' ',NULL),('4028ab1063f427af0163f4291a3901ab',1528809724473,1739425375625,NULL,NULL,NULL,'Generic Step Library',NULL,'StepLibrary',NULL,_binary '',_binary '\0',_binary '\0',0,_binary '\0',NULL,NULL,' ',NULL,'<List>\n  <Step icon=\"Default\" name=\"Generic Step\"/>\n  <Step icon=\"Start\" name=\"Start\"/>\n  <Step icon=\"Stop\" name=\"Stop\"/>\n</List>\n',' ',' ',NULL),('4028ab1063f427af0163f4291a6401ac',1528809724517,1739425380740,NULL,NULL,NULL,'Provisioning Approval Subprocess','\n    Simple approval subrocess introduced into release 6.2 to make\n    adding custom approvals easier.  This approval subprocess\n    has a configuration form to make it easier to configure\n    from the Business Process Editor.\n  ','Subprocess',NULL,_binary '\0',_binary '',_binary '\0',0,_binary '\0',NULL,NULL,'<List>\n  <Variable initializer=\"serial\" input=\"true\" name=\"approvalMode\">\n    <Description>\n        A string that specifies how we should handle the approvals.\n\n        By default this is serial since most of these request with\n        the exception of manager transfers will have only one approver.\n\n        parallel\n        Approvals are processed concurrently and there must be consensus,\n        we wait for all approvers to approve.  The first approver that\n        rejects terminates the entire approval.\n\n        parallelPoll\n        Approvals are processed concurrently but consensus is not required.\n        All approvals will be processed, we don\'t stop if there are any\n        rejections.\n\n        serial\n        Approvals are processed one at a time and there must be consensus.\n        The first approver that rejects terminates the entire approval.\n\n        serialPoll\n        Approvals are processed in order but consensus is not required.\n        All approvals will be processed, we don\'t stop if there are any\n        rejections.  In effect we are \"taking a poll\" of the approvers.\n\n        any\n        Approvals are processed concurrently, the first approver to\n        respond makes the decision for the group.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"approvalScheme\">\n    <Description>\n      A csv string that specifies how approval items should be generated \n      for the incoming request.\n\n      The value can be \"none\", in which case approvals are disabled.\n\n      The value can also be a combination of any of the values below \n      in any order, separated by commas. The order in which they are \n      specified is the order in which they are processed:\n\n      owner\n        The object owner gets the approval item. \n        For Role approvals this is the Role object owner. \n        For Entitlement approvals this is the Entitlement object owner.\n\n      manager\n        The manager gets the approval item.\n\n      securityOfficer\n        The identity in the variable securityOfficerName gets the approval item.\n\n      identity\n        The identities/workgroups in the variable approvingIdentities get the approval item.\n\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"approvingIdentities\">\n    <Description>\n       List of identities and/or workgroups names/ids that should be involved in the approval \n       process.    \n    </Description>\n  </Variable>\n  <Variable initializer=\"spadmin\" input=\"true\" name=\"fallbackApprover\">\n    <Description>\n      A String that specifies the name of the Identity that will \n      be assigned any approvals where the owner of the approver \n      can\'t be resolved. Example if the scheme is \"owner\" and the \n      application doesn\'t specify and owner.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"flow\">\n    <Description>\n      The name of the LCM flow that launched this workflow.\n\n      This is one of these values:\n\n      AccountsRequest\n      EntitlementsRequest\n      RolesRequest\n      IdentityCreateRequest\n      IdentityEditRequest\n      ForgotPassword\n      ExpiredPassword\n      PasswordRequest\n\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"identityName\">\n    <Description>The name of the identity being updated.</Description>\n  </Variable>\n  <Variable input=\"true\" name=\"identityDisplayName\">\n    <Description>\n      The displayName of the identity being updated.\n      Query for this using a projection query and fall back to the name.      \n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"identityRequestId\">\n    <Description>\n       The ID of the IdentityRequest for this request.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"policyViolations\">\n    <Description>\n       List of policy violations that were found during our initial policy scan.\n       This list is passed into each work item so the approvers can see\n       pending violations.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"managerElectronicSignature\">\n    <Description>\n       The name of the electronic signature object that should be used when workitems\n       are completed by a manager.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"ownerElectronicSignature\">\n    <Description>\n       The name of the electronic signature object that should be used when workitems\n       are completed by object owners.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"securityOfficerElectronicSignature\">\n    <Description>\n       The name of the electronic signature object that should be used when workitems\n       are completed by the security officer.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"identityElectronicSignature\">\n    <Description>\n       The name of the electronic signature object that should be used when workitems\n       are completed by object owners.\n    </Description>\n  </Variable>\n  <Variable initializer=\"LCM Identity Update Approval\" input=\"true\" name=\"managerEmailTemplate\">\n    <Description>\n       Name of the email template to use when manager of pending approvals.\n    </Description>\n  </Variable>\n  <Variable initializer=\"LCM Identity Update Approval\" input=\"true\" name=\"ownerEmailTemplate\">\n    <Description>\n       Name of the email template to use when notifying the owner of pending approvals.\n    </Description>\n  </Variable>\n  <Variable initializer=\"LCM Identity Update Approval\" input=\"true\" name=\"securityOfficerEmailTemplate\">\n    <Description>\n       Name of the email template to use when notifying the security officer of pending approvals.\n    </Description>\n  </Variable>\n  <Variable initializer=\"LCM Identity Update Approval\" input=\"true\" name=\"identityEmailTemplate\">\n    <Description>\n       Name of the email template to use when notifying the security officer of pending approvals.\n    </Description>\n  </Variable>\n  <Variable initializer=\"false\" name=\"trace\">\n    <Description>\n      Used for debugging this workflow and when set to true trace\n      will be sent to stdout.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"workItemDescription\">\n    <Description>String \"template\" that will be used as the workitem description.</Description>\n  </Variable>\n  <Variable input=\"true\" name=\"workItemEscalationTemplate\">\n    <Description>The email template that should be used when sending out reminders.</Description>\n  </Variable>\n  <Variable input=\"true\" name=\"workItemHoursBetweenReminders\">\n    <Description>The number of hours to wait between sending reminders to approvers.</Description>\n  </Variable>\n  <Variable input=\"true\" name=\"workItemHoursTillEscalation\">\n    <Description>The number of hourse to wait until an approval should be escalated.</Description>\n  </Variable>\n  <Variable initializer=\"Normal\" input=\"true\" name=\"workItemPriority\">\n    <Description>\n       The String version of a WorkItem.Priority. This variable is\n       used to set the priority on all of the workitems generated\n       as part of this workflow and also set on the IdentityRequest\n       object.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"workItemReminderTemplate\">\n    <Description>The email template that should be used when sending out reminders.</Description>\n  </Variable>\n  <Variable input=\"true\" name=\"workItemEscalationRule\">\n    <Description>The rule used to assign a new ownder during escalation.</Description>\n  </Variable>\n  <Variable input=\"true\" name=\"workItemMaxReminders\">\n    <Description>The maximum number of reminder emails that will be sent before we begin the escalation process.</Description>\n  </Variable>\n  <Variable initializer=\"true\" input=\"true\" name=\"filterRejects\">\n    <Description>True to filter rejected items when running in Serial/SerialPoll mode.</Description>\n  </Variable>\n  <Variable initializer=\"false\" input=\"true\" name=\"setPreviousApprovalDecisions\">\n    <Description>True to pre-populate approval decisions from previous approvals.</Description>\n  </Variable>\n  <Variable initializer=\"false\" input=\"true\" name=\"clearApprovalDecisions\">\n    <Description>True to clear all decisions when generating approvals</Description>\n  </Variable>\n  <Variable initializer=\"true\" input=\"true\" name=\"dontUpdatePlan\">\n    <Description>True to skip updating the ProvisioningProject masterPlan when processing approval decisions.</Description>\n  </Variable>\n  <Variable input=\"true\" name=\"approvalSet\" output=\"true\">\n    <Description>\n      ApprovalSet representing the things that were requested and come from\n      the master provisioning plan. \n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"project\" output=\"true\">\n    <Description>\n      ProvisioningProject which is just a compiled version of the ProvisioningPlan, the \n      master plan will be adjusted when approval decisions are applied and a new \n      revised provisiobion project will be returned.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"plan\" output=\"true\">\n    <Description>The provisioning plan.</Description>\n  </Variable>\n</List>\n',NULL,'<List>\n  <Step icon=\"Start\" name=\"Start\" posX=\"20\" posY=\"22\">\n    <Transition to=\"Approval\"/>\n  </Step>\n  <Step icon=\"Approval\" name=\"Approval\" posX=\"158\" posY=\"22\">\n    <Approval mode=\"ref:approvalMode\" owner=\"call:buildCommonApprovals\" renderer=\"lcmWorkItemRenderer.xhtml\" send=\"identityDisplayName,identityName,approvalSet,flow,policyViolations,identityRequestId\">\n      <AfterScript>\n        <Source>\n          import sailpoint.workflow.IdentityRequestLibrary;\n                    \n          if ( item == null ) \n              return;\n\n          assimilateWorkItemApprovalSet(wfcontext, item, approvalSet);          \n          auditDecisions(item);  \n          IdentityRequestLibrary.assimilateWorkItemApprovalSetToIdentityRequest(wfcontext, approvalSet);\n        </Source>\n      </AfterScript>\n      <Arg name=\"launcher\" value=\"ref:launcher\"/>\n      <Arg name=\"workItemDescription\" value=\"ref:workItemDescription\"/>\n      <Arg name=\"workItemEscalationRule\" value=\"ref:workItemEscalationRule\"/>\n      <Arg name=\"workItemEscalationTemplate\" value=\"ref:workItemEscalationTemplate\"/>\n      <Arg name=\"workItemHoursTillEscalation\" value=\"ref:workItemHoursTillEscalation\"/>\n      <Arg name=\"workItemMaxReminders\" value=\"ref:workItemMaxReminders\"/>\n      <Arg name=\"workItemEscalationFrequency\" value=\"ref:workItemEscalationFrequency\"/>\n      <Arg name=\"workItemHoursBetweenReminders\" value=\"ref:workItemHoursBetweenReminders\"/>\n      <Arg name=\"workItemIdentityRequestId\" value=\"ref:identityRequestId\"/>\n      <Arg name=\"workItemNotificationTemplate\" value=\"ref:approvalEmailTemplate\"/>\n      <Arg name=\"workItemPriority\" value=\"ref:workItemPriority\"/>\n      <Arg name=\"approvalMode\" value=\"ref:approvalMode\"/>\n      <Arg name=\"approvalScheme\" value=\"ref:approvalScheme\"/>\n      <Arg name=\"approvalSplitPoint\" value=\"ref:approvalSplitPoint\"/>\n      <Arg name=\"clearApprovalDecisions\" value=\"ref:clearApprovalDecisions\"/>\n      <Arg name=\"workItemReminderTemplate\" value=\"ref:workItemReminderTemplate\"/>\n      <Arg name=\"workItemRequester\" value=\"$(launcher)\"/>\n      <InterceptorScript>\n        <Source>\n            \n            import sailpoint.object.Workflow.Approval;\n            import sailpoint.object.ApprovalItem;\n            import sailpoint.object.ApprovalSet;\n            import sailpoint.object.Workflow;\n            import sailpoint.object.WorkItem;\n            import sailpoint.tools.Util;\n            import java.util.Iterator;\n            import java.util.ArrayList;\n            import java.lang.Boolean;\n\n            if (Workflow.INTERCEPTOR_PRE_ASSIMILATION.equals(method)) {\n                // promote completion state to Rejected if all items are rejected\n                ApprovalSet aset = item.getApprovalSet();\n                if (aset != null) {\n                    List items = aset.getItems();\n                    if (items != null) {\n                        int rejectCount = 0;\n                        for (ApprovalItem item : items) {\n                            // note that isRejected can\'t be used since that\n                            // assumes no answer means rejected\n                            if (item.getState() == WorkItem.State.Rejected) {\n                                rejectCount++;\n                            }\n                        }\n                        if (rejectCount == items.size()) {\n                            item.setState(WorkItem.State.Rejected);\n                        }\n                    }\n                }\n            } else if (Workflow.INTERCEPTOR_START_APPROVAL.equals(method)) {\n\n                ApprovalSet currentSet = approval.getApprovalSet();\n\n                if (currentSet != null &amp;&amp; !Util.isEmpty(currentSet.getItems())) {\n                    //If filterRejects is true, filter any rejected items in the master ApprovalSet from the currentSet\n                    if (Boolean.valueOf(filterRejects)) {\n                        filterRejectsFromApprovalSet(approvalSet, currentSet);\n                    }\n\n                    //We\'ve filtered all items from the approval set\n                    if (Util.isEmpty(currentSet.getItems())) {\n                        //Complete the approval if it contains no ApprovalItems\n                        approval.setComplete(true);\n                    } else {\n\n                        if (Boolean.valueOf(setPreviousApprovalDecisions)) {\n                            // If setPreviousApprovalDecisions is enabled, set the decision\n                            // on the items to that of the global item.\n                            setPreviousDecisionsOnApprovalSet(approvalSet, currentSet);\n                        }\n                    }\n                }\n\n            } else if (Workflow.INTERCEPTOR_END_APPROVAL.equals(method)) {\n                // Owner children approvals need to propagate the rejection state if all children are rejected\n                Approval parentApp = approval.getParent();\n                // Never relay the state to the root approval\n                // If we don\'t have an approvalSet, must be a container approval\n                if (parentApp != null &amp;&amp; approval.getApprovalSet() == null) {\n                    boolean completeAndRejected = false;\n                    for (Approval child : Util.safeIterable(approval.getChildren())) {\n                        if (child.isComplete() &amp;&amp; child.getState() == WorkItem.State.Rejected) {\n                            completeAndRejected = true;\n                        } else {\n                            completeAndRejected = false;\n                            break;\n                        }\n                    }\n                    //If all children complete and rejected, set the status on the parent approval\n                    if (completeAndRejected) {\n                        approval.setState(WorkItem.State.Rejected);\n                    }\n                }\n            } else if (Workflow.INTERCEPTOR_OPEN_WORK_ITEM.equals(method)) {\n               import sailpoint.workflow.IdentityRequestLibrary;\n\n               //Sync IdentityRequestItems with the WorkItem\n               IdentityRequestLibrary.assimilateWorkItemApprovalSetToIdentityRequest(wfcontext, item.getApprovalSet(), false);\n            }\n            \n        </Source>\n      </InterceptorScript>\n    </Approval>\n    <Transition to=\"Process Approval Decisions\" when=\"script:(step.getApproval() != null &amp;&amp; step.getApproval().containsApprovalItems())\"/>\n    <Transition to=\"end\"/>\n  </Step>\n  <Step action=\"call:processApprovalDecisions\" icon=\"Task\" name=\"Process Approval Decisions\" posX=\"420\" resultVariable=\"project\">\n    <Arg name=\"approvalSet\" value=\"ref:approvalSet\"/>\n    <Arg name=\"disableAudit\" value=\"true\"/>\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Arg name=\"plan\" value=\"ref:plan\"/>\n    <Arg name=\"recompilePlan\" value=\"true\"/>\n    <Arg name=\"dontUpdatePlan\" value=\"ref:dontUpdatePlan\"/>\n    <Transition to=\"end\"/>\n  </Step>\n  <Step icon=\"Stop\" name=\"end\" posX=\"420\" posY=\"225\"/>\n</List>\n',' ',' ','Identity'),('4028ab1063f427af0163f4291a8801ad',1528809724552,1739425377795,NULL,NULL,NULL,'IdentityProvisioningStepLibrary',NULL,'StepLibrary',NULL,_binary '',_binary '\0',_binary '\0',0,_binary '\0',NULL,NULL,' ',NULL,'<List>\n  <Step configForm=\"Provisioning Approval Step Form\" icon=\"Task\" name=\"Account Approval\">\n    <Arg name=\"approvalMode\"/>\n    <Arg name=\"approvalScheme\"/>\n    <Arg name=\"approvalSet\" value=\"ref:approvalSet\"/>\n    <Arg name=\"approvalAssignmentRule\"/>\n    <Arg name=\"approvingIdentities\"/>\n    <Arg name=\"fallbackApprover\" value=\"ref:fallbackApprover\"/>\n    <Arg name=\"flow\" value=\"ref:flow\"/>\n    <Arg name=\"identityName\" value=\"ref:identityName\"/>\n    <Arg name=\"identityDisplayName\" value=\"ref:identityDisplayName\"/>\n    <Arg name=\"identityElectronicSignature\"/>\n    <Arg name=\"identityEmailTemplate\"/>\n    <Arg name=\"identityRequestId\" value=\"ref:identityRequestId\"/>\n    <Arg name=\"launcher\" value=\"ref:launcher\"/>\n    <Arg name=\"managerEmailTemplate\"/>\n    <Arg name=\"managerElectronicSignature\"/>\n    <Arg name=\"ownerEmailTemplate\"/>\n    <Arg name=\"ownerElectronicSignature\"/>\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Arg name=\"policyViolations\" value=\"ref:policyViolations\"/>\n    <Arg name=\"priority\" value=\"ref:workItemPriority\"/>\n    <Arg name=\"securityOfficerName\"/>\n    <Arg name=\"securityOfficerEmailTemplate\"/>\n    <Arg name=\"securityOfficerElectronicSignature\"/>\n    <Arg name=\"trace\" value=\"ref:trace\"/>\n    <Arg name=\"workItemComments\"/>\n    <Arg name=\"workItemReminderTemplate\"/>\n    <Arg name=\"workItemHoursBetweenReminders\"/>\n    <Arg name=\"workItemMaxReminders\"/>\n    <Arg name=\"workItemEscalationTemplate\"/>\n    <Arg name=\"workItemHoursTillEscalation\"/>\n    <Arg name=\"workItemEscalationRule\"/>\n    <Description>\n        Step library that can be used for provisioning request approvals.\n        The process assumes many of the Provisioning Workflow structures exist\n        and has things like provisioning plans and approvalSets are required.           \n      </Description>\n    <Return name=\"project\"/>\n    <Return name=\"approvalSet\"/>\n    <Return name=\"workItemComments\"/>\n    <WorkflowRef>\n      <Reference class=\"sailpoint.object.Workflow\" id=\"4028ab1063f427af0163f4291a6401ac\" name=\"Provisioning Approval Subprocess\"/>\n    </WorkflowRef>\n  </Step>\n  <Step action=\"call:sendMultipleNotifications\" configForm=\"Provisioning Notification Step Form\" icon=\"Email\" name=\"Notify\">\n    <Arg name=\"notificationScheme\"/>\n    <Arg name=\"userEmail\" value=\"script:getUserEmail(identityName, plan)\"/>\n    <Arg name=\"userEmailTemplate\"/>\n    <Arg name=\"requesterEmail\" value=\"script:getEmail(launcher)\"/>\n    <Arg name=\"requesterEmailTemplate\"/>\n    <Arg name=\"managerEmail\" value=\"script:getManagersEmail(identityName, plan)\"/>\n    <Arg name=\"managerEmailTemplate\"/>\n    <Arg name=\"securityOfficerName\"/>\n    <Arg name=\"securityOfficerEmailTemplate\"/>\n    <Arg name=\"otherUsersToNotify\"/>\n    <Arg name=\"otherUsersToNotifyEmailTemplate\"/>\n    <Arg name=\"identityName\" value=\"ref:identityName\"/>\n    <Arg name=\"plan\" value=\"ref:plan\"/>\n    <Arg name=\"flow\" value=\"ref:flow\"/>\n    <Arg name=\"launcher\" value=\"ref:launcher\"/>\n    <Arg name=\"trace\" value=\"ref:trace\"/>\n    <Arg name=\"source\" value=\"ref:source\"/>\n    <Description>\n      	  Notify the various actors specified on notification scheme.\n        </Description>\n  </Step>\n</List>\n',' ',' ',NULL),('4028ab1063fdfb6d0163fdfc684b0034',1528974567500,1739425377571,NULL,NULL,NULL,'Identity Request Violation Review','\n   This sub-process determines if there are any violations which will be\n   caused by the request specified in the plan. If the policy scheme is\n   \'interactive\' the user will be presented with a form which details\n   the actions they can take to deal with the violations. Otherwise,\n   control is returned to the calling process.\n  ','Subprocess',NULL,_binary '\0',_binary '\0',_binary '\0',0,_binary '\0',NULL,NULL,'<List>\n  <Variable initializer=\"false\" name=\"trace\">\n    <Description>\n      The name of the identity object being modified.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"identityName\" required=\"true\">\n    <Description>\n      The name of the identity object being modified.\n    </Description>\n  </Variable>\n  <Variable initializer=\"script:(identityDisplayName != void) ? identityDisplayName : resolveDisplayName(identityName)\" input=\"true\" name=\"identityDisplayName\">\n    <Description>\n      The displayName of the identity being updated.\n      This may be passed in, if not the script queries for this\n      using a projection query and falls back to the name.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"project\" required=\"true\">\n    <Description>The provisioning plan ready to execute.</Description>\n  </Variable>\n  <Variable input=\"true\" name=\"plan\" required=\"true\">\n    <Description>The provisioning plan ready to execute.</Description>\n  </Variable>\n  <Variable input=\"true\" name=\"source\"/>\n  <Variable input=\"true\" name=\"optimisticProvisioning\" required=\"true\">\n    <Description>\n      Set to true to enable optimistic provisioning.  This will cause\n      changes to the entitlements compiled from role assignments to be\n      applied immediately to the identity cube rather than waiting\n      for the next refresh/reaggregation after the provisioning system\n      completes the request.\n    </Description>\n  </Variable>\n  <Variable initializer=\"false\" input=\"true\" name=\"enableRetryRequest\">\n    <Description>\n      When set to true it will disable the workflow retry loop and let the\n      Provision step launch requests to handle the retries.  Enabling\n      this flag will enable some older functionality.\n    </Description>\n  </Variable>\n  <Variable name=\"policyViolations\">\n    <Description>\n       List of policy violations that were found during our initial policy scan.\n       This list is passed into each work item so the approvers can see\n       pending violations.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"policiesToCheck\">\n    <Description>\n      A List of policies that should be checked. If this list is\n      empty all violations will be checked. Used in combination\n      with policyScheme.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"policyScheme\"/>\n  <Variable input=\"true\" name=\"asyncCacheRefresh\">\n    <Description>\n      Set to true to enable asynchronous refresh of the policy and role\n      caches.  This speeds up response time for the LCM user, but you\n      may want to disable this during demonstrations after editing\n      the role or policy models.  This may also be enabled globally\n      in the system configuration.  This variable overrides the system\n      configuration if it has a value.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"priority\">\n    <Description>\n      String version of WorkItem.level that will be used\n      to set the priority of the IdentityRequest.\n    </Description>\n  </Variable>\n  <Variable name=\"approvalSet\">\n    <Description>\n       This attribute is passed in and contains the current\n       set of approvalItems in the request. When a user chooses\n       to remove a problematic approval item from the request, we\n       update this value before returning to the calling workflow.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"flow\">\n    <Description>\n      The name of the LCM flow that launched this workflow.\n\n      This is one of these values:\n\n      AccountsRequest\n      EntitlementsRequest\n      RolesRequest\n      IdentityCreateRequest\n      IdentityEditRequest\n      ForgotPassword\n      ExpiredPassword\n      PasswordRequest\n\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"allowRequestsWithViolations\">\n    <Description>\n      If this variable is set to true, requesters will be able to proceed past\n      the Policy Violation Review form without taking any action on\n      policy violations resulting from the request.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"requireViolationReviewComments\">\n    <Description>\n      If true, requesters will be required to enter in comments if they\n      proceed with a request that will result in policy violations.\n     </Description>\n  </Variable>\n  <Variable name=\"violationReviewDecision\">\n    <Description>\n       Decision made by the user in the Policy Violation Review step.\n       This may be one of three choices:\n\n       -ignore:   User is ignoring the violations and letting the request continue. If\n                   requireViolationReviewComments=true the user will be required to enter\n                   comments indicating why they are allowing the violations.\n\n       -remediate: Indicates that the user removed the request items that were causing the\n                   violations\n\n       -cancel:   Indicates that the user decided to abandon the request, terminating the workflow.\n\n    </Description>\n  </Variable>\n  <Variable name=\"workItemComments\">\n    <Description>\n      Completion comments added if the user decides to proceed with the\n      request without addressing the policy violations. These comments\n      will be propagated to all other approvals.\n    </Description>\n  </Variable>\n  <Variable name=\"originalPlan\">\n    <Description>\n      The original plan calculated for the request.  As request modifications\n      are submitted and resubmitted after violation review, we will revert to\n      the original plan, so that the new selections can be calculated starting\n      from a clean slate. \n    </Description>\n  </Variable>\n</List>\n',NULL,'<List>\n  <Step icon=\"Start\" name=\"Start\" posX=\"22\" posY=\"13\">\n    <Transition to=\"Save Original Plan\"/>\n  </Step>\n  <Step name=\"Save Original Plan\" posX=\"118\" posY=\"13\">\n    <Description>\n      When a policyScheme of \"interactive\" is set, the user has an opportunity\n      to resolve the violation by removing requests.  Multiple iterations of\n      this form may be submitted.  Each submission must reset the plan so that\n      when the plan is compiled anew with the new set of decisions, the\n      original master plan is utilized.  This step saves that master plan.\n      It is reloaded in the \"Reset Original Plan\" step.\n    </Description>\n    <Script>\n      <Source>\n        import sailpoint.object.ProvisioningPlan;\n        \n        if (null != project) {\n            ProvisioningPlan master = project.getMasterPlan();\n            if (null != master) {\n                ProvisioningPlan copy = (ProvisioningPlan) master.deepCopy(wfcontext.getSailPointContext());\n                workflow.put(\"originalPlan\", copy);\n            }\n        }\n      </Source>\n    </Script>\n    <Transition to=\"Check Policies\"/>\n  </Step>\n  <Step action=\"checkPolicyViolations\" icon=\"Task\" name=\"Check Policies\" posX=\"220\" posY=\"13\" resultVariable=\"policyViolations\">\n    <Arg name=\"identityName\" value=\"ref:identityName\"/>\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Arg name=\"policies\" value=\"ref:policiesToCheck\"/>\n    <Arg name=\"policyScheme\" value=\"ref:policyScheme\"/>\n    <Arg name=\"asyncCacheRefresh\" value=\"ref:asyncCacheRefresh\"/>\n    <Return name=\"policyViolations\" to=\"policyViolations\"/>\n    <Transition to=\"Reset Original Plan\" when=\"script:((!&quot;ignore&quot;.equals(violationReviewDecision) &amp;&amp; !&quot;cancel&quot;.equals(violationReviewDecision) ) &amp;&amp; size(policyViolations) > 0 &amp;&amp; (policyScheme.equals(&quot;interactive&quot;)))\"/>\n    <Transition to=\"end\"/>\n  </Step>\n  <Step name=\"Reset Original Plan\" posX=\"378\" posY=\"9\">\n    <Description>\n      In this step, we need to reload the original plan because previous\n      decisions may have modified the plan, so start with the original complete\n      plan.  Also see the step \"Save Original Plan\".\n    </Description>\n    <Script>\n      <Source>\n        if (null != originalPlan) {\n            plan = (ProvisioningPlan) originalPlan.deepCopy(wfcontext.getSailPointContext());\n            workflow.put(\"plan\", plan);\n        }\n      </Source>\n    </Script>\n    <Transition to=\"Violation Review\"/>\n  </Step>\n  <Step icon=\"Approval\" name=\"Violation Review\" posX=\"446\" posY=\"210\">\n    <Approval mode=\"ref:approvalMode\" owner=\"ref:launcher\" renderer=\"lcmViolationReviewRenderer.xhtml\" send=\"identityDisplayName,identityName,policyViolations,approvalSet,violationReviewDecision,requireViolationReviewComments,allowRequestsWithViolations\">\n      <AfterScript>\n        <Source>\n          import sailpoint.object.ApprovalSet;\n          import sailpoint.object.ApprovalItem;\n          import sailpoint.object.WorkItem;\n          import sailpoint.object.ProvisioningPlan;\n          import sailpoint.object.Comment;\n\n\n          if (item == null) {\n              return;\n          }\n\n          workflow.put(\"violationReviewDecision\", item.get(\"violationReviewDecision\"));\n          \n          // Assimilate all of the approvalItem changes into our global\n          // approval set\n          ApprovalSet set = (ApprovalSet)item.get(\"approvalSet\");\n          if ( set != null ) {\n              // Global completion comments will apply to each of the items\n              // If there are completion comments append them\n              // to any other completion comments, but typically its \n              // one or the other\n              String completionComments = item.getCompletionComments();\n              Identity id = item.getOwner();\n              String ownerName = null;\n              if ( id != null ) {\n                  ownerName = id.getName();\n              }\n              approvalSet.assimilate(set, ownerName, completionComments, false);\n          } else {\n              throw new GeneralException(\"ApprovalSet not found in afterscript.\");\n          }\n          \n          assimilateWorkItemApprovalSet(wfcontext, item, approvalSet);\n        </Source>\n      </AfterScript>\n      <Arg name=\"workItemRequester\" value=\"$(launcher)\"/>\n      <Arg name=\"workItemDescription\" value=\"Policy Violation Review - Account Changes for User: $(identityDisplayName)\"/>\n      <Arg name=\"workItemPriority\" value=\"ref:priority\"/>\n      <Arg name=\"workItemType\" value=\"ViolationReview\"/>\n    </Approval>\n    <Description>\n      Give the user the option of either removing problematic request items, or\n      affirm that they are aware of the violations and wish to continue.\n    </Description>\n    <Transition to=\"Handle Violation Review Decision\"/>\n  </Step>\n  <Step icon=\"Task\" name=\"Handle Violation Review Decision\" posX=\"248\" posY=\"210\">\n    <Description>\n\n    </Description>\n    <Transition to=\"Process Violation Review Decisions\"/>\n  </Step>\n  <Step action=\"call:processPlanApprovalDecisions\" icon=\"Task\" name=\"Process Violation Review Decisions\" posX=\"60\" posY=\"210\" resultVariable=\"plan\">\n    <Arg name=\"approvalSet\" value=\"ref:approvalSet\"/>\n    <Arg name=\"plan\" value=\"ref:plan\"/>\n    <Arg name=\"disableAudit\" value=\"true\"/>\n    <Description>\n      Process the decisions made by the user. This will update the plan by removing\n      any items that were rejected by the user.\n    </Description>\n    <Transition to=\"Compile Project\"/>\n  </Step>\n  <Step action=\"compileProvisioningProject\" icon=\"Task\" name=\"Compile Project\" posX=\"114\" posY=\"134\" resultVariable=\"project\">\n    <Arg name=\"identityName\" value=\"ref:identityName\"/>\n    <Arg name=\"plan\" value=\"ref:plan\"/>\n    <Arg name=\"requester\" value=\"ref:launcher\"/>\n    <Arg name=\"source\" value=\"ref:source\"/>\n    <Arg name=\"disableRetryRequest\" value=\"!ref:enableRetryRequest\"/>\n    <Arg name=\"optimisticProvisioning\" value=\"ref:optimisticProvisioning\"/>\n    <Description>Recompile the provisioning plan into a provisioning project, taking into\n      consideration any items removed on the violation review form.</Description>\n    <Transition to=\"Check Policies\"/>\n    <Transition to=\"end\" when=\"script:(&quot;cancel&quot;.equals(violationReviewDecision) || &quot;ignore&quot;.equals(violationReviewDecision))\"/>\n  </Step>\n  <Step icon=\"Stop\" name=\"end\" posX=\"288\" posY=\"131\"/>\n</List>\n',' ',' ',NULL),('4028ab1063fdfb6d0163fdfc68a90035',1528974567593,1739425377199,NULL,NULL,NULL,'Identity Request Initialize','\n      This workflow subprocess is used to initialize the various\n      object necessary when executing workflows that deal\n      with provisioning.\n\n      This subprocess was added in 5.5 in an effort to\n      break groups of related steps into a single call\n      from the top level workflow.\n\n      It now encapsulates the following services:\n\n        - Compliation of the plan into a project\n        - Build an approval set\n           defaults to using buildApprovalSet but allows it to be passed in\n        - Audit Start\n        - Create the IdentityRequest object for the request tracking\n        - Check policies\n        - Build required forms for the launcher\n\n  ','Subprocess',NULL,_binary '\0',_binary '\0',_binary '\0',0,_binary '\0',NULL,NULL,'<List>\n  <Variable input=\"true\" name=\"identityName\" required=\"true\">\n    <Description>\n      The name of the identity object being modified.\n    </Description>\n  </Variable>\n  <Variable initializer=\"script:(identityDisplayName != void) ? identityDisplayName : resolveDisplayName(identityName)\" input=\"true\" name=\"identityDisplayName\">\n    <Description>\n      The displayName of the identity being updated.\n      This may be passed in, if not the script queries for this\n      using a projection query and falls back to the name.\n    </Description>\n  </Variable>\n  <Variable initializer=\"false\" input=\"true\" name=\"endOnManualWorkItems\">\n    <Description>Option to skip requests with manual work items.</Description>\n  </Variable>\n  <Variable initializer=\"false\" input=\"true\" name=\"endOnProvisioningForms\">\n    <Description>Option to skip requests with provisioning forms.</Description>\n  </Variable>\n  <Variable input=\"true\" name=\"flow\">\n    <Description>\n      The name of the LCM flow that launched this workflow.\n\n      This is one of these values:\n\n      AccountsRequest\n      EntitlementsRequest\n      RolesRequest\n      IdentityCreateRequest\n      IdentityEditRequest\n      ForgotPassword\n      ExpiredPassword\n      PasswordRequest\n\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"plan\" required=\"true\">\n    <Description>The provisioning plan ready to execute.</Description>\n  </Variable>\n  <Variable input=\"true\" name=\"optimisticProvisioning\" required=\"true\">\n    <Description>\n      Set to true to enable optimistic provisioning.  This will cause\n      changes to the entitlements compiled from role assignments to be\n      applied immediately to the identity cube rather than waiting\n      for the next refresh/reaggregation after the provisioning system\n      completes the request.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"asyncCacheRefresh\">\n    <Description>\n      Set to true to enable asynchronous refresh of the policy and role\n      caches.  This speeds up response time for the LCM user, but you\n      may want to disable this during demonstrations after editing\n      the role or policy models.  This may also be enabled globally\n      in the system configuration.  This variable overrides the\n      system configuration if it has a value.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"policiesToCheck\">\n    <Description>\n      A List of policies that should be checked. If this list is\n      empty all violations will be checked. Used in combination\n      with policyScheme.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"allowRequestsWithViolations\">\n    <Description>\n      If this variable is set to true, requesters will be able to proceed past\n      the Policy Violation Review form without taking any action on\n      policy violations resulting from the request.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"requireViolationReviewComments\">\n    <Description>\n      If true, requesters will be required to enter in comments if they\n      proceed with a request that will result in policy violations.\n     </Description>\n  </Variable>\n  <Variable initializer=\"Identity Update\" input=\"true\" name=\"formTemplate\">\n    <Description>\n      Template used when processing provisioning forms.\n    </Description>\n  </Variable>\n  <Variable initializer=\"false\" name=\"trace\">\n    <Description>\n      Used for debugging this subprocess and when set to true trace\n      statements will be sent to stdout.\n    </Description>\n  </Variable>\n  <Variable initializer=\"continue\" input=\"true\" name=\"policyScheme\">\n    <Description>\n      A String that specifies how policy checks effect the overall\n      process.\n\n      none - disabled policy checking\n\n      interactive -  allow requester to remove request items which are causing violations\n\n      continue -  continue if policy violations are found\n\n      fail -  fail and exit the workflow if any policy violations are found\n\n    </Description>\n  </Variable>\n  <Variable initializer=\"LCM\" input=\"true\" name=\"source\">\n    <Description>\n      String version of sailpoint.object.Source to indicate\n      where the request originated.  Defaults to LCM.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"priority\">\n    <Description>\n      String version of WorkItem.level that will be used\n      to set the priority any generated workitems. It will\n      also configure the priority of the request as\n      on the generated Access Request.\n    </Description>\n  </Variable>\n  <Variable initializer=\"false\" input=\"true\" name=\"enableRetryRequest\">\n    <Description>\n      When set to true it will disable the workflow retry loop and let the\n      Provision step launch requests to handle the retries.  Enabling\n      this flag will enable some older functionality.\n    </Description>\n  </Variable>\n  <Variable name=\"project\" output=\"true\">\n    <Description>\n      A ProvisioningProject object describing the modifications to the identity.\n      This may include a list of Question objects which will\n      cause the generation of a Form and a WorkItem to solicit\n      additional information necessary for provisioning.\n    </Description>\n  </Variable>\n  <Variable name=\"policyViolations\" output=\"true\">\n    <Description>\n       List of policy violations that were found during our initial policy scan.\n       This list is passed into each work item so the approvers can see\n       pending violations.\n    </Description>\n  </Variable>\n  <Variable name=\"approvalSet\" output=\"true\">\n    <Description>\n       This attribute is set during the \"Build Approval Set\" step,\n       which builds this list by going through the ProvisioningPlan\n       to build the line items that need to be approved.\n\n       This variable includes all ApprovalItems that are part of\n       the request process and is updated during the AfterScript\n       of the approval process by assimilating the decisions\n       and comments from the Approvals copy of the ApprovalItem.\n    </Description>\n  </Variable>\n  <Variable name=\"identityRequest\">\n    <Description>\n       The request object we get back from the create call. This is\n       primarily useful for debugging.\n    </Description>\n  </Variable>\n  <Variable name=\"identityRequestId\">\n    <Description>\n        The id of the IdentityRequest created.\n    </Description>\n  </Variable>\n  <Variable name=\"violationReviewDecision\" output=\"true\">\n    <Description>\n     Decision made by the user in the Policy Violation Review step.\n     This may be one of three choices:\n\n     -ignore:   User is ignoring the violations and letting the request continue. If\n                 requireViolationReviewComments=true the user will be required to enter\n                 comments indicating why they are allowing the violations.\n\n     -remediate: Indicates that the user removed the request items that were causing the\n                 violations\n\n     -cancel:   Indicates that the user decided to abandon the request, terminating the workflow.\n\n    </Description>\n  </Variable>\n  <Variable name=\"workItemComments\">\n    <Description>\n      Global comments accumulated during the workflow which should be shared\n      with other approvals. When a new approval is created, the comments in this\n      list will be added to the work item.\n    </Description>\n  </Variable>\n</List>\n',NULL,'<List>\n  <Step icon=\"Start\" name=\"Start\" posX=\"25\" posY=\"15\">\n    <Transition to=\"Compile Project\"/>\n  </Step>\n  <Step action=\"call:compileProvisioningProject\" icon=\"Task\" name=\"Compile Project\" posX=\"121\" posY=\"15\" resultVariable=\"project\">\n    <Arg name=\"identityName\" value=\"ref:identityName\"/>\n    <Arg name=\"plan\" value=\"ref:plan\"/>\n    <Arg name=\"requester\" value=\"ref:launcher\"/>\n    <Arg name=\"source\" value=\"ref:source\"/>\n    <Arg name=\"optimisticProvisioning\" value=\"ref:optimisticProvisioning\"/>\n    <Arg name=\"disableRetryRequest\" value=\"!ref:enableRetryRequest\"/>\n    <Arg name=\"noApplicationTemplates\">\n      <Script>\n        <Source>\n            boolean ignoreForms = false;\n            if (\"ForgotPassword\".equals(flow) || \"ExpirePassword\".equals(flow)) {\n               ignoreForms = true;\n            }\n            return ignoreForms;\n        </Source>\n      </Script>\n    </Arg>\n    <Arg name=\"noLocking\">\n      <Script>\n        <Source>\n            boolean noLocking = false;\n            if (\"Lifecycle\".equals(flow)) {\n               noLocking = true;\n            }\n            return noLocking;\n        </Source>\n      </Script>\n    </Arg>\n    <Description>Compile the provisioning plan into a provisioning project.\n      If you need to pass in provisioner options like \"noFiltering\"\n      or \"noRoleDeprovisioning\" you must pass them as explicit\n      arguments to the call.\n\n      The evaluation options \"requester\" and \"source\" are commonly\n      set here.\n\n      You can also pass things into the Template and Field scripts by\n      defining Args in this step.</Description>\n    <Transition to=\"end\" when=\"script:(isTrue(endOnManualWorkItems) &amp;&amp; (project.getUnmanagedPlan() != null))\"/>\n    <Transition to=\"end\" when=\"script:(isTrue(endOnProvisioningForms) &amp;&amp; (project.hasQuestions()))\"/>\n    <Transition to=\"Build Approval Set\" when=\"script:isNull(approvalSet)\"/>\n    <Transition to=\"Rebuild Approval Set\"/>\n  </Step>\n  <Step action=\"call:buildApprovalSet\" condition=\"script:isNull(approvalSet)\" name=\"Build Approval Set\" posX=\"260\" posY=\"92\" resultVariable=\"approvalSet\">\n    <Arg name=\"plan\" value=\"ref:plan\"/>\n    <Return name=\"approvalSet\" to=\"approvalSet\"/>\n    <Transition to=\"Check Policies\"/>\n  </Step>\n  <Step condition=\"script:(!policyScheme.equals(&quot;none&quot;))\" name=\"Check Policies\" posX=\"391\" posY=\"92\">\n    <Arg name=\"identityName\" value=\"ref:identityName\"/>\n    <Arg name=\"identityDisplayName\" value=\"ref:identityDisplayName\"/>\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Arg name=\"plan\" value=\"ref:plan\"/>\n    <Arg name=\"approvalSet\" value=\"ref:approvalSet\"/>\n    <Arg name=\"policyScheme\" value=\"ref:policyScheme\"/>\n    <Arg name=\"policiesToCheck\" value=\"ref:policiesToCheck\"/>\n    <Arg name=\"asyncCacheRefresh\" value=\"ref:asyncCacheRefresh\"/>\n    <Arg name=\"priority\" value=\"ref:priority\"/>\n    <Arg name=\"optimisticProvisioning\" value=\"ref:optimisticProvisioning\"/>\n    <Arg name=\"flow\" value=\"ref:flow\"/>\n    <Arg name=\"requireViolationReviewComments\" value=\"ref:requireViolationReviewComments\"/>\n    <Arg name=\"allowRequestsWithViolations\" value=\"ref:allowRequestsWithViolations\"/>\n    <Return name=\"policyViolations\" to=\"policyViolations\"/>\n    <Return name=\"project\" to=\"project\"/>\n    <Return name=\"plan\" to=\"plan\"/>\n    <Return name=\"violationReviewDecision\" to=\"violationReviewDecision\"/>\n    <Return merge=\"true\" name=\"workItemComments\" to=\"workItemComments\"/>\n    <WorkflowRef>\n      <Reference class=\"sailpoint.object.Workflow\" id=\"4028ab1063fdfb6d0163fdfc684b0034\" name=\"Identity Request Violation Review\"/>\n    </WorkflowRef>\n    <Transition to=\"end\" when=\"script:(&quot;cancel&quot;.equals(violationReviewDecision))\"/>\n    <Transition to=\"end\" when=\"script:((policyScheme.equals(&quot;fail&quot;) &amp;&amp; (size(policyViolations) > 0 )  ))\"/>\n    <Transition to=\"Rebuild Approval Set\"/>\n  </Step>\n  <Step action=\"call:buildApprovalSet\" name=\"Rebuild Approval Set\" posX=\"186\" posY=\"252\" resultVariable=\"approvalSet\">\n    <Arg name=\"plan\" value=\"ref:plan\"/>\n    <Return name=\"approvalSet\" to=\"approvalSet\"/>\n    <Transition to=\"Audit Start\"/>\n  </Step>\n  <Step action=\"call:auditLCMStart\" icon=\"Audit\" name=\"Audit Start\" posX=\"396\" posY=\"252\">\n    <Arg name=\"approvalSet\" value=\"ref:approvalSet\"/>\n    <Transition to=\"Create Identity Request\"/>\n  </Step>\n  <Step action=\"call:createIdentityRequest\" icon=\"Task\" name=\"Create Identity Request\" posX=\"543\" posY=\"252\" resultVariable=\"identityRequest\">\n    <Arg name=\"approvalSet\" value=\"ref:approvalSet\"/>\n    <Arg name=\"flow\" value=\"ref:flow\"/>\n    <Arg name=\"identityDisplayName\" value=\"ref:identityDisplayName\"/>\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Arg name=\"priority\" value=\"ref:priority\"/>\n    <Arg name=\"source\" value=\"ref:source\"/>\n    <Transition to=\"Do Provisioning Forms Pre-Approval\"/>\n  </Step>\n  <Step icon=\"Task\" name=\"Do Provisioning Forms Pre-Approval\" posX=\"741\" posY=\"252\">\n    <Arg name=\"identityName\" value=\"ref:identityName\"/>\n    <Arg name=\"identityDisplayName\" value=\"ref:identityDisplayName\"/>\n    <Arg name=\"priority\" value=\"ref:priority\"/>\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Arg name=\"formTemplate\" value=\"ref:formTemplate\"/>\n    <Arg name=\"requiredOwner\" value=\"ref:sessionOwner\"/>\n    <Arg name=\"workItemComments\" value=\"ref:workItemComments\"/>\n    <Description>\n      Call the standard subprocess for assembling, presenting, and assimilating\n      provisioning forms that can be filled out before approvals.\n    </Description>\n    <Return name=\"project\" to=\"project\"/>\n    <WorkflowRef>\n      <Reference class=\"sailpoint.object.Workflow\" id=\"4028ab1063f427af0163f429029a017e\" name=\"Do Provisioning Forms\"/>\n    </WorkflowRef>\n    <Transition to=\"end\"/>\n  </Step>\n  <Step icon=\"Stop\" name=\"end\" posX=\"740\" posY=\"12\"/>\n</List>\n',' ',' ','Identity,IdentityRequest'),('4028ab1063fdfb6d0163fdfc69380036',1528974567736,1739425376824,NULL,NULL,NULL,'Identity Request Approve',NULL,'Subprocess',NULL,_binary '\0',_binary '\0',_binary '\0',0,_binary '\0',NULL,NULL,'<List>\n  <Variable input=\"true\" name=\"identityName\" required=\"true\">\n    <Description>\n      The name of the identity object being modified.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"batchRequestId\">\n    <Description>\n      Batch request id.\n    </Description>\n  </Variable>\n  <Variable initializer=\"script:(identityDisplayName != void) ? identityDisplayName : resolveDisplayName(identityName)\" input=\"true\" name=\"identityDisplayName\">\n    <Description>\n      The displayName of the identity being updated.\n      This may be passed in, if not the script queries for this\n      using a projection query and falls back to the name.\n    </Description>\n  </Variable>\n  <Variable initializer=\"script:getIdentityProperty(identityName, &quot;id&quot;)\" input=\"true\" name=\"identityId\">\n    <Description>\n      The id of the identity being updated.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"identityRequestId\">\n    <Description>\n       The ID of the IdentityRequest for this request.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"approvalScheme\" required=\"true\">\n    <Description>\n      A csv string that specifies how approvals should be generated for\n      the incoming request.\n\n      The value can be any of the values below, combined together but\n      are always processed in this order:\n\n      1. manager\n      2. owner\n      3. securityOfficer\n\n      Any rejected items from previous approvals will be omitted from the\n      next phase of approvers.\n\n      none - disabled approvals\n\n      owner - the object owner gets the approval\n              For Role approvals this is the Role object owner. When dealing\n              with things like Unlock and other account level changes\n              the approvals will be assigned to the the application owner.\n\n      manager - The manager will get all approvals\n\n      securityOfficer - The identity named security the security in the variable\n                        securityOfficerName.\n\n    </Description>\n  </Variable>\n  <Variable initializer=\"serial\" input=\"true\" name=\"approvalMode\">\n    <Description>\n     A string that specifies how we should handle the approvals.\n\n     By default this is serial since most of these request with\n     the exception of manager transfers will have only one approver.\n\n     parallel\n       Approvals are processed concurrently and there must be consensus,\n       we wait for all approvers to approve.  The first approver that\n       rejects terminates the entire approval.\n\n     parallelPoll\n       Approvals are processed concurrently but consensus is not required.\n       All approvals will be processed, we don\'t stop if there are any\n       rejections.\n\n     serial\n       Approvals are processed one at a time and there must be consensus.\n       The first approver that rejects terminates the entire approval.\n\n     serialPoll\n       Approvals are processed in order but consensus is not required.\n       All approvals will be processed, we don\'t stop if there are any\n       rejections.  In effect we are \"taking a poll\" of the approvers.\n\n     any\n      Approvals are processed concurrently, the first approver to\n      respond makes the decision for the group.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"fallbackApprover\" required=\"true\">\n    <Description>\n      A String that specifies the name of the Identity that will\n      be assigned any approvals where the owner of the approver\n      can\'t be resolved. Example if the scheme is \"owner\" and the\n      application doesn\'t specify and owner.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"securityOfficerName\">\n    <Description>\n       The name of the identity that will be sent approvals\n       during security officer approvals.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"batchRequestApprover\">\n    <Description>\n       Identity responsible for approving batch requests.\n    </Description>\n  </Variable>\n  <Variable initializer=\"false\" input=\"true\" name=\"includeRejectedItemsInApprovalChain\">\n    <Description>\n       When using multi approvalSchemes a flag to indicate if new\n       approvals in the chain will include rejected items.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"policyViolations\">\n    <Description>\n       List of policy violations that were found during our initial policy scan.\n       This list is passed into each work item so the approvers can see\n       pending violations.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"flow\">\n    <Description>\n      The name of the LCM flow that launched this workflow.\n\n      This is one of these values:\n\n      AccountsRequest\n      EntitlementsRequest\n      RolesRequest\n      IdentityCreateRequest\n      IdentityEditRequest\n      ForgotPassword\n      ExpiredPassword\n      PasswordRequest\n\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"trace\">\n    <Description>\n      Used for debugging this subprocess and when set to true trace\n      statements will be sent to stdout.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"approvalSet\" output=\"true\">\n    <Description>\n       This attributes is set during the \"Build Approval Set\" step,\n       which builds this list by going through the ProvisioningPlan\n       to build the line items that need to be approved,\n\n       This variable includes all ApprovalItems that are part of\n       the request process and is updated during the AfterScript\n       of the approval process by assimilating the decisions\n       and comments from the Approvals copy of the ApprovalItem.\n    </Description>\n  </Variable>\n  <Variable initializer=\"LCM Identity Update Approval\" input=\"true\" name=\"managerEmailTemplate\">\n    <Description>\n       Name of the email template to use when manager of pending approvals.\n    </Description>\n  </Variable>\n  <Variable initializer=\"LCM Identity Update Approval\" input=\"true\" name=\"ownerEmailTemplate\">\n    <Description>\n       Name of the email template to use when notifying the owner of pending approvals.\n    </Description>\n  </Variable>\n  <Variable initializer=\"LCM Identity Update Approval\" input=\"true\" name=\"securityOfficerEmailTemplate\">\n    <Description>\n       Name of the email template to use when notifying the security officer of pending approvals.\n    </Description>\n  </Variable>\n  <Variable initializer=\"Batch Approval\" input=\"true\" name=\"batchApproverEmailTemplate\">\n    <Description>\n       Name of the email template to use when notifying the batch approver of pending approval.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"workItemComments\">\n    <Description>\n       List of global workflow comments to be appended to the approval workitem.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"managerElectronicSignature\">\n    <Description>\n       The name of the electronic signature object that should be used when workitems\n       are completed by a manager.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"ownerElectronicSignature\">\n    <Description>\n       The name of the electronic signature object that should be used when workitems\n       are completed by object owners.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"securityOfficerElectronicSignature\">\n    <Description>\n       The name of the electronic signature object that should be used when workitems\n       are completed by the security officer.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"batchApproverElectronicSignature\">\n    <Description>\n       The name of the electronic signature object that should be used when workitems\n       are completed by the batch approver when performing batch operations.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"priority\">\n    <Description>\n      String version of WorkItem.level that will be used\n      to set the priority of the workitems generated\n      as part of any generated approvals.\n    </Description>\n  </Variable>\n  <Variable name=\"tmpApprovalSet\">\n    <Description>\n       Temporary and transient  ApprovalSet used to hold filtered\n       approval sets as we transition through the approval chain.\n    </Description>\n  </Variable>\n  <Variable name=\"tmpApproval\">\n    <Description>\n       Temporary and transient list of Approval object used to hold filtered\n       approval as we transition through the approval chain.\n    </Description>\n  </Variable>\n</List>\n',NULL,'<List>\n  <Step icon=\"Start\" name=\"Start\" posX=\"28\" posY=\"10\">\n    <Transition to=\"Start Approval\"/>\n  </Step>\n  <Step icon=\"Task\" name=\"Start Approval\" posX=\"28\" posY=\"149\">\n    <Transition to=\"Manager Approval\" when=\"script:isApprovalEnabled(approvalScheme, &quot;manager&quot;)\"/>\n    <Transition to=\"Build Owner ApprovalSet\" when=\"script:isApprovalEnabled(approvalScheme, &quot;owner&quot;)\"/>\n    <Transition to=\"Build Security Officer ApprovalSet\" when=\"script:isApprovalEnabled(approvalScheme, &quot;securityOfficer&quot;)\"/>\n    <Transition to=\"Batch Request Approval\" when=\"script:isApprovalEnabled(approvalScheme, &quot;batchRequest&quot;)\"/>\n    <Transition to=\"end\"/>\n  </Step>\n  <Step icon=\"Approval\" name=\"Manager Approval\" posX=\"172\" posY=\"7\">\n    <Approval mode=\"serial\" owner=\"call:buildManagerApproval\" renderer=\"lcmWorkItemRenderer.xhtml\" send=\"approvalSet,identityDisplayName,identityName,policyViolations\">\n      <AfterScript>\n        <Source>\n          import sailpoint.workflow.IdentityRequestLibrary;\n\n            assimilateWorkItemApprovalSet(wfcontext, item, approvalSet);\n            IdentityRequestLibrary.assimilateWorkItemApprovalSetToIdentityRequest(wfcontext, approvalSet);\n            auditDecisions(item);\n        </Source>\n      </AfterScript>\n      <Arg name=\"workItemIdentityRequestId\" value=\"ref:identityRequestId\"/>\n      <Arg name=\"workItemElectronicSignature\" value=\"ref:managerElectronicSignature\"/>\n      <Arg name=\"workItemRequester\" value=\"$(launcher)\"/>\n      <Arg name=\"workItemDescription\" value=\"Manager Approval - Account Changes for User: $(identityDisplayName)\"/>\n      <Arg name=\"workItemNotificationTemplate\" value=\"ref:managerEmailTemplate\"/>\n      <Arg name=\"workItemTargetClass\" value=\"sailpoint.object.Identity\"/>\n      <Arg name=\"workItemTargetName\" value=\"$(identityName)\"/>\n      <Arg name=\"workItemTargetId\" value=\"$(identityId)\"/>\n      <Arg name=\"workItemPriority\" value=\"ref:priority\"/>\n    </Approval>\n    <Description>\n      If approvalScheme contains manager, send an approval for all\n      requested items in the request. This approval will get the entire\n      approvalSet as part of the workitem.\n    </Description>\n    <Transition to=\"Build Owner ApprovalSet\" when=\"script:isApprovalEnabled(approvalScheme, &quot;owner&quot;)\"/>\n    <Transition to=\"Build Security Officer ApprovalSet\" when=\"script:isApprovalEnabled(approvalScheme, &quot;securityOfficer&quot;)\"/>\n    <Transition to=\"end\"/>\n  </Step>\n  <Step action=\"script:filterApprovalSet(approvalSet,includeRejectedItemsInApprovalChain,false)\" icon=\"Task\" name=\"Build Owner ApprovalSet\" posX=\"237\" posY=\"212\" resultVariable=\"tmpApprovalSet\">\n    <Transition to=\"Owner Approval\"/>\n  </Step>\n  <Step icon=\"Approval\" name=\"Owner Approval\" posX=\"389\" posY=\"211\">\n    <Approval mode=\"ref:approvalMode\" owner=\"call:buildOwnerApprovals\" renderer=\"lcmWorkItemRenderer.xhtml\" send=\"identityDisplayName,identityName,policyViolations\">\n      <AfterScript>\n        <Source>\n\n          import sailpoint.workflow.IdentityRequestLibrary;\n\n          if ( item == null )\n              return;\n\n          assimilateWorkItemApprovalSet(wfcontext, item, approvalSet);\n          IdentityRequestLibrary.assimilateWorkItemApprovalSetToIdentityRequest(wfcontext, approvalSet);\n          auditDecisions(item);\n        </Source>\n      </AfterScript>\n      <Arg name=\"approvalSet\" value=\"ref:tmpApprovalSet\"/>\n      <Arg name=\"workItemDescription\" value=\"Owner Approval - Account Changes for User: $(identityDisplayName)\"/>\n      <Arg name=\"workItemElectronicSignature\" value=\"ref:ownerElectronicSignature\"/>\n      <Arg name=\"workItemIdentityRequestId\" value=\"ref:identityRequestId\"/>\n      <Arg name=\"workItemNotificationTemplate\" value=\"ref:ownerEmailTemplate\"/>\n      <Arg name=\"workItemPriority\" value=\"ref:priority\"/>\n      <Arg name=\"workItemRequester\" value=\"$(launcher)\"/>\n    </Approval>\n    <Description>\n      If approvalScheme contains owner, send approvals out to all\n      of the owners for items in the request. The main approvalSet\n      is broken up into owner specific approval sets and assimilated\n      back into the main approvalset as decisions are made.\n\n      The previous decisions made on the items will be present along\n      with any comments made by the manager.\n\n      This step will be skipped if all items are\n      rejected and includeRejectedItemsInApprovalChain is set to false\n    </Description>\n    <Transition to=\"Build Security Officer ApprovalSet\" when=\"script:isApprovalEnabled(approvalScheme, &quot;securityOfficer&quot;)\"/>\n    <Transition to=\"end\"/>\n  </Step>\n  <Step action=\"script:filterApprovalSet(approvalSet,includeRejectedItemsInApprovalChain,false)\" icon=\"Task\" name=\"Build Security Officer ApprovalSet\" posX=\"309\" posY=\"61\" resultVariable=\"tmpApprovalSet\">\n    <Transition to=\"Security Officer Approval\"/>\n  </Step>\n  <Step condition=\"script:!isNull(tmpApprovalSet) &amp;&amp; !tmpApprovalSet.isEmpty()\" icon=\"Approval\" name=\"Security Officer Approval\" posX=\"698\" posY=\"59\">\n    <Approval mode=\"serial\" owner=\"call:buildSecurityOfficerApproval\" renderer=\"lcmWorkItemRenderer.xhtml\" send=\"identityDisplayName,identityName,policyViolations\">\n      <AfterScript>\n        <Source>\n          import sailpoint.workflow.IdentityRequestLibrary;\n\n          assimilateWorkItemApprovalSet(wfcontext, item, approvalSet);\n          IdentityRequestLibrary.assimilateWorkItemApprovalSetToIdentityRequest(wfcontext, approvalSet);\n        </Source>\n      </AfterScript>\n      <Arg name=\"approvalSet\" value=\"ref:tmpApprovalSet\"/>\n      <Arg name=\"workItemElectronicSignature\" value=\"ref:securityOfficerElectronicSignature\"/>\n      <Arg name=\"workItemIdentityRequestId\" value=\"ref:identityRequestId\"/>\n      <Arg name=\"workItemRequester\" value=\"$(launcher)\"/>\n      <Arg name=\"workItemDescription\" value=\"Security Officer Approval - Account Changes for User: $(identityDisplayName)\"/>\n      <Arg name=\"workItemNotificationTemplate\" value=\"ref:securityOfficerEmailTemplate\"/>\n      <Arg name=\"workItemPriority\" value=\"ref:priority\"/>\n      <Arg name=\"workItemTargetClass\" value=\"sailpoint.object.Identity\"/>\n      <Arg name=\"workItemTargetName\" value=\"ref:identityName\"/>\n      <Arg name=\"workItemTargetId\" value=\"ref:identityId\"/>\n    </Approval>\n    <Description>\n     If approvalScheme contains securityOfficer and the securityOfficeName is\n     non null this step will send items with decisions and comments\n     from the cart for final decision.\n\n     The previous decisions made on the item will be present along with\n     any comments made in previous approval steps.\n    </Description>\n    <Transition to=\"Batch Request Approval\"/>\n  </Step>\n  <Step icon=\"Approval\" name=\"Batch Request Approval\" posX=\"833\" posY=\"59\">\n    <Approval mode=\"serial\" owner=\"ref:batchRequestApprover\" renderer=\"lcmWorkItemRenderer.xhtml\" send=\"identityDisplayName,identityName\">\n      <AfterScript>\n        <Source>\n          assimilateWorkItemApprovalSet(wfcontext, item, approvalSet);\n        </Source>\n      </AfterScript>\n      <Arg name=\"approvalSet\" value=\"ref:approvalSet\"/>\n      <Arg name=\"workItemDescription\" value=\"Batch Request Approval requested by $(launcher)\"/>\n      <Arg name=\"workItemElectronicSignature\" value=\"ref:batchApproverElectronicSignature\"/>\n      <Arg name=\"workItemIdentityRequestId\" value=\"ref:identityRequestId\"/>\n      <Arg name=\"workItemNotificationTemplate\" value=\"ref:batchApproverEmailTemplate\"/>\n      <Arg name=\"workItemPriority\" value=\"ref:priority\"/>\n      <Arg name=\"workItemRequester\" value=\"$(launcher)\"/>\n      <Arg name=\"workItemTargetClass\" value=\"sailpoint.object.BatchRequest\"/>\n      <Arg name=\"workItemTargetId\" value=\"ref:batchRequestId\"/>\n    </Approval>\n    <Description>\n     If approvalScheme contains batchRequest and the batchRequestApprover is\n     non null this step will send items with decisions and comments\n     from the cart for final decision.\n    </Description>\n    <Transition to=\"end\"/>\n  </Step>\n  <Step icon=\"Stop\" name=\"end\" posX=\"920\" posY=\"1\"/>\n</List>\n',' ',' ',NULL),('4028ab1063fdfb6d0163fdfc69b30037',1528974567859,1739425377265,NULL,NULL,NULL,'Identity Request Notify',NULL,'Subprocess',NULL,_binary '\0',_binary '\0',_binary '\0',0,_binary '\0',NULL,NULL,'<List>\n  <Variable input=\"true\" name=\"identityName\" required=\"true\">\n    <Description>\n      The name of the identity object being modified.\n    </Description>\n  </Variable>\n  <Variable initializer=\"script:(identityDisplayName != void) ? identityDisplayName : resolveDisplayName(identityName)\" input=\"true\" name=\"identityDisplayName\">\n    <Description>\n      The displayName of the identity being updated.\n      This may be passed in, if not the script queries for this\n      using a projection query and falls back to the name.\n    </Description>\n  </Variable>\n  <Variable initializer=\"user,requester\" input=\"true\" name=\"notificationScheme\">\n    <Description>\n     A string that specifies who should be notified when the request has been complete.\n     The value can be null or a csv of one or more of the following options.\n\n     none or null\n       disable notifications\n\n     user\n       Identity that is being update will be notified.\n\n     manager\n       The manager of the Identity that is being updated will be notified.\n\n     requester\n       The person that has requested the update will be notified.\n\n     securityOfficer\n       The identity named in the securityOfficerNameVariable will be notified.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"securityOfficerName\">\n    <Description>\n      The name of the security officer identity.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"policyViolations\">\n    <Description>\n       List of policy violations that were found during our initial policy scan.\n       This list is passed into each work item so the approvers can see\n       pending violations.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"flow\">\n    <Description>\n      The name of the LCM flow that launched this workflow.\n\n      This is one of these values:\n\n      AccountsRequest\n      EntitlementsRequest\n      RolesRequest\n      IdentityCreateRequest\n      IdentityEditRequest\n      ForgotPassword\n      ExpiredPassword\n      PasswordRequest\n\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"trace\">\n    <Description>\n      Used for debugging this subprocess and when set to true trace\n      statements will be sent to stdout.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"approvalScheme\">\n    <Description>\n       A string that specifies how approvals should be generated for\n       this workflow.\n       \n       This is usefull for the notification subprocess incase\n       the template wants to render specific text in the email\n       when certain schemes are configured.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"approvalSet\">\n    <Description>\n       This attributes is set during the \"Build Approval Set\" step,\n       which builds this list by going through the ProvisioningPlan\n       to build the line items that need to be approved,\n\n       This variable includes all ApprovalItems that are part of\n       the request process and is updated during the AfterScript\n       of the approval process by assimilating the decisions\n       and comments from the Approvals copy of the ApprovalItem.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"plan\">\n    <Description>The provisioning plan for the request.</Description>\n  </Variable>\n  <Variable initializer=\"LCM User Notification\" input=\"true\" name=\"userEmailTemplate\">\n    <Description>\n       Name of the email template to use when notifying the user.\n    </Description>\n  </Variable>\n  <Variable initializer=\"LCM Manager Notification\" input=\"true\" name=\"managerEmailTemplate\">\n    <Description>\n       Name of the email template to use when notifying the manager.\n    </Description>\n  </Variable>\n  <Variable initializer=\"LCM Requester Notification\" input=\"true\" name=\"requesterEmailTemplate\">\n    <Description>\n       Name of the email template to use when notifying the requester.\n    </Description>\n  </Variable>\n  <Variable initializer=\"LCM Manager Notification\" input=\"true\" name=\"securityOfficerEmailTemplate\">\n    <Description>\n       Name of the email template to use when notifying the security officer.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"priority\">\n    <Description>\n      String version of WorkItem.level that was used\n      to set the priority on the access request and\n      any workitems.\n    </Description>\n  </Variable>\n</List>\n',NULL,'<List>\n  <Step icon=\"Start\" name=\"Start\" posX=\"28\" posY=\"10\">\n    <Transition to=\"Notify User\"/>\n  </Step>\n  <Step action=\"call:sendEmail\" condition=\"script:Util.csvToList(notificationScheme).contains(&quot;user&quot;)\" icon=\"Email\" name=\"Notify User\" posX=\"98\" posY=\"10\">\n    <Arg name=\"template\" value=\"ref:userEmailTemplate\"/>\n    <Arg name=\"to\" value=\"script:getUserEmail(identityName, plan)\"/>\n    <Arg name=\"approvalSet\" value=\"call:prepareApprovalSetForNotification\"/>\n    <Transition to=\"Notify Requester\"/>\n  </Step>\n  <Step action=\"call:sendEmail\" condition=\"script:Util.csvToList(notificationScheme).contains(&quot;requester&quot;)\" icon=\"Email\" name=\"Notify Requester\" posX=\"216\" posY=\"10\">\n    <Arg name=\"template\" value=\"ref:requesterEmailTemplate\"/>\n    <Arg name=\"to\" value=\"script:getEmail(launcher)\"/>\n    <Arg name=\"approvalSet\" value=\"call:prepareApprovalSetForNotification\"/>\n    <Transition to=\"Notify Manager\"/>\n  </Step>\n  <Step action=\"call:sendEmail\" condition=\"script:Util.csvToList(notificationScheme).contains(&quot;manager&quot;)\" icon=\"Email\" name=\"Notify Manager\" posX=\"351\" posY=\"10\">\n    <Arg name=\"template\" value=\"ref:managerEmailTemplate\"/>\n    <Arg name=\"to\" value=\"script:getManagersEmail(identityName, plan)\"/>\n    <Arg name=\"approvalSet\" value=\"call:prepareApprovalSetForNotification\"/>\n    <Transition to=\"Notify Security Officer\"/>\n  </Step>\n  <Step action=\"call:sendEmail\" condition=\"script:Util.csvToList(notificationScheme).contains(&quot;securityOfficer&quot;)\" icon=\"Email\" name=\"Notify Security Officer\" posX=\"483\" posY=\"10\">\n    <Arg name=\"template\" value=\"ref:securityOfficerEmailTemplate\"/>\n    <Arg name=\"to\" value=\"script:getEmail(securityOfficerName)\"/>\n    <Arg name=\"approvalSet\" value=\"call:prepareApprovalSetForNotification\"/>\n    <Transition to=\"end\"/>\n  </Step>\n  <Step icon=\"Stop\" name=\"end\" posX=\"602\" posY=\"10\"/>\n</List>\n',' ',' ','IdentityRequest'),('4028ab1063fdfb6d0163fdfc6aa00038',1528974568096,1739425377383,NULL,NULL,NULL,'Identity Request Provision','\n      This workflow subprocess is used to provision a\n      project.\n\n      This subprocess was added in 5.5 in an effort to\n      break groups of related steps into a single call\n      from the top level workflow.\n\n      It now encapsulates the following services:\n\n        - Process approval decisions\n           -- which recompiles the project\n        - Post provisioning forms for user\'s outside of the requester\n\n  ','Subprocess',NULL,_binary '\0',_binary '\0',_binary '\0',0,_binary '\0',NULL,NULL,'<List>\n  <Variable editable=\"true\" initializer=\"false\" input=\"true\" name=\"optimisticProvisioning\">\n    <Description>\n      Set to true to enable optimistic provisioning.  This will cause\n      changes to the entitlements compiled from role assignments to be\n      applied immediately to the identity cube rather than waiting\n      for the next refresh/reaggregation after the provisioning system\n      completes the request.\n    </Description>\n  </Variable>\n  <Variable editable=\"true\" initializer=\"true\" input=\"true\" name=\"foregroundProvisioning\">\n    <Description>\n      Normally provisioning is done in a step that uses the \"background\"\n      option to force the workflow to be suspend and be resumed in a\n      background task thread.  This prevents the browser session from\n      hanging since provision can sometimes take a long time.  For demos\n      and testing it can be better to do this in the foreground so that\n      provisioning will have been performed when control is returned to the\n      user.  This prevents having to run the Perform Maintenance task to\n      see the resutls of the request.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"fallbackApprover\" required=\"true\">\n    <Description>\n      A String that specifies the name of the Identity that will\n      be assigned any manual actions  where the owner of the approver\n      can\'t be resolved.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"approvalSet\">\n    <Description>\n       This attributes is set during the \"Build Approval Set\" step,\n       which builds this list by going through the ProvisioningPlan\n       to build the line items that need to be approved,\n\n       This variable includes all ApprovalItems that are part of\n       the request process and is updated during the AfterScript\n       of the approval process by assimilating the decisions\n       and comments from the Approvals copy of the ApprovalItem.\n    </Description>\n  </Variable>\n  <Variable initializer=\"Identity Update\" input=\"true\" name=\"formTemplate\">\n    <Description>\n      Template used when processing provisioning forms.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"trace\">\n    <Description>\n      Used for debugging this workflow and when set to true trace\n      will be sent to stdout.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"plan\">\n    <Description>\n      The plan may be passed in from the Create/Update Identity workflows.\n      Otherwise the passed in project\'s master plan is typically used.\n    </Description>\n  </Variable>\n  <Variable initializer=\"true\" input=\"true\" name=\"recompile\">\n    <Description>\n       Option that can be used to prevent recompilation after approval\n       changes have been applied to the plan/project.\n    </Description>\n  </Variable>\n  <Variable initializer=\"Pending Manual Changes\" input=\"true\" name=\"manualActionsEmailTemplate\">\n    <Description>\n       Option that can be used to prevent recompilation after approval\n       changes have been applied to the plan/project.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"workItemComments\">\n    <Description>\n       Global comments which should be appended to each approval item.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"approvalScheme\">\n    <Description>\n      A csv string that specifies how approvals should be generated for\n      the incoming request.\n\n      The value can be any of the values below, combined together but\n      are always processed in this order:\n\n      1. manager\n      2. owner\n      3. securityOfficer\n\n      Any rejected items from previous approvals will be omitted from the\n      next phase of approvers.\n\n      none - disabled approvals\n\n      owner - the object owner gets the approval\n              For Role approvals this is the Role object owner. When dealing\n              with things like Unlock and other account level changes\n              the approvals will be assigned to the the application owner.\n\n      manager - The manager will get all approvals\n\n      securityOfficer - The identity named security the security in the variable\n                        securityOfficerName.\n\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"identityRequestId\">\n    <Description>\n       The ID of the IdentityRequest.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"priority\">\n    <Description>\n      String version of WorkItem.level that will be used\n      to set the priority on any generated workitems for\n      of forms or manual actions.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"splitProvisioning\">\n    <Description>\n          True to denote this is a partial of the full ProvisioningPlan. This should be true in the case of LCM Provisioning\n          splits.\n      </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"project\" output=\"true\">\n    <Description>\n      ProvisioningProject which is just a compiled version of the ProvisioningPlan.\n    </Description>\n  </Variable>\n</List>\n',NULL,'<List>\n  <Step icon=\"Start\" name=\"Start\" posX=\"15\" posY=\"12\">\n    <Transition to=\"Start Provisioning Process\"/>\n  </Step>\n  <Step action=\"call:addMessage\" icon=\"Message\" name=\"Start Provisioning Process\" posX=\"130\" posY=\"12\">\n    <Arg name=\"message\" value=\"Modifications to $(identityDisplayName) are being provisioned.\"/>\n    <Transition to=\"Process Approval Decisions\"/>\n  </Step>\n  <Step action=\"call:processApprovalDecisions\" condition=\"script:!isNull(approvalSet)\" icon=\"Task\" name=\"Process Approval Decisions\" posX=\"309\" posY=\"11\" resultVariable=\"project\">\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Arg name=\"plan\" value=\"ref:plan\"/>\n    <Arg name=\"approvalSet\" value=\"ref:approvalSet\"/>\n    <Arg name=\"recompile\" value=\"ref:recompile\"/>\n    <Arg name=\"disableAudit\" value=\"true\"/>\n    <Description>\n      Dig through the ApprovalSets found in the Approval step and build an audit\n      trail for the decisions.  Then for any rejected items remove them from\n      the provisioning plan so they are not part of the provisioning request.\n    </Description>\n    <Transition to=\"Do Provisioning Forms Post-Approval\"/>\n  </Step>\n  <Step icon=\"Task\" name=\"Do Provisioning Forms Post-Approval\" posX=\"511\" posY=\"12\">\n    <Arg name=\"identityName\" value=\"ref:identityName\"/>\n    <Arg name=\"identityDisplayName\" value=\"ref:identityDisplayName\"/>\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Arg name=\"priority\" value=\"ref:priority\"/>\n    <Arg name=\"formTemplate\" value=\"ref:formTemplate\"/>\n    <Arg name=\"preferredOwner\" value=\"ref:sessionOwner\"/>\n    <Description>\n      Call the standard subprocess for assembling, presenting, and assimilating\n      provisioning forms that remain after approvals.\n    </Description>\n    <Return name=\"project\" to=\"project\"/>\n    <WorkflowRef>\n      <Reference class=\"sailpoint.object.Workflow\" id=\"4028ab1063f427af0163f429029a017e\" name=\"Do Provisioning Forms\"/>\n    </WorkflowRef>\n    <Transition to=\"Pre Provision\"/>\n  </Step>\n  <Step action=\"call:assimilateAccountIdChanges\" icon=\"Task\" name=\"Pre Provision\" posX=\"682\" posY=\"13\" resultVariable=\"approvalSet\">\n    <Arg name=\"approvalSet\" value=\"ref:approvalSet\"/>\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Description>\n      Before we approve assimilate the result of any accountId changes that may have been compiled\n      into the plan back onto the ApprovalSet.\n    </Description>\n    <Transition to=\"Refresh Identity Request\"/>\n  </Step>\n  <Step action=\"call:refreshIdentityRequestAfterApproval\" icon=\"Task\" name=\"Refresh Identity Request\" posX=\"813\" posY=\"13\">\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Arg name=\"splitProvisioning\" value=\"ref:splitProvisioning\"/>\n    <Description>\n       Assimilate any approval summaries that were built up during\n       the provisioning process.\n    </Description>\n    <Transition to=\"Provision\"/>\n  </Step>\n  <Step icon=\"Task\" name=\"Provision\" posX=\"941\" posY=\"13\">\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Arg name=\"foregroundProvisioning\" value=\"ref:foregroundProvisioning\"/>\n    <Arg name=\"trace\" value=\"ref:trace\"/>\n    <Arg name=\"identityRequestId\" value=\"ref:identityRequestId\"/>\n    <Arg name=\"splitProvisioning\" value=\"ref:splitProvisioning\"/>\n    <Description>\n      Call the standard subprocess to initialize the request, this includes\n      auditing, building the approvalset, compiling the plan into\n       project and checking policy violations.\n    </Description>\n    <Return name=\"retries\" to=\"retries\"/>\n    <Return name=\"project\" to=\"project\"/>\n    <WorkflowRef>\n      <Reference class=\"sailpoint.object.Workflow\" id=\"4028ab1063f427af0163f42903ed0181\" name=\"Provision with retries\"/>\n    </WorkflowRef>\n    <Transition to=\"Wait for Queued Items\"/>\n  </Step>\n  <Step icon=\"Task\" name=\"Wait for Queued Items\" posX=\"1074\" posY=\"13\">\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Arg name=\"splitProvisioning\" value=\"ref:splitProvisioning\"/>\n    <Arg name=\"trace\" value=\"ref:trace\"/>\n    <Return name=\"project\" to=\"project\"/>\n    <WorkflowRef>\n      <Reference class=\"sailpoint.object.Workflow\" id=\"4028ab1063f427af0163f42904560182\" name=\"Check Status of queued items\"/>\n    </WorkflowRef>\n    <Transition to=\"Post Provision\"/>\n  </Step>\n  <Step icon=\"Task\" name=\"Post Provision\" posX=\"1205\" posY=\"13\">\n    <Script>\n      <Source>\n        import sailpoint.api.ObjectUtil;\n        import sailpoint.tools.Util;\n        import sailpoint.object.ProvisioningProject;\n\n        if ( approvalSet != null ) {\n            // Set state to pending\n            approvalSet.initializeProvisioningState();\n            if ( Util.otob(trace) ) {\n                 System.out.println(\"ApprovalSet:\\n\" + approvalSet.toXml());\n            }\n        }\n        if ( project != null ) {\n            if ( Util.otob(trace) ) {\n                 // clone and scrub the project so passwords are not visible\n                 ProvisioningProject clonedProject = project.deepCopy(wfcontext.getSailPointContext());\n                 ObjectUtil.scrubPasswords(clonedProject);\n                 System.out.println(\"Project Executed in identitiy:\\n\" + clonedProject.toXml());\n            }\n        }\n      </Source>\n    </Script>\n    <Transition to=\"Manual Actions\"/>\n  </Step>\n  <Step condition=\"script:project.getUnmanagedPlan() != null\" icon=\"Approval\" name=\"Manual Actions\" posX=\"1316\" posY=\"13\">\n    <Approval mode=\"parallelPoll\" owner=\"rule:Build Manual Action Approvals\" renderer=\"lcmManualActionsRenderer.xhtml\" send=\"identityDisplayName,identityName,policyViolations\">\n      <AfterScript>\n        <Source>\n          import sailpoint.object.ApprovalSet;\n          import sailpoint.object.ApprovalItem;\n          import sailpoint.object.WorkItem;\n          import sailpoint.object.WorkItem;\n          import sailpoint.workflow.IdentityRequestLibrary;\n\n          if (item == null) {\n              // must not be a leaf approval...\n              return;\n          }\n\n          // mark all of the items finished once the item is complete\n          ApprovalSet set = (ApprovalSet)item.get(\"approvalSet\");\n          if ( set != null ) {\n              List approvalItems = set.getItems();\n              for ( ApprovalItem approvalItem : approvalItems ) {\n                  approvalItem.setState(WorkItem.State.Finished);\n                  // update identity request provisioning state\n                  IdentityRequestLibrary.updateIdentityRequestItemProvisioningState(approvalItem, wfcontext);\n              }\n          }\n\n          // Audit the manual change\n          auditManualAction(item);\n        </Source>\n      </AfterScript>\n      <Arg name=\"workItemRequester\" value=\"$(launcher)\"/>\n      <Arg name=\"workItemDescription\" value=\"Manual Changes requested for User: $(identityDisplayName)\"/>\n      <Arg name=\"workItemPriority\" value=\"ref:priority\"/>\n      <Arg name=\"workItemType\" value=\"ManualAction\"/>\n      <Arg name=\"workItemNotificationTemplate\" value=\"ref:manualActionsEmailTemplate\"/>\n    </Approval>\n    <Transition to=\"end\"/>\n  </Step>\n  <Step icon=\"Stop\" name=\"end\" posX=\"1419\" posY=\"13\"/>\n</List>\n',' ',' ','Identity,IdentityRequest'),('4028ab1063fdfb6d0163fdfc6b2b0039',1528974568239,1739425377001,NULL,NULL,NULL,'Identity Request Finalize',NULL,'Subprocess',NULL,_binary '\0',_binary '\0',_binary '\0',0,_binary '\0',NULL,NULL,'<List>\n  <Variable name=\"project\">\n    <Description>\n      ProvisioningProject which is just a compiled version of the ProvisioningPlan.\n      From the project the IdentityRequestItem model will be updated.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"identityRequestId\" output=\"true\">\n    <Description>\n       The ID ot the identitytRequestId.\n\n       This step will update the identityRequest status and completion\n       status.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"approvalSet\">\n    <Description>\n       This attributes is set during the \"Build Approval Set\" step,\n       which builds this list by going through the ProvisioningPlan\n       to build the line items that need to be approved,\n\n       This variable includes all ApprovalItems that are part of\n       the request process and is updated during the AfterScript\n       of the approval process by assimilating the decisions\n       and comments from the Approvals copy of the ApprovalItem.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"trace\">\n    <Description>\n      Used for debugging this subprocess and when set to true trace\n      statements will be sent to stdout.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"ticketManagementApplication\">\n    <Description>\n      Name of the application that can handle ticket requests.\n      When non-null the Manage Ticket Steps will be visited to open\n      tickets during the workflow lifecycle.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"ticketDataGenerationRule\">\n    <Description>\n      A rule that builds up the ticketing provisioning plan based on the workflow\n      context.  This rule gets all of the arguments to this subprocess\n      plus the curreent workflow context.  The rule can return either a\n      ProvisioningPlan or a Map of name value pairs.\n\n      The rule name can be specified here on the subprocess or on the\n      ticketManagementApplication config under the same name as this\n      variable.\n    </Description>\n  </Variable>\n  <Variable name=\"autoVerifyIdentityRequest\">\n    <Description>\n      Flag to indicate when finishing the request we should\n      automatically mark it verified. Currently used by\n      the change password workflow so we don\'t wait to\n      verify since passwords can\'t be verifed.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"priority\">\n    <Description>\n      String version of WorkItem.level that was used\n      to set the priority of the IdentityRequest and\n      workitems.\n    </Description>\n  </Variable>\n</List>\n',NULL,'<List>\n  <Step icon=\"Start\" name=\"Start\" posX=\"15\" posY=\"12\">\n    <Transition to=\"Audit Completion\"/>\n  </Step>\n  <Step action=\"call:auditLCMCompletion\" icon=\"Audit\" name=\"Audit Completion\" posX=\"115\" posY=\"12\">\n    <Arg name=\"approvalSet\" value=\"ref:approvalSet\"/>\n    <Transition to=\"Complete Identity Request\"/>\n  </Step>\n  <Step action=\"call:completeIdentityRequest\" icon=\"Task\" name=\"Complete Identity Request\" posX=\"261\" posY=\"12\" resultVariable=\"identityRequest\">\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Arg name=\"approvalSet\" value=\"ref:approvalSet\"/>\n    <Arg name=\"autoVerify\" value=\"$(autoVerifyIdentityRequest)\"/>\n    <Arg name=\"identityRequestId\" value=\"ref:identityRequestId\"/>\n    <Transition to=\"Update Ticket On Complete\"/>\n  </Step>\n  <Step condition=\"script:(ticketManagementApplication != null)\" icon=\"Task\" name=\"Update Ticket On Complete\" posX=\"443\" posY=\"12\">\n    <Arg name=\"action\" value=\"complete\"/>\n    <Arg name=\"source\" value=\"ref:source\"/>\n    <Arg name=\"priority\" value=\"ref:priority\"/>\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Arg name=\"ticketManagementApplication\" value=\"ref:ticketManagementApplication\"/>\n    <Arg name=\"identityRequestId\" value=\"ref:identityRequestId\"/>\n    <Arg name=\"ticketDataGenerationRule\" value=\"\"/>\n    <Arg name=\"trace\" value=\"ref:trace\"/>\n    <Description>\n      Call a subprocess to update the ticket in the ticketManagementApplication is non-null.\n\n      You can specify a specific \'ticketDataGenerationRule\' here or you can also specify\n      it on the application.  It\'ll be read from the argument first and fall back to the \'\n      application config.\n    </Description>\n    <WorkflowRef>\n      <Reference class=\"sailpoint.object.Workflow\" id=\"4028ab1063f427af0163f42904b20183\" name=\"Manage Ticket\"/>\n    </WorkflowRef>\n    <Transition to=\"end\"/>\n  </Step>\n  <Step icon=\"Stop\" name=\"end\" posX=\"601\" posY=\"13\"/>\n</List>\n',' ',' ','Identity,IdentityRequest'),('4028ab1063fdfb6d0163fdfc6bf6003a',1528974568439,1739425376747,NULL,NULL,NULL,'Identity Request Approve Identity Changes','\n     The subprocess that drives the Create and Update Identity workflows.\n     This is different then the Identity Request Approve subprocess because this\n     approval process produces a form with the approval so that\n     approvers can update values while approving.\n\n     This subprocess builds the form necessary for the editable approvals\n     and then assimilates that data entered back to the plan, which\n     can be returned from the subprocess.\n  ','Subprocess',NULL,_binary '\0',_binary '',_binary '\0',0,_binary '\0',NULL,NULL,'<List>\n  <Variable input=\"true\" name=\"identityName\" required=\"true\">\n    <Description>\n      The name of the identity object being modified.\n    </Description>\n  </Variable>\n  <Variable initializer=\"script:(identityDisplayName != void) ? identityDisplayName : resolveDisplayName(identityName)\" input=\"true\" name=\"identityDisplayName\">\n    <Description>\n      The displayName of the identity being updated.\n      This may be passed in, if not the script queries for this\n      using a projection query and falls back to the name.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"identityRequestId\">\n    <Description>\n       The ID of the IdentityRequest.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"plan\" required=\"true\">\n    <Description>The provisioning plan ready to execute.</Description>\n  </Variable>\n  <Variable initializer=\"LCM Identity Approval\" input=\"true\" name=\"formTemplate\">\n    <Description>Name of the form Template to use when building provisioning form.</Description>\n  </Variable>\n  <Variable input=\"true\" name=\"approvalSet\" output=\"true\">\n    <Description>\n       This variable includes all ApprovalItems that are part of\n       the request process and is updated during the AfterScript\n       of the approval process by assimilating the decisions\n       and comments from the Approvals copy of the ApprovalItem.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"approvers\">\n    <Description>Owners that should recieve the approval.</Description>\n  </Variable>\n  <Variable input=\"true\" name=\"approvalScheme\">\n    <Description>\n      A String that specifies how approvals should be generated for\n      this workflow there are five built-in modes\n\n      none - disabled approvals\n\n      manager - The user\'s current manager will get approvals\n\n      newManager - The newly assigned manager will get approvals when\n                   manager transfers occur. Otherwise the user\'s manager\n                   current manager will be the approver.\n\n      securityOfficer - The identity in the securityOfficerName variable\n                        will get approvals.\n    </Description>\n  </Variable>\n  <Variable initializer=\"LCM Identity Update Approval\" input=\"true\" name=\"approvalEmailTemplate\">\n    <Description>\n     The email template to use for approval notifications.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"securityOfficerName\">\n    <Description>\n       The name of the identity that will be sent approvals\n       during security officer approvals.\n    </Description>\n  </Variable>\n  <Variable name=\"approvalForm\">\n    <Description>The generated form that is displayed to the user during the approval.</Description>\n  </Variable>\n  <Variable input=\"true\" name=\"fallbackApprover\" required=\"true\">\n    <Description>\n      A String that specifies the name of the Identity that will\n      be assigned any manual actions  where the owner of the approver\n      can\'t be resolved.\n    </Description>\n  </Variable>\n  <Variable initializer=\"serial\" input=\"true\" name=\"approvalMode\">\n    <Description>\n     A string that specifies how we should handle the approvals.\n\n     By default this is serial since most of these request with\n     the exception of manager transfers will have only one approver.\n\n     parallel\n       Approvals are processed concurrently and there must be consensus,\n       we wait for all approvers to approve.  The first approver that\n       rejects terminates the entire approval.\n\n     parallelPoll\n       Approvals are processed concurrently but consensus is not required.\n       All approvals will be processed, we don\'t stop if there are any\n       rejections.\n\n     serial\n       Approvals are processed one at a time and there must be consensus.\n       The first approver that rejects terminates the entire approval.\n\n     serialPoll\n       Approvals are processed in order but consensus is not required.\n       All approvals will be processed, we don\'t stop if there are any\n       rejections.  In effect we are \"taking a poll\" of the approvers.\n\n     any\n      Approvals are processed concurrently, the first approver to\n      respond makes the decision for the group.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"policyViolations\">\n    <Description>\n       List of policy violations that were found during our initial policy scan.\n       This list is passed into each work item so the approvers can see\n       pending violations.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"priority\">\n    <Description>\n      String version of WorkItem.level that will be used\n      to set the priority of any generated approval\n      workitems.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"approverElectronicSignature\">\n    <Description>\n       The name of the electronic signature object that should be used when workitems\n       are completed by the batch approver when performing batch operations.\n    </Description>\n  </Variable>\n</List>\n',NULL,'<List>\n  <Step icon=\"Start\" name=\"Start\" posX=\"14\" posY=\"12\">\n    <Transition to=\"Build Approval Form\"/>\n  </Step>\n  <Step action=\"call:buildPlanApprovalForm\" icon=\"Task\" name=\"Build Approval Form\" posX=\"106\" posY=\"12\" resultVariable=\"approvalForm\">\n    <Arg name=\"plan\" value=\"ref:plan\"/>\n    <Arg name=\"template\" value=\"ref:formTemplate\"/>\n    <Transition to=\"Customize Approval Form\"/>\n  </Step>\n  <Step name=\"Customize Approval Form\" posX=\"247\" posY=\"12\" resultVariable=\"approvalForm\">\n    <Description>\n       using the form that was generaed, mMrk the password field read only so approvers\n       can\'t change it.  Also associate a Rule with the name so name changes during\n       approvals can be validate.\n    </Description>\n    <Script>\n      <Source>\n        import sailpoint.object.Field;\n        import sailpoint.object.Form;\n        import sailpoint.object.Rule;\n        import sailpoint.object.Configuration;\n        import sailpoint.tools.Util;\n\n        if ( approvalForm != null ) {\n            Field passwordField = approvalForm.getField(\"IIQ:password\");\n            if ( passwordField != null ) {\n                passwordField.setReadOnly(true);\n\n                Configuration config = wfcontext.getSailPointContext().getObject(Configuration.class, Configuration.OBJ_NAME);\n                boolean requirePassword = Util.atob(config.getString(Configuration.LCM_REQUIRE_PASSWORD_IDENTITY_CREATE));\n                passwordField.setRequired(requirePassword);\n            }\n            Field userId = approvalForm.getField(\"IIQ:name\");\n            if ( userId != null ) {\n                String ruleName = \"LCM Validate Identity Name\";\n                Rule rule = wfcontext.getSailPointContext().getObject(Rule.class, ruleName);\n                if ( rule != null ) {\n                    userId.setValidationRule(rule);\n                }\n            }\n            Field manager = approvalForm.getField(\"IIQ:manager\");\n            if ( manager != null ) {\n                // tell the FormBean to output the value as a name\n                // instead of ID which is the default\n                manager.addAttribute(Field.ATTR_VALUE_PROPERTY, \"name\");\n            }\n        }\n        return approvalForm;\n      </Source>\n    </Script>\n    <Transition to=\"Build Approvers If Necessary\"/>\n  </Step>\n  <Step action=\"call:getIdentityCreateUpdateApprovals\" condition=\"script:isNull(approvers)\" icon=\"Task\" name=\"Build Approvers If Necessary\" posX=\"429\" posY=\"12\" resultVariable=\"approvers\">\n    <Description>\n      If the approvals weren\'t passed in then build them up using our\n      default rule.\n    </Description>\n    <Transition to=\"Approval\"/>\n  </Step>\n  <Step icon=\"Approval\" name=\"Approval\" posX=\"577\" posY=\"12\">\n    <Approval mode=\"ref:approvalMode\" owner=\"ref:approvers\" renderer=\"lcmEditableWorkItemRenderer.xhtml\" send=\"identityDisplayName,identityName,policyViolations, approvalSet\">\n      <AfterScript>\n        <Source>\n          import sailpoint.workflow.IdentityRequestLibrary;\n\n          import sailpoint.object.ApprovalSet;\n          import sailpoint.object.WorkItem;\n          import sailpoint.object.WorkflowCase;\n          import sailpoint.object.Form;\n          import sailpoint.object.ProvisioningPlan.AccountRequest;\n          import sailpoint.object.ProvisioningPlan.AttributeRequest;\n          import sailpoint.util.GeneralException;\n\n          if (item == null) {\n              return;\n          }\n          // Assimilate all of the approvalItem changes into our gloval\n          // approval set\n          //\n          ApprovalSet set = (ApprovalSet)item.get(\"approvalSet\");\n          if ( set != null ) {\n              // Global completion comments will apply to each of the items\n              // If there are completion comments append them\n              // to any other completion comments, but typically its\n              // one or the other\n              String completionComments = item.getCompletionComments();\n              Identity id = item.getOwner();\n              String ownerName = null;\n              if ( id != null ) {\n                  ownerName = id.getName();\n              }\n              approvalSet.assimilate(set, ownerName, completionComments, true);\n          } else {\n              throw new GeneralException(\"ApprovalSet not found in afterscript.\");\n          }\n\n          // djs: this is kind of a hack, do I have alternatives?\n          // come back to this\n          // jsl: Yes, I think you want &lt;Return name=\'workItemForm\' to=\'approvalForm\'/>\n          Form form = (Form)item.get(\"workItemForm\");\n          if ( form != null ) {\n              WorkflowCase c = wfcontext.getWorkflowCase();\n              if ( c != null ) {\n                  c.put(\"approvalForm\", form);\n              }\n          }\n\n          // bug#9611 if we notice that the manager request was edited,\n          // change the next approval\n          if (approvalScheme == null ||\n              approvalScheme.contains(\"manager\") ||\n              approvalScheme.contains(\"newManager\")) {\n              Form form = item.getForm();\n              if (form != null) {\n                  Field field = form.getField(\"IIQ:manager\");\n                  if (field != null) {\n                      String newManager = field.getValue();\n                      if (newManager != null) {\n                          Approval newApproval = null;\n                          if (approval != null) {\n                              Approval parent = approval.getParent();\n                              if (parent != null) {\n                                  // find the one after us\n                                  List approvals = parent.getChildren();\n                                  if (approvals != null) {\n                                      Approval prev = null;\n                                      for (int i = 0 ; i &lt; approvals.size() ; i++) {\n                                          Approval a = (Approval)approvals.get(i);\n                                          if (prev == approval) {\n                                             newApproval = a;\n                                             break;\n                                          }\n                                          else\n                                            prev = a;\n                                      }\n                                  }\n                              }\n                          }\n\n                          // newApproval can be null if the user didn\'t start\n                          // with a manager or if the current manager requested\n                          // the change\n                          if (newApproval != null) {\n                              String oldManager = newApproval.getOwner();\n\n                              // If the managers aren\'t equal, this *could* be a manager change\n                              // or it could just be some other type of approval.\n                              if (!newManager.equals(oldManager)) {\n\n                                  // Get the manager that was submitted in the plan.\n                                  String planager = null;\n                                  if (null == plan) {\n                                      log.warn(\"Expected a plan variable in identity request \" +\n                                               \"approval AfterScript.\");\n                                  }\n                                  else {\n                                      AccountRequest iiqReq = plan.getIIQAccountRequest();\n                                      if (null != iiqReq) {\n                                          AttributeRequest managerReq =\n                                              iiqReq.getAttributeRequest(\"manager\");\n                                          if (null != managerReq) {\n                                              planager = managerReq.getValue();\n\n                                              // May have an ID or name, so load it to get the name.\n                                              Identity manager =\n                                                  context.getObject(Identity.class, planager);\n                                              if (null != manager) {\n                                                  planager = manager.getName();\n                                              }\n                                          }\n                                      }\n                                  }\n\n                                  // If the newManager is the same as what was originally submitted\n                                  // then we haven\'t really changed the manager ... the newApproval\n                                  // was for a different type of approver (eg - securityOfficer).\n                                  if ((null == planager) || !planager.equals(newManager)) {\n                                      log.info(\"Changing new manager approval owner from \" +\n                                               oldManager + \" to \" + newManager);\n                                      newApproval.setOwner(newManager);\n\n                                      // The old owner could have been cached.  Clear it to\n                                      // make sure this goes to the right guy.\n                                      newApproval.setIdentity(null);\n                                  }\n                              }\n                          }\n                      }\n                  }\n              }\n          }\n\n          //\n          // If they are all rejected mark the Approval Rejected.\n          // This allows the Transition to execute once we\n          // get a rejection.\n          //\n          if ( approvalSet.isAllRejected() ) {\n              approval.setState(WorkItem.State.Rejected);\n          }\n\n          IdentityRequestLibrary.assimilateWorkItemApprovalSetToIdentityRequest(wfcontext, approvalSet);\n          auditWorkItemOwnerHistory(item);\n          auditWorkItemComments(item);\n          auditDecisions(item);\n        </Source>\n      </AfterScript>\n      <Arg name=\"workItemDescription\" value=\"Account Changes for User: $(identityDisplayName)\"/>\n      <Arg name=\"workItemElectronicSignature\" value=\"ref:approverElectronicSignature\"/>\n      <Arg name=\"workItemForm\" value=\"ref:approvalForm\"/>\n      <Arg name=\"workItemIdentityRequestId\" value=\"ref:identityRequestId\"/>\n      <Arg name=\"workItemNotificationTemplate\" value=\"ref:approvalEmailTemplate\"/>\n      <Arg name=\"workItemPriority\" value=\"ref:priority\"/>\n      <Arg name=\"workItemRequester\" value=\"$(launcher)\"/>\n      <Arg name=\"workItemType\" value=\"Approval\"/>\n    </Approval>\n    <Transition to=\"Assimilate Form Changes\"/>\n  </Step>\n  <Step action=\"call:assimilatePlanApprovalForm\" icon=\"Task\" name=\"Assimilate Form Changes\" posX=\"712\" posY=\"12\" resultVariable=\"plan\">\n    <Arg name=\"form\" value=\"ref:approvalForm\"/>\n    <Arg name=\"approvalSet\" value=\"ref:approvalSet\"/>\n    <Arg name=\"plan\" value=\"ref:plan\"/>\n    <Description>\n      This step takes the form from the workitem and applys any edits that were\n      made back into the plan.\n    </Description>\n    <Transition to=\"Check Plan and Update Cart\"/>\n  </Step>\n  <Step icon=\"Task\" name=\"Check Plan and Update Cart\" posX=\"877\" posY=\"12\" resultVariable=\"plan\">\n    <Description>\n      This step takes looks for name changes during creates and updates\n      the stub identity on the plan accordingly.\n    </Description>\n    <Script>\n      <Source>\n        import sailpoint.object.ApprovalSet;\n        import sailpoint.object.ApprovalItem;\n        import sailpoint.object.Identity;\n        import sailpoint.object.ProvisioningPlan;\n        import sailpoint.object.ProvisioningPlan.AccountRequest;\n        import sailpoint.object.ProvisioningPlan.AttributeRequest;\n\n        AccountRequest iiq = plan.getAccountRequest(ProvisioningPlan.APP_IIQ);\n        if ( iiq != null ) {\n            // Look for the name attribute\n            boolean nameChanged = false;\n            String idName = identityName;\n            AttributeRequest name = iiq.getAttributeRequest(\"name\");\n            if ( name != null ) {\n                String nameStr = Util.otoa(name.getValue());\n                if ( nameStr != null ) {\n                    // If they don\'t match this indicates a form\n                    // update changes the accountId\n                    if ( identityName.compareTo(nameStr) != 0 ) {\n                        idName = nameStr;\n                        nameChanged = true;\n                         // update the plan with the new/correct account ID\n                        iiq.setNativeIdentity(idName);\n                    }\n                }\n            }\n            Identity planIdentity = plan.getIdentity();\n            if ( ( planIdentity == null ) || ( nameChanged ) ) {\n                SailPointContext ctx = wfcontext.getSailPointContext();\n                Identity stub = ctx.getObject(Identity.class, idName);\n                if ( stub == null ) {\n                    stub = new Identity();\n                    stub.setName(idName);\n                }\n                plan.setIdentity(stub);\n            }\n\n            //\n            // Update the approval item with any changes that\n            // were made during the approval process\n            //\n            if ( approvalSet != null ) {\n                List approvalItems =  approvalSet.getItems();\n                // in the default case there is always just one item for all the changes\n                if ( Util.size(approvalItems) == 1 ) {\n                    // Re-flatten the attribute values so they are accurate when auditing changes\n                    // and notifying. The values may have been updated in the approvalForm.\n                    ApprovalItem item = approvalItems.get(0);\n                    List attrRequestFlat = flattenAttributeRequests(iiq.getAttributeRequests());\n                    if ( attrRequestFlat != null ) {\n                        item.setValue(attrRequestFlat);\n                    }\n                    if ( nameChanged ) {\n                        item.setNativeIdentity(idName);\n                    }\n                }\n            }\n        }\n        return plan;\n      </Source>\n    </Script>\n    <Transition to=\"end\"/>\n  </Step>\n  <Step icon=\"Stop\" name=\"end\" posX=\"1021\" posY=\"12\"/>\n</List>\n',' ',' ',NULL),('4028ab1063fdfb6d0163fdfc6e49003b',1528974569033,1739425373500,NULL,NULL,NULL,'Approve and Provision Subprocess','Subprocess to approve and provision immediately. This is used after splitting an ApprovalSet into individual items to run in parallel.','Subprocess',NULL,_binary '\0',_binary '',_binary '\0',0,_binary '\0',NULL,NULL,'<List>\n  <Variable input=\"true\" name=\"identityName\">\n    <Description>The name of the identity being updated.</Description>\n  </Variable>\n  <Variable initializer=\"false\" input=\"true\" name=\"endOnManualWorkItems\">\n    <Description>Option to skip requests with manual work items.</Description>\n  </Variable>\n  <Variable initializer=\"false\" input=\"true\" name=\"endOnProvisioningForms\">\n    <Description>Option to skip requests with provisioning forms.</Description>\n  </Variable>\n  <Variable initializer=\"script:(identityDisplayName != void) ? identityDisplayName : resolveDisplayName(identityName)\" input=\"true\" name=\"identityDisplayName\">\n    <Description>\n            The displayName of the identity being updated.\n            Query for this using a projection query and fall back to the name.\n        </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"plan\">\n    <Description>The provisioning plan ready to execute.</Description>\n  </Variable>\n  <Variable input=\"true\" name=\"flow\">\n    <Description>\n            The name of the LCM flow that launched this workflow.\n\n            This is one of these three values:\n\n            AccountsRequest\n            EntitlementsRequest\n            RolesRequest\n        </Description>\n  </Variable>\n  <Variable editable=\"true\" initializer=\"false\" name=\"optimisticProvisioning\">\n    <Description>\n            Set to true to enable optimistic provisioning.  This will cause\n            changes to the entitlements compiled from role assignments to be\n            applied immediately to the identity cube rather than waiting\n            for the next refresh/reaggregation after the provisioning system\n            completes the request.\n        </Description>\n  </Variable>\n  <Variable editable=\"true\" initializer=\"true\" name=\"foregroundProvisioning\">\n    <Description>\n            Normally provisioning is done in a step that uses the \"background\"\n            option to force the workflow to be suspend and be resumed in a\n            background task thread.  This prevents the browser session from\n            hanging since provision can sometimes take a long time.  For demos\n            and testing it can be better to do this in the foreground so that\n            provisioning will have been performed when control is returned to the\n            user.  This prevents having to run the Perform Maintenance task to\n            see the results of the request.\n        </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"batchRequestItemId\">\n    <Description>\n            Used by the batch interface to record back individual request item status. The specific item id for the individual request in the batch file.\n        </Description>\n  </Variable>\n  <Variable initializer=\"LCM User Notification\" input=\"true\" name=\"userEmailTemplate\">\n    <Description>\n            The email template to use for user notification.\n        </Description>\n  </Variable>\n  <Variable initializer=\"LCM Requester Notification\" input=\"true\" name=\"requesterEmailTemplate\">\n    <Description>\n            The email template to use for requester notification.\n        </Description>\n  </Variable>\n  <Variable initializer=\"LCM Manager Notification\" input=\"true\" name=\"managerEmailTemplate\">\n    <Description>\n            The email template to use for manager notification.\n        </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"securityOfficerEmailTemplate\">\n    <Description>\n            The email template to use for security officer notification.\n        </Description>\n  </Variable>\n  <Variable initializer=\"parallel\" input=\"true\" name=\"approvalMode\">\n    <Description>\n            A string that specifies how we should handle the approvals.\n\n            By default this is serial since most of these request with\n            the exception of manager transfers will have only one approver.\n\n            parallel\n            Approvals are processed concurrently and there must be consensus,\n            we wait for all approvers to approve.  The first approver that\n            rejects terminates the entire approval.\n\n            parallelPoll\n            Approvals are processed concurrently but consensus is not required.\n            All approvals will be processed, we don\'t stop if there are any\n            rejections.\n\n            serial\n            Approvals are processed one at a time and there must be consensus.\n            The first approver that rejects terminates the entire approval.\n\n            serialPoll\n            Approvals are processed in order but consensus is not required.\n            All approvals will be processed, we don\'t stop if there are any\n            rejections.  In effect we are \"taking a poll\" of the approvers.\n\n            any\n            Approvals are processed concurrently, the first approver to\n            respond makes the decision for the group.\n        </Description>\n  </Variable>\n  <Variable initializer=\"owner\" input=\"true\" name=\"approvalScheme\">\n    <Description>\n            A csv string that specifies how approval items should be generated\n            for the incoming request.\n\n            The value can be \"none\", in which case approvals are disabled.\n\n            The value can also be a combination of any of the values below\n            in any order, separated by commas. The order in which they are\n            specified is the order in which they are processed:\n\n            owner\n            The object owner gets the approval item.\n            For Role approvals this is the Role object owner.\n            For Entitlement approvals this is the Entitlement object owner.\n\n            manager\n            The manager gets the approval item.\n\n            securityOfficer\n            The identity in the variable securityOfficerName gets the approval item.\n\n            identity\n            The identities/workgroups in the variable approvingIdentities get the approval item.\n        </Description>\n  </Variable>\n  <Variable initializer=\"LCM Identity Update Approval\" input=\"true\" name=\"approvalEmailTemplate\">\n    <Description>\n            The email template to use for approval notifications.\n        </Description>\n  </Variable>\n  <Variable initializer=\"Normal\" input=\"true\" name=\"workItemPriority\">\n    <Description>\n            The String version of a WorkItem.Priority. This variable is\n            used to set the priority on all of the workitems generated\n            as part of this workflow and also set on the IdentityRequest\n            object.\n        </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"securityOfficerName\">\n    <Description>\n            The name of the identity that will be sent approvals\n            during security officer approvals.\n        </Description>\n  </Variable>\n  <Variable initializer=\"spadmin\" input=\"true\" name=\"fallbackApprover\">\n    <Description>\n            A String that specifies the name of the Identity that will\n            be assigned any approvals where the owner of the approver\n            can\'t be resolved. Example if the scheme is \"owner\" and the\n            application doesn\'t specify and owner.\n        </Description>\n  </Variable>\n  <Variable initializer=\"false\" input=\"true\" name=\"enableRetryRequest\">\n    <Description>\n            When set to true it will disable the workflow retry loop and let the\n            Provision step launch requests to handle the retries.  Enabling\n            this flag will enable some older functionality.\n        </Description>\n  </Variable>\n  <Variable initializer=\"LCM\" input=\"true\" name=\"source\">\n    <Description>\n            String version of sailpoint.object.Source to indicate\n            where the request originated.  Defaults to LCM.\n        </Description>\n  </Variable>\n  <Variable initializer=\"false\" name=\"trace\">\n    <Description>\n            Used for debugging this workflow and when set to true trace\n            will be sent to stdout.\n        </Description>\n  </Variable>\n  <Variable name=\"approvalSet\">\n    <Description>\n            This attributes is set during the \"Build Approval Set\" step,\n            which builds this list by going through the ProvisioningPlan\n            to build the line items that need to be approved,\n\n            This variable includes all ApprovalItems that are part of\n            the request process and is updated during the AfterScript\n            of the approval process by assimilating the decisions\n            and comments from the Approvals copy of the ApprovalItem.\n        </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"approvalAssignmentRule\"/>\n  <Variable name=\"project\">\n    <Description>\n            ProvisioningProject which is just a compiled version of the ProvisioningPlan.\n        </Description>\n  </Variable>\n  <Variable name=\"policyViolations\">\n    <Description>\n            List of policy violations that were found during our initial policy scan.\n            This list is passed into each work item so the approvers can see\n            pending violations.\n        </Description>\n  </Variable>\n  <Variable name=\"identityRequestId\" output=\"true\">\n    <Description>\n            The sequence id of the Identity request object which is stored in\n            the name field of the identity request and auto-incremented.\n        </Description>\n  </Variable>\n  <Variable name=\"workItemComments\">\n    <Description>\n            Global comments accumulated during the workflow which should be shared\n            with other approvals. When a new approval is created, the comments in this\n            list will be added to the work item.\n        </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"ticketManagementApplication\">\n    <Description>\n            Name of the application that can handle ticket requests.\n            When non-null the Manage Ticket Steps will be visited to open\n            tickets during the workflow lifecycle.\n        </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"managerElectronicSignature\">\n    <Description>\n            The name of the electronic signature object that should be used when workitems\n            are completed by a manager.\n        </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"ownerElectronicSignature\">\n    <Description>\n            The name of the electronic signature object that should be used when workitems\n            are completed by object owners.\n        </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"securityOfficerElectronicSignature\">\n    <Description>\n            The name of the electronic signature object that should be used when workitems\n            are completed by the security officer.\n        </Description>\n  </Variable>\n  <Variable initializer=\"true\" input=\"true\" name=\"filterRejects\">\n    <Description>True to filter rejected items when running in Serial/SerialPoll mode.</Description>\n  </Variable>\n  <Variable initializer=\"false\" input=\"true\" name=\"setPreviousApprovalDecisions\">\n    <Description>True to pre-populate approval decisions from previous approvals.</Description>\n  </Variable>\n  <Variable input=\"true\" name=\"approvalSplitPoint\">\n    <Description>Approval Scheme to split on.</Description>\n  </Variable>\n  <Variable input=\"true\" name=\"clearApprovalDecisions\">\n    <Description>\n            True to clear any decisions on approvals built with buildCommonApprovals\n        </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"approvingIdentities\">\n    <Description>\n            List of identities and/or workgroups names/ids that should be involved in the approval\n            process.\n        </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"formTemplate\"/>\n  <Variable input=\"true\" name=\"manualActionsEmailTemplate\"/>\n  <Variable initializer=\"LCM Identity Update Approval\" input=\"true\" name=\"ownerEmailTemplate\">\n    <Description>\n            Name of the email template to use when notifying the owner of pending approvals.\n        </Description>\n  </Variable>\n  <Variable initializer=\"false\" input=\"true\" name=\"splitProvisioning\">\n    <Description>\n            True to tell IdentityRequest Provisioning subprocess that this is a subset of the initial provisioning plan\n        </Description>\n  </Variable>\n</List>\n',NULL,'<List>\n  <Step icon=\"Start\" name=\"Start\" posX=\"20\" posY=\"20\">\n    <Transition to=\"Compile Project\"/>\n  </Step>\n  <Step action=\"call:compileProvisioningProject\" condition=\"script:(!isNull(approvalSplitPoint))\" icon=\"Task\" name=\"Compile Project\" posX=\"120\" posY=\"20\" resultVariable=\"project\">\n    <Arg name=\"identityName\" value=\"ref:identityName\"/>\n    <Arg name=\"plan\" value=\"ref:plan\"/>\n    <Arg name=\"requester\" value=\"ref:launcher\"/>\n    <Arg name=\"source\" value=\"ref:source\"/>\n    <Arg name=\"optimisticProvisioning\" value=\"ref:optimisticProvisioning\"/>\n    <Arg name=\"noApplicationTemplates\">\n      <Script>\n        <Source>\n                    boolean ignoreForms = false;\n                    if (\"ForgotPassword\".equals(flow) || \"ExpirePassword\".equals(flow)) {\n                    ignoreForms = true;\n                    }\n                    return ignoreForms;\n                </Source>\n      </Script>\n    </Arg>\n    <Transition to=\"Build Approval Set\"/>\n  </Step>\n  <Step action=\"call:buildSplitApprovalSet\" condition=\"script:(!isNull(approvalSplitPoint))\" icon=\"Task\" name=\"Build Approval Set\" posX=\"220\" posY=\"20\" resultVariable=\"approvalSet\">\n    <Arg name=\"plan\" value=\"ref:plan\"/>\n    <Return name=\"approvalSet\" to=\"approvalSet\"/>\n    <Transition to=\"Approve\"/>\n  </Step>\n  <Step condition=\"script:((flow == null) ||  (!&quot;UnlockAccount&quot;.equals(flow)))\" configForm=\"Provisioning Approval Step Form\" icon=\"Approval\" name=\"Approve\" posX=\"320\" posY=\"20\">\n    <Arg name=\"approvalMode\" value=\"ref:approvalMode\"/>\n    <Arg name=\"approvalScheme\" value=\"ref:approvalScheme\"/>\n    <Arg name=\"approvalSet\" value=\"ref:approvalSet\"/>\n    <Arg name=\"approvalSplitPoint\" value=\"ref:approvalSplitPoint\"/>\n    <Arg name=\"approvalAssignmentRule\"/>\n    <Arg name=\"approvingIdentities\"/>\n    <Arg name=\"fallbackApprover\" value=\"ref:fallbackApprover\"/>\n    <Arg name=\"filterRejects\" value=\"ref:filterRejects\"/>\n    <Arg name=\"flow\" value=\"ref:flow\"/>\n    <Arg name=\"identityName\" value=\"ref:identityName\"/>\n    <Arg name=\"identityDisplayName\" value=\"ref:identityDisplayName\"/>\n    <Arg name=\"identityElectronicSignature\"/>\n    <Arg name=\"identityEmailTemplate\"/>\n    <Arg name=\"identityRequestId\" value=\"ref:identityRequestId\"/>\n    <Arg name=\"launcher\" value=\"ref:launcher\"/>\n    <Arg name=\"managerEmailTemplate\" value=\"ref:approvalEmailTemplate\"/>\n    <Arg name=\"managerElectronicSignature\" value=\"ref:managerElectronicSignature\"/>\n    <Arg name=\"ownerEmailTemplate\" value=\"ref:approvalEmailTemplate\"/>\n    <Arg name=\"ownerElectronicSignature\" value=\"ref:ownerElectronicSignature\"/>\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Arg name=\"plan\" value=\"ref:plan\"/>\n    <Arg name=\"policyViolations\" value=\"ref:policyViolations\"/>\n    <Arg name=\"priority\" value=\"ref:workItemPriority\"/>\n    <Arg name=\"securityOfficerName\" value=\"ref:securityOfficerName\"/>\n    <Arg name=\"securityOfficerEmailTemplate\" value=\"ref:approvalEmailTemplate\"/>\n    <Arg name=\"securityOfficerElectronicSignature\" value=\"ref:securityOfficerElectronicSignature\"/>\n    <Arg name=\"setPreviousApprovalDecisions\" value=\"ref:setPreviousApprovalDecisions\"/>\n    <Arg name=\"trace\" value=\"ref:trace\"/>\n    <Arg name=\"workItemReminderTemplate\"/>\n    <Arg name=\"workItemHoursBetweenReminders\"/>\n    <Arg name=\"workItemMaxReminders\"/>\n    <Arg name=\"workItemEscalationTemplate\"/>\n    <Arg name=\"workItemHoursTillEscalation\"/>\n    <Arg name=\"workItemEscalationRule\"/>\n    <Arg name=\"workItemComments\"/>\n    <Arg name=\"clearApprovalDecisions\" value=\"script:(!isNull(approvalSplitPoint) &amp;&amp; csvToList(approvalScheme).contains(approvalSplitPoint))\"/>\n    <Return name=\"approvalSet\"/>\n    <Return name=\"workItemComments\"/>\n    <Return name=\"project\"/>\n    <WorkflowRef>\n      <Reference class=\"sailpoint.object.Workflow\" id=\"4028ab1063f427af0163f4291a6401ac\" name=\"Provisioning Approval Subprocess\"/>\n    </WorkflowRef>\n    <Transition to=\"Update Ticket Post Approval\"/>\n  </Step>\n  <Step condition=\"script:(ticketManagementApplication != null)\" icon=\"Task\" name=\"Update Ticket Post Approval\" posX=\"470\" posY=\"20\">\n    <Arg name=\"action\" value=\"postApproval\"/>\n    <Arg name=\"priority\" value=\"ref:workItemPriority\"/>\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Arg name=\"source\" value=\"ref:source\"/>\n    <Arg name=\"ticketManagementApplication\" value=\"ref:ticketManagementApplication\"/>\n    <Arg name=\"identityRequestId\" value=\"ref:identityRequestId\"/>\n    <Arg name=\"ticketDataGenerationRule\" value=\"\"/>\n    <Arg name=\"trace\" value=\"ref:trace\"/>\n    <Description>\n            Call a subprocess to update the ticket in the ticketManagementApplication is non-null.\n\n            You can specify a specific \'ticketDataGenerationRule\' here or you can also specify\n            it on the application.  It\'ll be read from the argument first and fall back to the \'\n            application config.\n\n        </Description>\n    <WorkflowRef>\n      <Reference class=\"sailpoint.object.Workflow\" id=\"4028ab1063f427af0163f42904b20183\" name=\"Manage Ticket\"/>\n    </WorkflowRef>\n    <Transition to=\"Provision\"/>\n  </Step>\n  <Step icon=\"Provision\" name=\"Provision\" posX=\"600\" posY=\"20\">\n    <Arg name=\"approvalScheme\" value=\"ref:approvalScheme\"/>\n    <Arg name=\"approvalSet\" value=\"ref:approvalSet\"/>\n    <Arg name=\"fallbackApprover\" value=\"ref:fallbackApprover\"/>\n    <Arg name=\"foregroundProvisioning\" value=\"ref:foregroundProvisioning\"/>\n    <Arg name=\"formTemplate\" value=\"Identity Update\"/>\n    <Arg name=\"flow\" value=\"ref:flow\"/>\n    <Arg name=\"identityDisplayName\" value=\"ref:identityDisplayName\"/>\n    <Arg name=\"identityName\" value=\"ref:identityName\"/>\n    <Arg name=\"identityRequestId\" value=\"ref:identityRequestId\"/>\n    <Arg name=\"launcher\" value=\"ref:launcher\"/>\n    <Arg name=\"manualActionsEmailTemplate\" value=\"Pending Manual Changes\"/>\n    <Arg name=\"optimisticProvisioning\" value=\"ref:optimisticProvisioning\"/>\n    <Arg name=\"policyViolations\" value=\"ref:policyViolations\"/>\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Arg name=\"policyScheme\" value=\"ref:policyScheme\"/>\n    <Arg name=\"priority\" value=\"ref:workItemPriority\"/>\n    <Arg name=\"trace\" value=\"ref:trace\"/>\n    <Arg name=\"workItemComments\" value=\"ref:workItemComments\"/>\n    <Arg name=\"splitProvisioning\" value=\"ref:splitProvisioning\"/>\n    <Description>\n            Call the standard subprocess that will process the\n            approval decisions and do provisioning.  This\n            includes calling any configured provisioning\n            connectors and building manual actions.\n        </Description>\n    <Return name=\"project\" to=\"project\"/>\n    <WorkflowRef>\n      <Reference class=\"sailpoint.object.Workflow\" id=\"4028ab1063fdfb6d0163fdfc6aa00038\" name=\"Identity Request Provision\"/>\n    </WorkflowRef>\n    <Transition to=\"Update Ticket Post Provision\"/>\n  </Step>\n  <Step condition=\"script:(ticketManagementApplication != null)\" icon=\"Task\" name=\"Update Ticket Post Provision\" posX=\"700\" posY=\"20\">\n    <Arg name=\"action\" value=\"postProvisioning\"/>\n    <Arg name=\"source\" value=\"ref:source\"/>\n    <Arg name=\"priority\" value=\"ref:workItemPriority\"/>\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Arg name=\"ticketManagementApplication\" value=\"ref:ticketManagementApplication\"/>\n    <Arg name=\"identityRequestId\" value=\"ref:identityRequestId\"/>\n    <Arg name=\"ticketDataGenerationRule\" value=\"\"/>\n    <Arg name=\"trace\" value=\"ref:trace\"/>\n    <Description>\n            Call a subprocess to update the ticket in the ticketManagementApplication is non-null.\n\n            You can specify a specific \'ticketDataGenerationRule\' here or you can also specify\n            it on the application.  It\'ll be read from the argument first and fall back to the \'\n            application config.\n\n        </Description>\n    <WorkflowRef>\n      <Reference class=\"sailpoint.object.Workflow\" id=\"4028ab1063f427af0163f42904b20183\" name=\"Manage Ticket\"/>\n    </WorkflowRef>\n  </Step>\n</List>\n',' ',' ',NULL),('4028ab1063fdfb6d0163fdfc6ea7003c',1528974569128,1739425378514,NULL,NULL,NULL,'LCM Provisioning',NULL,'LCMProvisioning','LCM',_binary '\0',_binary '',_binary '\0',0,_binary '\0','sailpoint.api.StandardWorkflowHandler',NULL,'<List>\n  <Variable input=\"true\" name=\"identityName\">\n    <Description>The name of the identity being updated.</Description>\n  </Variable>\n  <Variable initializer=\"false\" input=\"true\" name=\"endOnManualWorkItems\">\n    <Description>Option to skip requests with manual work items.</Description>\n  </Variable>\n  <Variable initializer=\"false\" input=\"true\" name=\"endOnProvisioningForms\">\n    <Description>Option to skip requests with provisioning forms.</Description>\n  </Variable>\n  <Variable initializer=\"script:(identityDisplayName != void) ? identityDisplayName : resolveDisplayName(identityName)\" input=\"true\" name=\"identityDisplayName\">\n    <Description>The displayName of the identity being updated.\n      Query for this using a projection query and fall back to the name.</Description>\n  </Variable>\n  <Variable input=\"true\" name=\"plan\">\n    <Description>The provisioning plan ready to execute.</Description>\n  </Variable>\n  <Variable input=\"true\" name=\"flow\">\n    <Description>The name of the LCM flow that launched this workflow.\n\n      This is one of these three values:\n\n      AccountsRequest\n      EntitlementsRequest\n      RolesRequest</Description>\n  </Variable>\n  <Variable editable=\"true\" initializer=\"false\" name=\"optimisticProvisioning\">\n    <Description>Set to true to enable optimistic provisioning.  This will cause\n      changes to the entitlements compiled from role assignments to be\n      applied immediately to the identity cube rather than waiting\n      for the next refresh/reaggregation after the provisioning system\n      completes the request.</Description>\n  </Variable>\n  <Variable editable=\"true\" initializer=\"true\" name=\"foregroundProvisioning\">\n    <Description>Normally provisioning is done in a step that uses the &amp;quot;background&amp;quot;\n      option to force the workflow to be suspend and be resumed in a\n      background task thread.  This prevents the browser session from\n      hanging since provision can sometimes take a long time.  For demos\n      and testing it can be better to do this in the foreground so that\n      provisioning will have been performed when control is returned to the\n      user.  This prevents having to run the Perform Maintenance task to\n      see the results of the request.</Description>\n  </Variable>\n  <Variable input=\"true\" name=\"batchRequestItemId\">\n    <Description>Used by the batch interface to record back individual request item status. The specific item id for the individual request in the batch file.</Description>\n  </Variable>\n  <Variable editable=\"true\" initializer=\"false\" name=\"doRefresh\">\n    <Description>Set to true to cause an identity refresh after the changes in the plan\n      have been provisioned.  This is normally off, you might want this on\n      if you want modification of identity or link attributes to result in\n      an immediate re-evaluation of assigned and detected roles.</Description>\n  </Variable>\n  <Variable initializer=\"user, requester\" input=\"true\" name=\"notificationScheme\">\n    <Description>A string that specifies who should be notified when the request has been complete.\n     The value can be null or a csv of one or more of the following options.\n\n     none or null\n       disable notifications\n\n     user\n       Identity that is being update will be notified.\n\n     manager\n       The manager of the Identity that is being updated will be notified.\n\n     requester\n       The person that has requested the update will be notified.</Description>\n  </Variable>\n  <Variable initializer=\"LCM User Notification\" input=\"true\" name=\"userEmailTemplate\">\n    <Description>The email template to use for user notification.</Description>\n  </Variable>\n  <Variable initializer=\"LCM Requester Notification\" input=\"true\" name=\"requesterEmailTemplate\">\n    <Description>The email template to use for requester notification.</Description>\n  </Variable>\n  <Variable initializer=\"LCM Manager Notification\" input=\"true\" name=\"managerEmailTemplate\">\n    <Description>The email template to use for manager notification.</Description>\n  </Variable>\n  <Variable input=\"true\" name=\"securityOfficerEmailTemplate\">\n    <Description>The email template to use for security officer notification.</Description>\n  </Variable>\n  <Variable initializer=\"parallel\" input=\"true\" name=\"approvalMode\">\n    <Description>A string that specifies how we should handle the approvals.\n\n        By default this is serial since most of these request with\n        the exception of manager transfers will have only one approver.\n\n        parallel\n        Approvals are processed concurrently and there must be consensus,\n        we wait for all approvers to approve.  The first approver that\n        rejects terminates the entire approval.\n\n        parallelPoll\n        Approvals are processed concurrently but consensus is not required.\n        All approvals will be processed, we don&amp;#39;t stop if there are any\n        rejections.\n\n        serial\n        Approvals are processed one at a time and there must be consensus.\n        The first approver that rejects terminates the entire approval.\n\n        serialPoll\n        Approvals are processed in order but consensus is not required.\n        All approvals will be processed, we don&amp;#39;t stop if there are any\n        rejections.  In effect we are &amp;quot;taking a poll&amp;quot; of the approvers.\n\n        any\n        Approvals are processed concurrently, the first approver to\n        respond makes the decision for the group.</Description>\n  </Variable>\n  <Variable initializer=\"owner\" input=\"true\" name=\"approvalScheme\">\n    <Description>A csv string that specifies how approval items should be generated\n      for the incoming request.\n\n      The value can be &amp;quot;none&amp;quot;, in which case approvals are disabled.\n\n      The value can also be a combination of any of the values below\n      in any order, separated by commas. The order in which they are\n      specified is the order in which they are processed:\n\n      owner\n        The object owner gets the approval item.\n        For Role approvals this is the Role object owner.\n        For Entitlement approvals this is the Entitlement object owner.\n\n      manager\n        The manager gets the approval item.\n\n      securityOfficer\n        The identity in the variable securityOfficerName gets the approval item.\n\n      identity\n        The identities/workgroups in the variable approvingIdentities get the approval item.</Description>\n  </Variable>\n  <Variable initializer=\"LCM Identity Update Approval\" input=\"true\" name=\"approvalEmailTemplate\">\n    <Description>The email template to use for approval notifications.</Description>\n  </Variable>\n  <Variable initializer=\"Normal\" input=\"true\" name=\"workItemPriority\">\n    <Description>The String version of a WorkItem.Priority. This variable is\n       used to set the priority on all of the workitems generated\n       as part of this workflow and also set on the IdentityRequest\n       object.</Description>\n  </Variable>\n  <Variable input=\"true\" name=\"securityOfficerName\">\n    <Description>The name of the identity that will be sent approvals\n       during security officer approvals.</Description>\n  </Variable>\n  <Variable initializer=\"spadmin\" input=\"true\" name=\"fallbackApprover\">\n    <Description>A String that specifies the name of the Identity that will\n      be assigned any approvals where the owner of the approver\n      can&amp;#39;t be resolved. Example if the scheme is &amp;quot;owner&amp;quot; and the\n      application doesn&amp;#39;t specify and owner.</Description>\n  </Variable>\n  <Variable initializer=\"interactive\" input=\"true\" name=\"policyScheme\">\n    <Description>A String that specifies how policy checks effect the overall\n      process.\n\n      none - disabled policy checking\n\n      continue -  continue if policy violations are found\n\n      interactive -  allow requester to remove request items which are causing violations\n\n      fail -  this option will cause the workflow to terminate immediately if any policy violations are found.\n              Note that the requester will not be notified that the workflow has terminated.</Description>\n  </Variable>\n  <Variable initializer=\"false\" input=\"true\" name=\"enableRetryRequest\">\n    <Description>When set to true it will disable the workflow retry loop and let the\n      Provision step launch requests to handle the retries.  Enabling\n      this flag will enable some older functionality.</Description>\n  </Variable>\n  <Variable input=\"true\" name=\"policiesToCheck\">\n    <Description>A List of policies that should be checked. If this list is\n      empty all violations will be checked. Used in combination\n      with policyScheme.</Description>\n  </Variable>\n  <Variable initializer=\"LCM\" input=\"true\" name=\"source\">\n    <Description>String version of sailpoint.object.Source to indicate\n      where the request originated.  Defaults to LCM.</Description>\n  </Variable>\n  <Variable initializer=\"false\" name=\"trace\">\n    <Description>Used for debugging this workflow and when set to true trace\n      will be sent to stdout.</Description>\n  </Variable>\n  <Variable name=\"approvalSet\">\n    <Description>This attributes is set during the &amp;quot;Build Approval Set&amp;quot; step,\n       which builds this list by going through the ProvisioningPlan\n       to build the line items that need to be approved,\n\n       This variable includes all ApprovalItems that are part of\n       the request process and is updated during the AfterScript\n       of the approval process by assimilating the decisions\n       and comments from the Approvals copy of the ApprovalItem.</Description>\n  </Variable>\n  <Variable initializer=\"true\" name=\"allowRequestsWithViolations\">\n    <Description>If this variable is set to true, requesters will be able to proceed past\n      the Policy Violation Review form without taking any action on\n      policy violations resulting from the request. This is only relevant\n      if policyScheme=interactive.</Description>\n  </Variable>\n  <Variable initializer=\"true\" name=\"requireViolationReviewComments\">\n    <Description>If true, requesters will be required to enter in comments if they\n      proceed with a request that will result in policy violations. This\n      is only relevant if policyScheme=interactive.</Description>\n  </Variable>\n  <Variable name=\"project\">\n    <Description>ProvisioningProject which is just a compiled version of the ProvisioningPlan.</Description>\n  </Variable>\n  <Variable name=\"policyViolations\">\n    <Description>List of policy violations that were found during our initial policy scan.\n       This list is passed into each work item so the approvers can see\n       pending violations.</Description>\n  </Variable>\n  <Variable name=\"identityRequestId\" output=\"true\">\n    <Description>The sequence id of the Identity request object which is stored in\n       the name field of the identity request and auto-incremented.</Description>\n  </Variable>\n  <Variable name=\"violationReviewDecision\">\n    <Description>Decision made by the user in the Policy Violation Review step.\n       This may be one of three choices:\n\n       -ignore:   User is ignoring the violations and letting the request continue. If\n                   requireViolationReviewComments=true the user will be required to enter\n                   comments indicating why they are allowing the violations.\n\n       -remediate: Indicates that the user removed the request items that were causing the\n                   violations\n\n       -cancel:   Indicates that the user decided to abandon the request, terminating the workflow.</Description>\n  </Variable>\n  <Variable name=\"workItemComments\">\n    <Description>Global comments accumulated during the workflow which should be shared\n      with other approvals. When a new approval is created, the comments in this\n      list will be added to the work item.</Description>\n  </Variable>\n  <Variable input=\"true\" name=\"ticketManagementApplication\">\n    <Description>Name of the application that can handle ticket requests.\n      When non-null the Manage Ticket Steps will be visited to open\n      tickets during the workflow lifecycle.</Description>\n  </Variable>\n  <Variable name=\"ticketId\">\n    <Description>The id of the ticket that is generated by the ticketingManagementApplication.\n      This is typically generated on the &amp;quot;open&amp;quot; call, and then used in subsequent\n      calls.  It is also stored on the IdentityRequest object under the\n      externalTicketId variable.</Description>\n  </Variable>\n  <Variable input=\"true\" name=\"managerElectronicSignature\">\n    <Description>The name of the electronic signature object that should be used when workitems\n       are completed by a manager.</Description>\n  </Variable>\n  <Variable input=\"true\" name=\"ownerElectronicSignature\">\n    <Description>The name of the electronic signature object that should be used when workitems\n       are completed by object owners.</Description>\n  </Variable>\n  <Variable input=\"true\" name=\"securityOfficerElectronicSignature\">\n    <Description>The name of the electronic signature object that should be used when workitems\n       are completed by the security officer.</Description>\n  </Variable>\n  <Variable input=\"true\" name=\"approvingIdentities\">\n    <Description>List of identities and/or workgroups names/ids that should be involved in the approval\n      process.</Description>\n  </Variable>\n  <Variable input=\"true\" name=\"identityElectronicSignature\">\n    <Description>The name of the electronic signature object that should be used when workitems\n      are completed by identities and/or workgroups.</Description>\n  </Variable>\n  <Variable input=\"true\" name=\"identityEmailTemplate\">\n    <Description>Name of the email template to use when notifying the identities/workgroups of pending approvals.</Description>\n  </Variable>\n  <Variable initializer=\"true\" input=\"true\" name=\"filterRejects\">\n    <Description>True to filter rejected items when running in Serial/SerialPoll mode.</Description>\n  </Variable>\n  <Variable initializer=\"false\" input=\"true\" name=\"setPreviousApprovalDecisions\">\n    <Description>True to pre-populate approval decisions from previous approvals.</Description>\n  </Variable>\n  <Variable name=\"approvalSplitPoint\">\n    <Description>Variable to determine when to split into parallel processing.\n          This should map to a configured approvalScheme. We will process all schemes up until\n          the approvalSplitPoint in the Pre Split approvals, and the remaining schemes after\n          we split the items. If this is not specified, we will not split the Provisioning\n          project, and process the entire project as a whole.</Description>\n  </Variable>\n  <Variable name=\"splitPlans\">\n    <Description>List of ProvisioningPlan that is generated from the splitPlans step if approvalSplitPoint is set.</Description>\n  </Variable>\n  <Variable name=\"splitProjects\">\n    <Description>Variable to store the returns if approvalSplitPoint is set. This will contain a List&amp;lt;ProvisioningProject&amp;gt;</Description>\n  </Variable>\n  <Variable name=\"splitApprovalSet\">\n    <Description>Variable to store the list of approvalSets returned from the split subprocess if approvalSplitPoint is set.</Description>\n  </Variable>\n  <Variable name=\"splitWorkItemComments\">\n    <Description>Variable to store the list of WorkItem comments returned from the split subprocess if approvalSplitPoint is set.</Description>\n  </Variable>\n</List>\n','Provisioning Workflow Config Form','<List>\n  <Step icon=\"Start\" name=\"Start\" posX=\"25\" posY=\"10\">\n    <Transition to=\"Initialize\"/>\n  </Step>\n  <Step icon=\"Task\" name=\"Initialize\" posX=\"134\" posY=\"10\">\n    <Arg name=\"formTemplate\" value=\"Identity Update\"/>\n    <Arg name=\"enableRetryRequest\" value=\"ref:enableRetryRequest\"/>\n    <Arg name=\"allowRequestsWithViolations\" value=\"ref:allowRequestsWithViolations\"/>\n    <Arg name=\"endOnManualWorkItems\" value=\"ref:endOnManualWorkItems\"/>\n    <Arg name=\"policiesToCheck\" value=\"ref:policiesToCheck\"/>\n    <Arg name=\"project\"/>\n    <Arg name=\"workItemComments\"/>\n    <Arg name=\"identityRequestId\"/>\n    <Arg name=\"source\" value=\"ref:source\"/>\n    <Arg name=\"identityDisplayName\" value=\"ref:identityDisplayName\"/>\n    <Arg name=\"requireViolationReviewComments\" value=\"ref:requireViolationReviewComments\"/>\n    <Arg name=\"identityRequest\"/>\n    <Arg name=\"trace\" value=\"ref:trace\"/>\n    <Arg name=\"batchRequestItemId\" value=\"ref:batchRequestItemId\"/>\n    <Arg name=\"endOnProvisioningForms\" value=\"ref:endOnProvisioningForms\"/>\n    <Arg name=\"plan\" value=\"ref:plan\"/>\n    <Arg name=\"flow\" value=\"ref:flow\"/>\n    <Arg name=\"identityName\" value=\"ref:identityName\"/>\n    <Arg name=\"approvalSet\"/>\n    <Arg name=\"policyViolations\"/>\n    <Arg name=\"violationReviewDecision\"/>\n    <Arg name=\"policyScheme\" value=\"ref:policyScheme\"/>\n    <Arg name=\"priority\" value=\"ref:workItemPriority\"/>\n    <Arg name=\"asyncCacheRefresh\"/>\n    <Arg name=\"optimisticProvisioning\" value=\"ref:optimisticProvisioning\"/>\n    <Arg name=\"launcher\" value=\"ref:launcher\"/>\n    <Description>\n      Call the standard subprocess to initialize the request, this includes\n      auditing, building the approvalset, compiling the plan into\n       project and checking policy violations.\n    </Description>\n    <Return name=\"project\" to=\"project\"/>\n    <Return name=\"approvalSet\" to=\"approvalSet\"/>\n    <Return name=\"policyViolations\" to=\"policyViolations\"/>\n    <Return name=\"identityRequestId\" to=\"identityRequestId\"/>\n    <Return name=\"violationReviewDecision\" to=\"violationReviewDecision\"/>\n    <Return merge=\"true\" name=\"workItemComments\" to=\"workItemComments\"/>\n    <WorkflowRef>\n      <Reference class=\"sailpoint.object.Workflow\" id=\"4028ab1063fdfb6d0163fdfc68a90035\" name=\"Identity Request Initialize\"/>\n    </WorkflowRef>\n    <Transition to=\"Exit On Manual Work Items\" when=\"script:(isTrue(endOnManualWorkItems) &amp;&amp; (project.getUnmanagedPlan() != null))\"/>\n    <Transition to=\"Exit On Provisioning Form\" when=\"script:(isTrue(endOnProvisioningForms) &amp;&amp; (project.hasQuestions()))\"/>\n    <Transition to=\"Exit On Policy Violation\">\n      <Script>\n        <Source>(\"cancel\".equals(violationReviewDecision) || ((size(policyViolations) > 0 ) &amp;&amp; (policyScheme.equals(\"fail\"))))</Source>\n      </Script>\n    </Transition>\n    <Transition to=\"Create Ticket\"/>\n  </Step>\n  <Step condition=\"script:(ticketManagementApplication != null)\" icon=\"Task\" name=\"Create Ticket\" posX=\"381\" posY=\"6\">\n    <Arg name=\"trace\" value=\"ref:trace\"/>\n    <Arg name=\"ticketManagementApplication\" value=\"ref:ticketManagementApplication\"/>\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Arg name=\"action\" value=\"open\"/>\n    <Arg name=\"identityRequestId\" value=\"ref:identityRequestId\"/>\n    <Arg name=\"source\" value=\"ref:source\"/>\n    <Arg name=\"priority\" value=\"ref:workItemPriority\"/>\n    <Arg name=\"ticketProject\"/>\n    <Arg name=\"ticketId\"/>\n    <Arg name=\"ticketDataGenerationRule\"/>\n    <Arg name=\"ticketPlan\"/>\n    <Description>\n      Call a subprocess to create a ticket in the ticketManagementApplication is non-null.\n      You can specify a specific \'ticketDataGenerationRule\' here or you can also specify\n      it on the application.  It\'ll be read from the argument first and fall back to the \'\n      application config.\n    </Description>\n    <Return name=\"ticketId\" to=\"externalTicketId\"/>\n    <WorkflowRef>\n      <Reference class=\"sailpoint.object.Workflow\" id=\"4028ab1063f427af0163f42904b20183\" name=\"Manage Ticket\"/>\n    </WorkflowRef>\n    <Transition to=\"Pre Split Approve\" when=\"script:(!isNull(approvalSplitPoint) &amp;&amp; csvToList(approvalScheme).contains(approvalSplitPoint))\"/>\n    <Transition to=\"Approve and Provision\"/>\n  </Step>\n  <Step condition=\"script:((flow == null) ||  (!&quot;UnlockAccount&quot;.equals(flow)))\" icon=\"Task\" name=\"Pre Split Approve\" posX=\"518\" posY=\"63\">\n    <Arg name=\"approvalScheme\">\n      <Script>\n        <Source>\n              import java.util.List;\n              import java.util.ArrayList;\n              import java.util.Iterator;\n              import sailpoint.tools.Util;\n\n              List schemes = Util.csvToList(approvalScheme);\n              List preSchemes = new ArrayList&lt;String>();\n              for (String s : Util.safeIterable(schemes)) {\n                if (s.equals(approvalSplitPoint)) {\n                    break;\n                } else {\n                    preSchemes.add(s);\n                }\n              }\n              return Util.listToCsv(preSchemes);\n          </Source>\n      </Script>\n    </Arg>\n    <Arg name=\"identityEmailTemplate\" value=\"ref:identityEmailTemplate\"/>\n    <Arg name=\"securityOfficerElectronicSignature\" value=\"ref:securityOfficerElectronicSignature\"/>\n    <Arg name=\"fallbackApprover\" value=\"ref:fallbackApprover\"/>\n    <Arg name=\"workItemHoursBetweenReminders\"/>\n    <Arg name=\"workItemPriority\"/>\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Arg name=\"workItemComments\"/>\n    <Arg name=\"identityRequestId\" value=\"ref:identityRequestId\"/>\n    <Arg name=\"approvalSplitPoint\" value=\"ref:approvalSplitPoint\"/>\n    <Arg name=\"managerElectronicSignature\" value=\"ref:managerElectronicSignature\"/>\n    <Arg name=\"workItemDescription\"/>\n    <Arg name=\"identityDisplayName\" value=\"ref:identityDisplayName\"/>\n    <Arg name=\"ownerElectronicSignature\" value=\"ref:ownerElectronicSignature\"/>\n    <Arg name=\"approvalMode\" value=\"ref:approvalMode\"/>\n    <Arg name=\"trace\" value=\"ref:trace\"/>\n    <Arg name=\"dontUpdatePlan\"/>\n    <Arg name=\"workItemEscalationRule\"/>\n    <Arg name=\"approvalAssignmentRule\"/>\n    <Arg name=\"plan\" value=\"ref:plan\"/>\n    <Arg name=\"flow\" value=\"ref:flow\"/>\n    <Arg name=\"identityElectronicSignature\" value=\"ref:identityElectronicSignature\"/>\n    <Arg name=\"identityName\" value=\"ref:identityName\"/>\n    <Arg name=\"approvalSet\" value=\"ref:approvalSet\"/>\n    <Arg name=\"policyViolations\" value=\"ref:policyViolations\"/>\n    <Arg name=\"ownerEmailTemplate\" value=\"ref:approvalEmailTemplate\"/>\n    <Arg name=\"filterRejects\" value=\"ref:filterRejects\"/>\n    <Arg name=\"workItemReminderTemplate\"/>\n    <Arg name=\"priority\" value=\"ref:workItemPriority\"/>\n    <Arg name=\"workItemEscalationTemplate\"/>\n    <Arg name=\"setPreviousApprovalDecisions\" value=\"ref:setPreviousApprovalDecisions\"/>\n    <Arg name=\"clearApprovalDecisions\"/>\n    <Arg name=\"workItemMaxReminders\"/>\n    <Arg name=\"approvingIdentities\" value=\"ref:approvingIdentities\"/>\n    <Arg name=\"securityOfficerEmailTemplate\" value=\"ref:approvalEmailTemplate\"/>\n    <Arg name=\"securityOfficerName\" value=\"ref:securityOfficerName\"/>\n    <Arg name=\"workItemHoursTillEscalation\"/>\n    <Arg name=\"managerEmailTemplate\" value=\"ref:approvalEmailTemplate\"/>\n    <Arg name=\"launcher\" value=\"ref:launcher\"/>\n    <Description>\n      Call to our standard subprocess to handle the default approvals for\n      manager, owner and security officer.\n    </Description>\n    <Return name=\"approvalSet\"/>\n    <Return name=\"workItemComments\"/>\n    <Return name=\"project\"/>\n    <WorkflowRef>\n      <Reference class=\"sailpoint.object.Workflow\" id=\"4028ab1063f427af0163f4291a6401ac\" name=\"Provisioning Approval Subprocess\"/>\n    </WorkflowRef>\n    <Transition to=\"Split Plan\"/>\n  </Step>\n  <Step action=\"call:splitProvisioningPlan\" icon=\"Task\" name=\"Split Plan\" posX=\"618\" posY=\"63\" resultVariable=\"splitPlans\">\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Description>\n          Step to split the provisioning project into individual projects for each item requested.\n          This will only run if the approvalSplitPoint is configured.\n      </Description>\n    <Transition to=\"Approve and Provision Split\"/>\n  </Step>\n  <Step icon=\"Task\" name=\"Approve and Provision Split\" posX=\"783\" posY=\"63\">\n    <Arg name=\"formTemplate\" value=\"Identity Update\"/>\n    <Arg name=\"identityEmailTemplate\" value=\"ref:identityEmailTemplate\"/>\n    <Arg name=\"enableRetryRequest\"/>\n    <Arg name=\"securityOfficerElectronicSignature\" value=\"ref:securityOfficerElectronicSignature\"/>\n    <Arg name=\"fallbackApprover\" value=\"ref:fallbackApprover\"/>\n    <Arg name=\"endOnManualWorkItems\"/>\n    <Arg name=\"userEmailTemplate\"/>\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Arg name=\"workItemComments\" value=\"ref:workItemComments\"/>\n    <Arg name=\"identityRequestId\" value=\"ref:identityRequestId\"/>\n    <Arg name=\"approvalSplitPoint\" value=\"ref:approvalSplitPoint\"/>\n    <Arg name=\"source\" value=\"ref:source\"/>\n    <Arg name=\"identityDisplayName\" value=\"ref:identityDisplayName\"/>\n    <Arg name=\"foregroundProvisioning\" value=\"ref:foregroundProvisioning\"/>\n    <Arg name=\"ownerElectronicSignature\" value=\"ref:ownerElectronicSignature\"/>\n    <Arg name=\"batchRequestItemId\"/>\n    <Arg name=\"plan\" value=\"ref:plan\"/>\n    <Arg name=\"flow\" value=\"ref:flow\"/>\n    <Arg name=\"identityElectronicSignature\" value=\"ref:identityElectronicSignature\"/>\n    <Arg name=\"identityName\" value=\"ref:identityName\"/>\n    <Arg name=\"approvalSet\" value=\"ref:approvalSet\"/>\n    <Arg name=\"filterRejects\" value=\"ref:filterRejects\"/>\n    <Arg name=\"ownerEmailTemplate\" value=\"ref:approvalEmailTemplate\"/>\n    <Arg name=\"priority\" value=\"ref:workItemPriority\"/>\n    <Arg name=\"splitProvisioning\" value=\"true\"/>\n    <Arg name=\"workItemEscalationTemplate\" value=\"ref:workItemEscalationTemplate\"/>\n    <Arg name=\"clearApprovalDecisions\"/>\n    <Arg name=\"workItemMaxReminders\" value=\"ref:workItemMaxReminders\"/>\n    <Arg name=\"requesterEmailTemplate\"/>\n    <Arg name=\"approvalEmailTemplate\"/>\n    <Arg name=\"ticketManagementApplication\" value=\"ref:ticketManagementApplication\"/>\n    <Arg name=\"securityOfficerName\" value=\"ref:securityOfficerName\"/>\n    <Arg name=\"approvingIdentities\" value=\"ref:approvingIdentities\"/>\n    <Arg name=\"workItemHoursTillEscalation\" value=\"ref:workItemHoursTillEscalation\"/>\n    <Arg name=\"managerEmailTemplate\" value=\"ref:approvalEmailTemplate\"/>\n    <Arg name=\"launcher\" value=\"ref:launcher\"/>\n    <Arg name=\"approvalScheme\">\n      <Script>\n        <Source>\n              import java.util.List;\n              import java.util.Iterator;\n              import sailpoint.tools.Util;\n              List schemes = Util.csvToList(approvalScheme);\n              Iterator it = schemes.iterator();\n              while (it.hasNext()) {\n                String s = it.next();\n                if (!s.equals(approvalSplitPoint)) {\n                    it.remove();\n                } else {\n                    break;\n                }\n              }\n              return Util.listToCsv(schemes);\n            </Source>\n      </Script>\n    </Arg>\n    <Arg name=\"workItemHoursBetweenReminders\" value=\"ref:workItemHoursBetweenReminders\"/>\n    <Arg name=\"workItemPriority\"/>\n    <Arg name=\"managerElectronicSignature\" value=\"ref:managerElectronicSignature\"/>\n    <Arg name=\"approvalMode\" value=\"ref:approvalMode\"/>\n    <Arg name=\"trace\" value=\"ref:trace\"/>\n    <Arg name=\"workItemEscalationRule\" value=\"ref:workItemEscalationRule\"/>\n    <Arg name=\"endOnProvisioningForms\"/>\n    <Arg name=\"approvalAssignmentRule\"/>\n    <Arg name=\"manualActionsEmailTemplate\" value=\"Pending Manual Changes\"/>\n    <Arg name=\"policyViolations\" value=\"ref:policyViolations\"/>\n    <Arg name=\"policyScheme\" value=\"ref:policyScheme\"/>\n    <Arg name=\"workItemReminderTemplate\" value=\"ref:workItemReminderTemplate\"/>\n    <Arg name=\"setPreviousApprovalDecisions\" value=\"ref:setPreviousApprovalDecisions\"/>\n    <Arg name=\"optimisticProvisioning\" value=\"ref:optimisticProvisioning\"/>\n    <Arg name=\"securityOfficerEmailTemplate\" value=\"ref:approvalEmailTemplate\"/>\n    <Description>\n          Call the Approve and Provision Subprocess for each Provisioning Project generated in the Split Plan step.\n      </Description>\n    <Replicator arg=\"plan\" items=\"splitPlans\"/>\n    <Return name=\"project\" to=\"splitProjects\"/>\n    <Return name=\"workItemComments\" to=\"splitWorkItemComments\"/>\n    <Return name=\"approvalSet\" to=\"splitApprovalSet\"/>\n    <WorkflowRef>\n      <Reference class=\"sailpoint.object.Workflow\" id=\"4028ab1063fdfb6d0163fdfc6e49003b\" name=\"Approve and Provision Subprocess\"/>\n    </WorkflowRef>\n    <Transition to=\"Assimilate Splits\"/>\n  </Step>\n  <Step action=\"call:joinLCMProvWorkflowSplits\" icon=\"Task\" name=\"Assimilate Splits\" posX=\"914\" posY=\"63\">\n    <Arg name=\"splitProjects\" value=\"ref:splitProjects\"/>\n    <Arg name=\"splitApprovalSet\" value=\"ref:splitApprovalSet\"/>\n    <Arg name=\"splitWorkItemComments\" value=\"ref:splitWorkItemComments\"/>\n    <Description>\n          Assimilate all projects returned from the split into the global project.\n      </Description>\n    <Transition to=\"Refresh Identity\"/>\n  </Step>\n  <Step icon=\"Task\" name=\"Approve and Provision\" posX=\"699\" posY=\"7\">\n    <Arg name=\"formTemplate\" value=\"Identity Update\"/>\n    <Arg name=\"identityEmailTemplate\" value=\"ref:identityEmailTemplate\"/>\n    <Arg name=\"enableRetryRequest\"/>\n    <Arg name=\"securityOfficerElectronicSignature\" value=\"ref:securityOfficerElectronicSignature\"/>\n    <Arg name=\"fallbackApprover\" value=\"ref:fallbackApprover\"/>\n    <Arg name=\"endOnManualWorkItems\"/>\n    <Arg name=\"userEmailTemplate\"/>\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Arg name=\"workItemComments\" value=\"ref:workItemComments\"/>\n    <Arg name=\"identityRequestId\" value=\"ref:identityRequestId\"/>\n    <Arg name=\"approvalSplitPoint\" value=\"ref:approvalSplitPoint\"/>\n    <Arg name=\"source\" value=\"ref:source\"/>\n    <Arg name=\"identityDisplayName\" value=\"ref:identityDisplayName\"/>\n    <Arg name=\"foregroundProvisioning\" value=\"ref:foregroundProvisioning\"/>\n    <Arg name=\"ownerElectronicSignature\" value=\"ref:ownerElectronicSignature\"/>\n    <Arg name=\"batchRequestItemId\"/>\n    <Arg name=\"plan\" value=\"ref:plan\"/>\n    <Arg name=\"flow\" value=\"ref:flow\"/>\n    <Arg name=\"identityElectronicSignature\" value=\"ref:identityElectronicSignature\"/>\n    <Arg name=\"identityName\" value=\"ref:identityName\"/>\n    <Arg name=\"approvalSet\" value=\"ref:approvalSet\"/>\n    <Arg name=\"filterRejects\" value=\"ref:filterRejects\"/>\n    <Arg name=\"ownerEmailTemplate\" value=\"ref:approvalEmailTemplate\"/>\n    <Arg name=\"priority\" value=\"ref:workItemPriority\"/>\n    <Arg name=\"splitProvisioning\" value=\"false\"/>\n    <Arg name=\"workItemEscalationTemplate\" value=\"ref:workItemEscalationTemplate\"/>\n    <Arg name=\"clearApprovalDecisions\"/>\n    <Arg name=\"workItemMaxReminders\" value=\"ref:workItemMaxReminders\"/>\n    <Arg name=\"requesterEmailTemplate\"/>\n    <Arg name=\"approvalEmailTemplate\"/>\n    <Arg name=\"ticketManagementApplication\" value=\"ref:ticketManagementApplication\"/>\n    <Arg name=\"securityOfficerName\" value=\"ref:securityOfficerName\"/>\n    <Arg name=\"approvingIdentities\" value=\"ref:approvingIdentities\"/>\n    <Arg name=\"workItemHoursTillEscalation\" value=\"ref:workItemHoursTillEscalation\"/>\n    <Arg name=\"managerEmailTemplate\" value=\"ref:approvalEmailTemplate\"/>\n    <Arg name=\"launcher\" value=\"ref:launcher\"/>\n    <Arg name=\"approvalScheme\" value=\"ref:approvalScheme\"/>\n    <Arg name=\"workItemHoursBetweenReminders\" value=\"ref:workItemHoursBetweenReminders\"/>\n    <Arg name=\"workItemPriority\"/>\n    <Arg name=\"managerElectronicSignature\" value=\"ref:managerElectronicSignature\"/>\n    <Arg name=\"approvalMode\" value=\"ref:approvalMode\"/>\n    <Arg name=\"trace\" value=\"ref:trace\"/>\n    <Arg name=\"workItemEscalationRule\" value=\"ref:workItemEscalationRule\"/>\n    <Arg name=\"endOnProvisioningForms\"/>\n    <Arg name=\"approvalAssignmentRule\"/>\n    <Arg name=\"manualActionsEmailTemplate\" value=\"Pending Manual Changes\"/>\n    <Arg name=\"policyViolations\" value=\"ref:policyViolations\"/>\n    <Arg name=\"policyScheme\" value=\"ref:policyScheme\"/>\n    <Arg name=\"workItemReminderTemplate\" value=\"ref:workItemReminderTemplate\"/>\n    <Arg name=\"setPreviousApprovalDecisions\" value=\"ref:setPreviousApprovalDecisions\"/>\n    <Arg name=\"optimisticProvisioning\" value=\"ref:optimisticProvisioning\"/>\n    <Arg name=\"securityOfficerEmailTemplate\" value=\"ref:approvalEmailTemplate\"/>\n    <Description>\n          Finish any remaining approvals and provision.\n      </Description>\n    <Return name=\"project\" to=\"project\"/>\n    <Return name=\"approvalSet\" to=\"approvalSet\"/>\n    <Return name=\"workItemComments\" to=\"workItemComments\"/>\n    <WorkflowRef>\n      <Reference class=\"sailpoint.object.Workflow\" id=\"4028ab1063fdfb6d0163fdfc6e49003b\" name=\"Approve and Provision Subprocess\"/>\n    </WorkflowRef>\n    <Transition to=\"Refresh Identity\"/>\n  </Step>\n  <Step action=\"call:refreshIdentity\" condition=\"ref:doRefresh\" icon=\"Task\" name=\"Refresh Identity\" posX=\"1028\" posY=\"7\">\n    <Arg name=\"identityName\" value=\"ref:identityName\"/>\n    <Arg name=\"correlateEntitlements\" value=\"true\"/>\n    <Description>\n      Add arguments as necessary to enable refresh features.  Typically you\n      only want this to correlate roles.  Don\'t ask for provisioning  since that\n      can result in provisioning policies that need to be presented and it\'s\n      too late for that.  This is only to get role detection and exception\n      entitlements in the cube.\n    </Description>\n    <Transition to=\"Notify\"/>\n  </Step>\n  <Step icon=\"Task\" name=\"Notify\" posX=\"1131\" posY=\"7\">\n    <Arg name=\"approvalScheme\" value=\"ref:approvalScheme\"/>\n    <Arg name=\"identityName\" value=\"ref:identityName\"/>\n    <Arg name=\"notificationScheme\" value=\"ref:notificationScheme\"/>\n    <Arg name=\"userEmailTemplate\" value=\"ref:userEmailTemplate\"/>\n    <Arg name=\"approvalSet\" value=\"ref:approvalSet\"/>\n    <Arg name=\"policyViolations\" value=\"ref:policyViolations\"/>\n    <Arg name=\"source\" value=\"ref:source\"/>\n    <Arg name=\"priority\" value=\"ref:workItemPriority\"/>\n    <Arg name=\"identityDisplayName\" value=\"ref:identityDisplayName\"/>\n    <Arg name=\"trace\" value=\"ref:trace\"/>\n    <Arg name=\"requesterEmailTemplate\" value=\"ref:requesterEmailTemplate\"/>\n    <Arg name=\"securityOfficerName\" value=\"ref:securityOfficerName\"/>\n    <Arg name=\"securityOfficerEmailTemplate\" value=\"ref:securityOfficerEmailTemplate\"/>\n    <Arg name=\"plan\" value=\"ref:plan\"/>\n    <Arg name=\"flow\" value=\"ref:flow\"/>\n    <Arg name=\"managerEmailTemplate\" value=\"ref:managerEmailTemplate\"/>\n    <Arg name=\"launcher\" value=\"ref:launcher\"/>\n    <Description>\n      Call the standard subprocess that will notify the various\n      actors based on notification scheme.\n    </Description>\n    <WorkflowRef>\n      <Reference class=\"sailpoint.object.Workflow\" id=\"4028ab1063fdfb6d0163fdfc69b30037\" name=\"Identity Request Notify\"/>\n    </WorkflowRef>\n    <Transition to=\"end\"/>\n  </Step>\n  <Step action=\"call:addMessage\" name=\"Exit On Policy Violation\" posX=\"201\" posY=\"253\">\n    <Arg name=\"message\" value=\"Failed due to policy violation(s)\"/>\n    <Arg name=\"type\" value=\"Error\"/>\n    <Transition to=\"end\"/>\n  </Step>\n  <Step action=\"call:addMessage\" name=\"Exit On Manual Work Items\" posX=\"364\" posY=\"107\">\n    <Arg name=\"message\" value=\"Failed due to manual work item(s)\"/>\n    <Arg name=\"type\" value=\"Error\"/>\n    <Transition to=\"end\"/>\n  </Step>\n  <Step action=\"call:addMessage\" name=\"Exit On Provisioning Form\" posX=\"280\" posY=\"178\">\n    <Arg name=\"message\" value=\"Failed due to provisioning form\"/>\n    <Arg name=\"type\" value=\"Error\"/>\n    <Transition to=\"end\"/>\n  </Step>\n  <Step catches=\"complete\" icon=\"Catches\" name=\"Finalize\" posX=\"1058\" posY=\"308\">\n    <Arg name=\"trace\" value=\"ref:trace\"/>\n    <Arg name=\"batchRequestItemId\" value=\"ref:batchRequestItemId\"/>\n    <Arg name=\"autoVerifyIdentityRequest\"/>\n    <Arg name=\"approvalSet\" value=\"ref:approvalSet\"/>\n    <Arg name=\"ticketManagementApplication\" value=\"ref:ticketManagementApplication\"/>\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Arg name=\"identityRequestId\" value=\"ref:identityRequestId\"/>\n    <Arg name=\"priority\" value=\"ref:workItemPriority\"/>\n    <Arg name=\"ticketDataGenerationRule\"/>\n    <Description>\n      Call the standard subprocess that can audit/finalize the request.\n    </Description>\n    <WorkflowRef>\n      <Reference class=\"sailpoint.object.Workflow\" id=\"4028ab1063fdfb6d0163fdfc6b2b0039\" name=\"Identity Request Finalize\"/>\n    </WorkflowRef>\n    <Transition to=\"end\"/>\n  </Step>\n  <Step icon=\"Stop\" name=\"end\" posX=\"1131\" posY=\"253\"/>\n</List>\n',' ',' ','Identity,Role,PolicyViolation,LCM,BatchRequest'),('4028ab1063fdfb6d0163fdfc7045003d',1528974569541,1739425378149,NULL,NULL,NULL,'LCM Create and Update',NULL,'LCMIdentity','LCM',_binary '\0',_binary '\0',_binary '\0',0,_binary '\0','sailpoint.api.StandardWorkflowHandler',NULL,'<List>\n  <Variable input=\"true\" name=\"identityName\">\n    <Description>The name of the identity we\'re supposed to update.</Description>\n  </Variable>\n  <Variable initializer=\"script:(identityDisplayName != void) ? identityDisplayName : resolveDisplayName(identityName)\" input=\"true\" name=\"identityDisplayName\">\n    <Description>\n      The displayName of the identity being updated.\n      Query for this using a projection query and fall back to the name.\n    </Description>\n  </Variable>\n  <Variable initializer=\"false\" input=\"true\" name=\"endOnManualWorkItems\">\n    <Description>Option to skip requests with manual work items.</Description>\n  </Variable>\n  <Variable initializer=\"false\" input=\"true\" name=\"endOnProvisioningForms\">\n    <Description>Option to skip requests with provisioning forms.</Description>\n  </Variable>\n  <Variable input=\"true\" name=\"batchRequestItemId\">\n    <Description>\n      Used by the batch interface to record back individual request item status. The specific item id for the individual request in the batch file.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"plan\">\n    <Description>The provisioning plan ready to execute.</Description>\n  </Variable>\n  <Variable input=\"true\" name=\"flow\">\n    <Description>\n      The name of the LCM flow that launched this workflow.\n\n      This is one of these two values:\n\n      IdentityCreateRequest\n      IdentityEditRequest\n    </Description>\n  </Variable>\n  <Variable editable=\"true\" name=\"optimisticProvisioning\">\n    <Description>\n      Set to true to enable optimistic provisioning.  This will cause\n      changes to the entitlements compiled from role assignments to be\n      applied immediately to the identity cube rather than waiting\n      for the next refresh/reaggregation after the provisioning system\n      completes the request.\n    </Description>\n  </Variable>\n  <Variable editable=\"true\" initializer=\"true\" name=\"foregroundProvisioning\">\n    <Description>\n      Normally provisioning is done in a step that uses the \"background\"\n      option to force the workflow to be suspend and be resumed in a\n      background task thread.  This prevents the browser session from\n      hanging since provision can sometimes take a long time.  For demos\n      and testing it can be better to do this in the foreground so that\n      provisioning will have been performed when control is returned to the\n      user.  This prevents having to run the Perform Maintenance task to\n      see the results of the request.\n    </Description>\n  </Variable>\n  <Variable editable=\"true\" name=\"doRefresh\">\n    <Description>\n      Set to true to cause an identity refresh after the changes in the plan\n      have been provisioned.  This is normally off, you might want this on\n      if you want modification of identity or link attributes to result in\n      an immediate re-evaluation of assigned and detected roles.\n    </Description>\n  </Variable>\n  <Variable initializer=\"Normal\" input=\"true\" name=\"workItemPriority\">\n    <Description>\n       The String version of a WorkItem.Priority. This variable is\n       used to set the priority on all of the workitems generated\n       as part of this workflow and also set on the IdentityRequest\n       object.\n    </Description>\n  </Variable>\n  <Variable initializer=\"user,requester\" input=\"true\" name=\"notificationScheme\">\n    <Description>\n     A string that specifies who should be notified when the request has been complete.\n     The value can be null or a csv of one or more of the following options.\n\n     none or null\n       disable notifications\n\n     user\n       Identity that is being update will be notified.\n\n     manager\n       The manager of the Identity that is being updated will be notified.\n\n     requester\n       The person that has requested the update will be notified.\n    </Description>\n  </Variable>\n  <Variable initializer=\"LCM User Notification\" input=\"true\" name=\"userEmailTemplate\">\n    <Description>\n     The email template to use for user notification.\n    </Description>\n  </Variable>\n  <Variable initializer=\"LCM Requester Notification\" input=\"true\" name=\"requesterEmailTemplate\">\n    <Description>\n     The email template to use for requester notification.\n    </Description>\n  </Variable>\n  <Variable initializer=\"LCM Manager Notification\" input=\"true\" name=\"managerEmailTemplate\">\n    <Description>\n     The email template to use for manager notification.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"securityOfficerEmailTemplate\">\n    <Description>\n     The email template to use for security officer notification.\n    </Description>\n  </Variable>\n  <Variable initializer=\"serial\" input=\"true\" name=\"approvalMode\">\n    <Description>\n     A string that specifies how we should handle the approvals.\n\n     By default this is serial since most of these request with\n     the exception of manager transfers will have only one approver.\n\n     parallel\n       Approvals are processed concurrently and there must be consensus,\n       we wait for all approvers to approve.  The first approver that\n       rejects terminates the entire approval.\n\n     parallelPoll\n       Approvals are processed concurrently but consensus is not required.\n       All approvals will be processed, we don\'t stop if there are any\n       rejections.\n\n     serial\n       Approvals are processed one at a time and there must be consensus.\n       The first approver that rejects terminates the entire approval.\n\n     serialPoll\n       Approvals are processed in order but consensus is not required.\n       All approvals will be processed, we don\'t stop if there are any\n       rejections.  In effect we are \"taking a poll\" of the approvers.\n\n     any\n      Approvals are processed concurrently, the first approver to\n      respond makes the decision for the group.\n    </Description>\n  </Variable>\n  <Variable initializer=\"manager, newManager\" input=\"true\" name=\"approvalScheme\">\n    <Description>\n      A String that specifies how approvals should be generated for\n      this workflow there are three built-in modes\n\n      none - disabled approvals\n\n      manager - The user\'s current manager will get approvals\n\n      newManager - The newly assigned manager will get approvals when\n                   manager transfers occur. Otherwise the user\'s manager\n                   current manager will be the approver.\n    </Description>\n  </Variable>\n  <Variable initializer=\"spadmin\" input=\"true\" name=\"fallbackApprover\">\n    <Description>\n      A String that specifies the name of the Identity that will\n      be assigned any approvals where the owner of the approver\n      can\'t be resolved. Example if the scheme is \"owner\" and the\n      application doesn\'t specify and owner.\n    </Description>\n  </Variable>\n  <Variable initializer=\"LCM Identity Update Approval\" input=\"true\" name=\"approvalEmailTemplate\">\n    <Description>\n     The email template to use for approval notifications.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"securityOfficerName\">\n    <Description>\n       The name of the identity that will be sent approvals\n       during security officer approvals.\n    </Description>\n  </Variable>\n  <Variable initializer=\"continue\" input=\"true\" name=\"policyScheme\">\n    <Description>\n      A String that specifies how policy checks effect the overall\n      process.\n\n      none - disabled policy checking\n\n      fail -  fail and exit the workflow if any policy violations are found\n\n      continue -  continue if policy violations are found\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"ticketManagementApplication\">\n    <Description>\n      Name of the application that can handle ticket requests.\n      When non-null the Manage Ticket Steps will be visited to open\n      tickets during the workflow lifecycle.\n    </Description>\n  </Variable>\n  <Variable name=\"ticketId\">\n    <Description>\n      The id of the ticket that is generated by the ticketingManagementApplication.\n      This is typically generated on the \"open\" call, and then used in subsequent\n      calls.  It is also stored on the IdentityRequest object under the\n      externalTicketId variable.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"policiesToCheck\">\n    <Description>\n      A List of policies that should be checked. If this list is\n      empty all violations will be checked. Used in combination\n      with policyScheme.\n    </Description>\n  </Variable>\n  <Variable name=\"policyViolations\">\n    <Description>\n       List of policy violations that were found during our initial policy scan.\n       This list is passed into each work item so the approvers can see\n       pending violations.\n    </Description>\n  </Variable>\n  <Variable initializer=\"LCM\" input=\"true\" name=\"source\">\n    <Description>\n      String version of sailpoint.object.Source to indicate\n      where the request originated.  Defaults to LCM.\n    </Description>\n  </Variable>\n  <Variable name=\"approvalSet\">\n    <Description>\n       This attributes is set during the \"Build Approval Set\" step,\n       which builds this list by going through the ProvisioningPlan\n       to build the line items that need to be approved,\n\n       This variable includes all ApprovalItems that are part of\n       the request process and is updated during the AfterScript\n       of the approval process by assimilating the decisions\n       and comments from the Approvals copy of the ApprovalItem.\n    </Description>\n  </Variable>\n  <Variable initializer=\"false\" name=\"trace\">\n    <Description>\n      Used for debugging this workflow and when set to true trace\n      will be sent to stdout.\n    </Description>\n  </Variable>\n  <Variable name=\"project\">\n    <Description>\n      ProvisioningProject which is just a compiled version of the ProvisioningPlan.\n    </Description>\n  </Variable>\n  <Variable name=\"approvalForm\">\n    <Description>\n       The form that is generated based on the changes that were made.  This\n       form will be sent into the workitem and allow editing of the\n       requested values during the approval process. This is generated\n       in \"Build Approval Form\" based on the passed-in plan.\n    </Description>\n  </Variable>\n  <Variable name=\"identityRequestId\" output=\"true\">\n    <Description>\n       The sequence id of the Identity request object which is stored in\n       the name field of the identity request.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"approverElectronicSignature\">\n    <Description>\n       The name of the electronic signature object that should be used when workitems\n       are completed by the batch approver when performing batch operations.\n    </Description>\n  </Variable>\n</List>\n','Provisioning Workflow Config Form','<List>\n  <Step icon=\"Start\" name=\"Start\" posX=\"14\" posY=\"12\">\n    <Transition to=\"Build Approval Set\"/>\n  </Step>\n  <Step action=\"rule:LCM Build Identity ApprovalSet\" icon=\"Task\" name=\"Build Approval Set\" posX=\"98\" posY=\"12\" resultVariable=\"approvalSet\">\n    <Description>\n       The rule will go through the plan and build an approvalItem for each AccountRequest,\n       typically there is just one for the IIQ application requests.\n\n       The rule will also annotate the plan with the previousValues so that they\n       can be assimilated onto the Form that is build, which is used during the approval\n       process for edits.\n\n       Because this has some special handling keep it here in the workflow\n       and pass the approval set into the initialization process.\n    </Description>\n    <Transition to=\"Initialize\"/>\n  </Step>\n  <Step icon=\"Task\" name=\"Initialize\" posX=\"183\" posY=\"12\">\n    <Arg name=\"approvalSet\" value=\"ref:approvalSet\"/>\n    <Arg name=\"flow\" value=\"ref:flow\"/>\n    <Arg name=\"identityName\" value=\"ref:identityName\"/>\n    <Arg name=\"identityDisplayName\" value=\"ref:identityDisplayName\"/>\n    <Arg name=\"launcher\" value=\"ref:launcher\"/>\n    <Arg name=\"optimisticProvisioning\" value=\"false\"/>\n    <Arg name=\"plan\" value=\"ref:plan\"/>\n    <Arg name=\"policiesToCheck\" value=\"ref:policiesToCheck\"/>\n    <Arg name=\"policyScheme\" value=\"ref:policyScheme\"/>\n    <Arg name=\"priority\" value=\"ref:workItemPriority\"/>\n    <Arg name=\"source\" value=\"ref:source\"/>\n    <Arg name=\"trace\" value=\"ref:trace\"/>\n    <Arg name=\"batchRequestItemId\" value=\"ref:batchRequestItemId\"/>\n    <Arg name=\"endOnProvisioningForms\" value=\"ref:endOnProvisioningForms\"/>\n    <Arg name=\"endOnManualWorkItems\" value=\"ref:endOnManualWorkItems\"/>\n    <Description>\n      Call the standard subprocess to initialize the request, this includes\n      auditing, building the approvalset, compiling the plan into\n      a project and checking policy violations.\n    </Description>\n    <Return name=\"policyViolations\" to=\"policyViolations\"/>\n    <Return name=\"identityRequestId\" to=\"identityRequestId\"/>\n    <Return name=\"project\" to=\"project\"/>\n    <WorkflowRef>\n      <Reference class=\"sailpoint.object.Workflow\" id=\"4028ab1063fdfb6d0163fdfc68a90035\" name=\"Identity Request Initialize\"/>\n    </WorkflowRef>\n    <Transition to=\"Exit On Manual Work Items\" when=\"script:(isTrue(endOnManualWorkItems) &amp;&amp; (project.getUnmanagedPlan() != null))\"/>\n    <Transition to=\"Exit On Provisioning Form\" when=\"script:(isTrue(endOnProvisioningForms) &amp;&amp; (project.hasQuestions()))\"/>\n    <Transition to=\"Exit On Policy Violation\" when=\"script:((size(policyViolations) > 0 ) &amp;&amp; (policyScheme.equals(&quot;fail&quot;)))\"/>\n    <Transition to=\"Create Ticket\"/>\n  </Step>\n  <Step condition=\"script:(ticketManagementApplication != null)\" icon=\"Task\" name=\"Create Ticket\" posX=\"403\" posY=\"8\">\n    <Arg name=\"action\" value=\"open\"/>\n    <Arg name=\"source\" value=\"ref:source\"/>\n    <Arg name=\"priority\" value=\"ref:workItemPriority\"/>\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Arg name=\"ticketManagementApplication\" value=\"ref:ticketManagementApplication\"/>\n    <Arg name=\"identityRequestId\" value=\"ref:identityRequestId\"/>\n    <Arg name=\"ticketDataGenerationRule\" value=\"\"/>\n    <Arg name=\"trace\" value=\"ref:trace\"/>\n    <Description>\n      Call a subprocess to create a ticket in the ticketManagementApplication is non-null.\n      You can specify a specific \'ticketDataGenerationRule\' here or you can also specify\n      it on the application.  It\'ll be read from the argument first and fall back to the \'\n      application config.\n    </Description>\n    <Return name=\"ticketId\" to=\"externalTicketId\"/>\n    <WorkflowRef>\n      <Reference class=\"sailpoint.object.Workflow\" id=\"4028ab1063f427af0163f42904b20183\" name=\"Manage Ticket\"/>\n    </WorkflowRef>\n    <Transition to=\"Approve\"/>\n  </Step>\n  <Step icon=\"Task\" name=\"Approve\" posX=\"488\" posY=\"8\">\n    <Arg name=\"approvalMode\" value=\"ref:approvalMode\"/>\n    <Arg name=\"approvalScheme\" value=\"ref:approvalScheme\"/>\n    <Arg name=\"approvalSet\" value=\"ref:approvalSet\"/>\n    <Arg name=\"approvalEmailTemplate\" value=\"ref:approvalEmailTemplate\"/>\n    <Arg name=\"approverElectronicSignature\" value=\"ref:approverElectronicSignature\"/>\n    <Arg name=\"fallbackApprover\" value=\"ref:fallbackApprover\"/>\n    <Arg name=\"securityOfficerName\" value=\"ref:securityOfficerName\"/>\n    <Arg name=\"identityName\" value=\"ref:identityName\"/>\n    <Arg name=\"identityDisplayName\" value=\"ref:identityDisplayName\"/>\n    <Arg name=\"identityRequestId\" value=\"ref:identityRequestId\"/>\n    <Arg name=\"launcher\" value=\"ref:launcher\"/>\n    <Arg name=\"plan\" value=\"ref:plan\"/>\n    <Arg name=\"policyViolations\" value=\"ref:policyViolations\"/>\n    <Arg name=\"priority\" value=\"ref:workItemPriority\"/>\n    <Arg name=\"trace\" value=\"ref:trace\"/>\n    <Arg name=\"workItemComments\"/>\n    <Description>\n      Call the standard subprocess that will handle the built-in\n      owner, manager and security officer approval schemes.\n    </Description>\n    <Return name=\"approvalSet\"/>\n    <Return name=\"plan\"/>\n    <Return name=\"workItemComments\"/>\n    <WorkflowRef>\n      <Reference class=\"sailpoint.object.Workflow\" id=\"4028ab1063fdfb6d0163fdfc6bf6003a\" name=\"Identity Request Approve Identity Changes\"/>\n    </WorkflowRef>\n    <Transition to=\"Update Ticket Post Approval\"/>\n  </Step>\n  <Step condition=\"script:(ticketManagementApplication != null)\" icon=\"Task\" name=\"Update Ticket Post Approval\" posX=\"599\" posY=\"8\">\n    <Arg name=\"action\" value=\"postApproval\"/>\n    <Arg name=\"source\" value=\"ref:source\"/>\n    <Arg name=\"priority\" value=\"ref:workItemPriority\"/>\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Arg name=\"ticketManagementApplication\" value=\"ref:ticketManagementApplication\"/>\n    <Arg name=\"identityRequestId\" value=\"ref:identityRequestId\"/>\n    <Arg name=\"ticketDataGenerationRule\" value=\"\"/>\n    <Arg name=\"trace\" value=\"ref:trace\"/>\n    <Description>\n      Call a subprocess to update the ticket in the ticketManagementApplication is non-null.\n\n      You can specify a specific \'ticketDataGenerationRule\' here or you can also specify\n      it on the application.  It\'ll be read from the argument first and fall back to the \'\n      application config.\n\n    </Description>\n    <WorkflowRef>\n      <Reference class=\"sailpoint.object.Workflow\" id=\"4028ab1063f427af0163f42904b20183\" name=\"Manage Ticket\"/>\n    </WorkflowRef>\n    <Transition to=\"Process Approval Decisions\"/>\n  </Step>\n  <Step action=\"call:processPlanApprovalDecisions\" icon=\"Task\" name=\"Process Approval Decisions\" posX=\"764\" posY=\"9\" resultVariable=\"plan\">\n    <Arg name=\"approvalSet\" value=\"ref:approvalSet\"/>\n    <Arg name=\"plan\" value=\"ref:plan\"/>\n    <Arg name=\"disableAudit\" value=\"true\"/>\n    <Transition to=\"Notify\" when=\"script:approvalSet.hasRejected()\"/>\n    <Transition to=\"Recompile Project\"/>\n  </Step>\n  <Step action=\"call:recompileProvisioningProject\" icon=\"Task\" name=\"Recompile Project\" posX=\"913\" posY=\"5\" resultVariable=\"project\">\n    <Arg name=\"identityName\" value=\"ref:identityName\"/>\n    <Arg name=\"plan\" value=\"ref:plan\"/>\n    <Arg name=\"priority\" value=\"ref:workItemPriority\"/>\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Arg name=\"requester\" value=\"ref:launcher\"/>\n    <Arg name=\"source\" value=\"ref:source\"/>\n    <Arg name=\"optimisticProvisioning\" value=\"ref:optimisticProvisioning\"/>\n    <Description>Recompile the provisioning project with the plan.\n      The plan may contain modifications from the original plan if\n      it was modified during the approval process.\n      If you need to pass in provisioner options like \"noFiltering\"\n      or \"noRoleDeprovisioning\" you must pass them as explicit\n      arguments to the call.\n\n      The evaluation options \"requester\" and \"source\" are commonly\n      set here.\n\n      You can also pass things into the Template and Field scripts by\n      defining Args in this step.</Description>\n    <Transition to=\"Provision\"/>\n  </Step>\n  <Step icon=\"Task\" name=\"Provision\" posX=\"1014\" posY=\"6\">\n    <Arg name=\"approvalScheme\" value=\"ref:approvalScheme\"/>\n    <Arg name=\"approvalSet\" value=\"ref:approvalSet\"/>\n    <Arg name=\"fallbackApprover\" value=\"ref:fallbackApprover\"/>\n    <Arg name=\"foregroundProvisioning\" value=\"ref:foregroundProvisioning\"/>\n    <Arg name=\"formTemplate\" value=\"Identity Update\"/>\n    <Arg name=\"flow\" value=\"ref:flow\"/>\n    <Arg name=\"identityDisplayName\" value=\"ref:identityDisplayName\"/>\n    <Arg name=\"identityName\" value=\"ref:identityName\"/>\n    <Arg name=\"identityRequestId\" value=\"ref:identityRequestId\"/>\n    <Arg name=\"launcher\" value=\"ref:launcher\"/>\n    <Arg name=\"manualActionsEmailTemplate\" value=\"Pending Manual Changes\"/>\n    <Arg name=\"optimisticProvisioning\" value=\"ref:optimisticProvisioning\"/>\n    <Arg name=\"priority\" value=\"ref:workItemPriority\"/>\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Arg name=\"policyViolations\" value=\"ref:policyViolations\"/>\n    <Arg name=\"policyScheme\" value=\"ref:policyScheme\"/>\n    <Arg name=\"priority\" value=\"ref:workItemPriority\"/>\n    <Arg name=\"recompile\" value=\"false\"/>\n    <Arg name=\"trace\" value=\"ref:trace\"/>\n    <Description>\n      Call the standard subprocess that will process the\n      approval decisions and do provisioning.  This\n      includes calling any configured provisioning\n      connectors and building manual actions.\n    </Description>\n    <Return name=\"project\" to=\"project\"/>\n    <WorkflowRef>\n      <Reference class=\"sailpoint.object.Workflow\" id=\"4028ab1063fdfb6d0163fdfc6aa00038\" name=\"Identity Request Provision\"/>\n    </WorkflowRef>\n    <Transition to=\"Post Provision\"/>\n  </Step>\n  <Step action=\"script:approvalSet.setAllProvisioned();\" icon=\"Task\" name=\"Post Provision\" posX=\"1110\" posY=\"7\">\n    <Description>\n      Mark all of the items in the approvalset provisioned since these\n      are all synchronous activities.\n    </Description>\n    <Transition to=\"Update Ticket Post Provision\"/>\n  </Step>\n  <Step condition=\"script:(ticketManagementApplication != null)\" icon=\"Task\" name=\"Update Ticket Post Provision\" posX=\"1111\" posY=\"115\">\n    <Arg name=\"action\" value=\"postProvisioning\"/>\n    <Arg name=\"source\" value=\"ref:source\"/>\n    <Arg name=\"priority\" value=\"ref:workItemPriority\"/>\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Arg name=\"ticketManagementApplication\" value=\"ref:ticketManagementApplication\"/>\n    <Arg name=\"identityRequestId\" value=\"ref:identityRequestId\"/>\n    <Arg name=\"ticketDataGenerationRule\" value=\"\"/>\n    <Arg name=\"trace\" value=\"ref:trace\"/>\n    <Description>\n      Call a subprocess to update the ticket in the ticketManagementApplication is non-null.\n\n      You can specify a specific \'ticketDataGenerationRule\' here or you can also specify\n      it on the application.  It\'ll be read from the argument first and fall back to the \'\n      application config.\n\n    </Description>\n    <WorkflowRef>\n      <Reference class=\"sailpoint.object.Workflow\" id=\"4028ab1063f427af0163f42904b20183\" name=\"Manage Ticket\"/>\n    </WorkflowRef>\n    <Transition to=\"Refresh Identity\"/>\n  </Step>\n  <Step action=\"call:refreshIdentity\" condition=\"ref:doRefresh\" icon=\"Task\" name=\"Refresh Identity\" posX=\"954\" posY=\"114\">\n    <Arg name=\"identityName\" value=\"ref:identityName\"/>\n    <Arg name=\"correlateEntitlements\" value=\"true\"/>\n    <Arg name=\"provision\" value=\"true\"/>\n    <Arg name=\"synchronizeAttributes\" value=\"true\"/>\n    <Description>\n      Add arguments as necessary to enable refresh features.  Typically you only want this\n      to correlate roles and possibly provision if we notice new assigned roles.\n      Note that provisioning will be done in the Identity Refresh workflow so if there\n      are any provisioning forms to display we won\'t feed them directly to the\n      current user, they\'ll have to return to the inbox.\n    </Description>\n    <Transition to=\"Notify\"/>\n  </Step>\n  <Step icon=\"Task\" name=\"Notify\" posX=\"830\" posY=\"114\">\n    <Arg name=\"approvalScheme\" value=\"ref:approvalScheme\"/>\n    <Arg name=\"approvalSet\" value=\"ref:approvalSet\"/>\n    <Arg name=\"flow\" value=\"ref:flow\"/>\n    <Arg name=\"identityDisplayName\" value=\"ref:identityDisplayName\"/>\n    <Arg name=\"identityName\" value=\"ref:identityName\"/>\n    <Arg name=\"launcher\" value=\"ref:launcher\"/>\n    <Arg name=\"notificationScheme\" value=\"ref:notificationScheme\"/>\n    <Arg name=\"userEmailTemplate\" value=\"ref:userEmailTemplate\"/>\n    <Arg name=\"requesterEmailTemplate\" value=\"ref:requesterEmailTemplate\"/>\n    <Arg name=\"managerEmailTemplate\" value=\"ref:managerEmailTemplate\"/>\n    <Arg name=\"securityOfficerEmailTemplate\" value=\"ref:securityOfficerEmailTemplate\"/>\n    <Arg name=\"securityOfficerName\" value=\"ref:securityOfficerName\"/>\n    <Arg name=\"plan\" value=\"ref:plan\"/>\n    <Arg name=\"policyViolations\" value=\"ref:policyViolations\"/>\n    <Arg name=\"priority\" value=\"ref:workItemPriority\"/>\n    <Arg name=\"trace\" value=\"ref:trace\"/>\n    <Arg name=\"source\" value=\"ref:source\"/>\n    <Description>\n      Call the standard subprocess that will notify the various\n      actors based on notification scheme.\n    </Description>\n    <WorkflowRef>\n      <Reference class=\"sailpoint.object.Workflow\" id=\"4028ab1063fdfb6d0163fdfc69b30037\" name=\"Identity Request Notify\"/>\n    </WorkflowRef>\n    <Transition to=\"end\"/>\n  </Step>\n  <Step action=\"call:addMessage\" name=\"Exit On Policy Violation\" posX=\"250\" posY=\"225\">\n    <Arg name=\"message\" value=\"Failed due to policy violation(s)\"/>\n    <Arg name=\"type\" value=\"Error\"/>\n    <Transition to=\"end\"/>\n  </Step>\n  <Step action=\"call:addMessage\" name=\"Exit On Manual Work Items\" posX=\"280\" posY=\"141\">\n    <Arg name=\"message\" value=\"Failed due to manual work item(s)\"/>\n    <Arg name=\"type\" value=\"Error\"/>\n    <Transition to=\"end\"/>\n  </Step>\n  <Step action=\"call:addMessage\" name=\"Exit On Provisioning Form\" posX=\"361\" posY=\"78\">\n    <Arg name=\"message\" value=\"Failed due to provisioning form\"/>\n    <Arg name=\"type\" value=\"Error\"/>\n    <Transition to=\"end\"/>\n  </Step>\n  <Step catches=\"complete\" icon=\"Catches\" name=\"Finalize\" posX=\"759\" posY=\"284\">\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Arg name=\"approvalSet\" value=\"ref:approvalSet\"/>\n    <Arg name=\"trace\" value=\"ref:trace\"/>\n    <Arg name=\"batchRequestItemId\" value=\"ref:batchRequestItemId\"/>\n    <Arg name=\"identityRequestId\" value=\"ref:identityRequestId\"/>\n    <Arg name=\"priority\" value=\"ref:workItemPriority\"/>\n    <Arg name=\"ticketManagementApplication\" value=\"ref:ticketManagementApplication\"/>\n    <Description>\n      Call the standard subprocess that can audit/finalize the request.\n    </Description>\n    <WorkflowRef>\n      <Reference class=\"sailpoint.object.Workflow\" id=\"4028ab1063fdfb6d0163fdfc6b2b0039\" name=\"Identity Request Finalize\"/>\n    </WorkflowRef>\n  </Step>\n  <Step icon=\"Stop\" name=\"end\" posX=\"830\" posY=\"225\"/>\n</List>\n',' ',' ','Identity,BatchRequest'),('4028ab1063fdfb6d0163fdfc716e003e',1528974569838,1739425378697,NULL,NULL,NULL,'LCM Registration',NULL,'LCMRegistration','LCM',_binary '\0',_binary '\0',_binary '\0',0,_binary '\0','sailpoint.api.StandardWorkflowHandler',NULL,'<List>\n  <Variable initializer=\"true\" name=\"transient\">\n    <Description>\n      Set to false to cause workflow-related objects, such as approval\n      work items, to be saved in the database even if they are only\n      viewed by the person registering.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"batchRequestItemId\">\n    <Description>\n      Used by the batch interface to record back individual request item status. The specific item id for the individual request in the batch file.  \n    </Description>\n  </Variable>\n  <Variable initializer=\"Registration\" name=\"flow\">\n    <Description>\n      The name of the LCM flow that launched this workflow.\n    </Description>\n  </Variable>\n  <Variable editable=\"true\" name=\"optimisticProvisioning\">\n    <Description>\n      Set to true to enable optimistic provisioning.  This will cause\n      changes to the entitlements compiled from role assignments to be \n      applied immediately to the identity cube rather than waiting\n      for the next refresh/reaggregation after the provisioning system\n      completes the request.\n    </Description>\n  </Variable>\n  <Variable editable=\"true\" initializer=\"true\" name=\"foregroundProvisioning\">\n    <Description>\n      Normally provisioning is done in a step that uses the \"background\"\n      option to force the workflow to be suspend and be resumed in a\n      background task thread.  This prevents the browser session from\n      hanging since provision can sometimes take a long time.  For demos\n      and testing it can be better to do this in the foreground so that\n      provisioning will have been performed when control is returned to the\n      user.  This prevents having to run the Perform Maintenance task to\n      see the results of the request.\n    </Description>\n  </Variable>\n  <Variable editable=\"true\" name=\"doRefresh\">\n    <Description>\n      Set to true to cause an identity refresh after the changes in the plan\n      have been provisioned.  This is normally off, you might want this on\n      if you want modification of identity or link attributes to result in\n      an immediate re-evaluation of assigned and detected roles.\n    </Description>\n  </Variable>\n  <Variable initializer=\"Normal\" input=\"true\" name=\"workItemPriority\">\n    <Description>\n       The String version of a WorkItem.Priority. This variable is \n       used to set the priority on all of the workitems generated \n       as part of this workflow and also set on the IdentityRequest\n       object.\n    </Description>\n  </Variable>\n  <Variable initializer=\"user,manager\" input=\"true\" name=\"notificationScheme\">\n    <Description>\n     A string that specifies who should be notified when the request has been complete.\n     The value can be null or a csv of one or more of the following options. \n\n     none or null\n       disable notifications\n\n     user \n       Identity that is registering will be notified.\n\n     manager\n       The manager of the Identity that is being updated will be notified.\n\n     securityOfficer\n       The identity named in the variable securityOfficerName will be notified.\n    </Description>\n  </Variable>\n  <Variable initializer=\"LCM Registration User Notification\" input=\"true\" name=\"userEmailTemplate\">\n    <Description>\n     The email template to use for user notification.\n    </Description>\n  </Variable>\n  <Variable initializer=\"LCM Registration Manager Notification\" input=\"true\" name=\"managerEmailTemplate\">\n    <Description>\n     The email template to use for manager notification.\n    </Description>\n  </Variable>\n  <Variable initializer=\"LCM Registration Security Officer Notification\" input=\"true\" name=\"securityOfficerEmailTemplate\">\n    <Description>\n     The email template to use for security officer notification.\n    </Description>\n  </Variable>\n  <Variable initializer=\"serial\" input=\"true\" name=\"approvalMode\">\n    <Description>\n     A string that specifies how we should handle the approvals.  \n\n     By default this is serial since most of these request with\n     the exception of manager transfers will have only one approver.\n\n     parallel\n       Approvals are processed concurrently and there must be consensus,\n       we wait for all approvers to approve.  The first approver that\n       rejects terminates the entire approval.\n \n     parallelPoll \n       Approvals are processed concurrently but consensus is not required.\n       All approvals will be processed, we don\'t stop if there are any\n       rejections.  \n\n     serial\n       Approvals are processed one at a time and there must be consensus.\n       The first approver that rejects terminates the entire approval.\n\n     serialPoll\n       Approvals are processed in order but consensus is not required.\n       All approvals will be processed, we don\'t stop if there are any\n       rejections.  In effect we are \"taking a poll\" of the approvers.\n\n     any\n      Approvals are processed concurrently, the first approver to \n      respond makes the decision for the group.\n    </Description>\n  </Variable>\n  <Variable initializer=\"securityOfficer\" input=\"true\" name=\"approvalScheme\">\n    <Description>\n      A csv string that specifies how approvals should be generated for \n      the incoming request.\n \n      The value can be any of the values below, combined together but\n      are always processed in this order:\n  \n      1. manager\n      2. securityOfficer\n\n      Any rejected items from previous approvals will be omitted from the  \n      next phase of approvers.\n\n      none - disabled approvals\n\n      manager - The manager will get all approvals\n\n      securityOfficer - The identity named in the variable securityOfficerName.\n    </Description>\n  </Variable>\n  <Variable initializer=\"LCM Registration Approval\" input=\"true\" name=\"approvalEmailTemplate\">\n    <Description>\n     The email template to use for approval notifications.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"securityOfficerName\">\n    <Description>\n       The name of the identity that will be sent approvals \n       during security officer approvals.\n    </Description>\n  </Variable>\n  <Variable initializer=\"spadmin\" input=\"true\" name=\"fallbackApprover\">\n    <Description>\n      A String that specifies the name of the Identity that will \n      be assigned any approvals where the owner of the approver \n      can\'t be resolved. Example if the scheme is \"owner\" and the \n      application doesn\'t specify and owner.\n    </Description>\n  </Variable>\n  <Variable initializer=\"continue\" input=\"true\" name=\"policyScheme\">\n    <Description>\n      A String that specifies how policy checks effect the overall\n      process.\n\n      none - disabled policy checking\n\n      fail -  fail and exit the workflow if any policy violations are found\n\n      continue -  continue if policy violations are found\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"ticketManagementApplication\">\n    <Description>\n      Name of the application that can handle ticket requests.\n      When non-null the Manage Ticket Steps will be visited to open\n      tickets during the workflow lifecycle.      \n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"policiesToCheck\">\n    <Description>\n      A List of policies that should be checked. If this list is\n      empty all violations will be checked. Used in combination\n      with policyScheme.\n    </Description>\n  </Variable>\n  <Variable initializer=\"LCM\" input=\"true\" name=\"source\">\n    <Description>\n      String version of sailpoint.object.Source to indicate\n      where the request originated.  Defaults to LCM.\n    </Description>\n  </Variable>\n  <Variable initializer=\"false\" name=\"trace\">\n    <Description>\n      Used for debugging this workflow and when set to true trace\n      will be sent to stdout.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"approverElectronicSignature\">\n    <Description>\n       The name of the electronic signature object that should be used when workitems \n       are completed by the approver.\n    </Description>\n  </Variable>\n  <Variable name=\"identityName\">\n    <Description>The name of the identity we\'re creating.</Description>\n  </Variable>\n  <Variable name=\"identityDisplayName\">\n    <Description>\n      The displayName of the identity being updated.\n    </Description>\n  </Variable>\n  <Variable name=\"confirmationForm\">\n    <Description>\n      A form that gets displayed for confirming the registration.\n    </Description>\n  </Variable>\n  <Variable name=\"plan\">\n    <Description>\n      The ProvisioningPlan that gets generated from the form input.\n    </Description>\n  </Variable>\n  <Variable name=\"identityModel\">\n    <Description>\n      The identity model that is used to represent the identity being created.\n    </Description>\n  </Variable>\n  <Variable name=\"ticketId\">\n    <Description>\n      The id of the ticket that is generated by the ticketingManagementApplication.\n      This is typically generated on the \"open\" call, and then used in subsequent \n      calls.  It is also stored on the IdentityRequest object under the \n      externalTicketId variable. \n    </Description>\n  </Variable>\n  <Variable name=\"policyViolations\">\n    <Description> \n       List of policy violations that were found during our initial policy scan.\n       This list is passed into each work item so the approvers can see \n       pending violations.\n    </Description>\n  </Variable>\n</List>\n','Provisioning Workflow Config Form','<List>\n  <Step icon=\"Start\" name=\"Start\" posX=\"15\" posY=\"12\">\n    <Transition to=\"Initialize\"/>\n  </Step>\n  <Step action=\"call:getIdentityModel\" name=\"Initialize\" posX=\"15\" posY=\"115\" resultVariable=\"identityModel\">\n    <Description>\n       Initialize the data for the identity that we are creating.\n    </Description>\n    <Transition to=\"Registration Form\"/>\n  </Step>\n  <Step icon=\"Approval\" name=\"Registration Form\" posX=\"131\" posY=\"115\">\n    <Approval mode=\"serial\" owner=\"ref:launcher\" return=\"identityModel\">\n      <Arg name=\"workItemType\" value=\"Form\"/>\n      <Arg name=\"workItemDescription\" value=\"Self-service registration form\"/>\n      <Arg name=\"workItemForm\" value=\"registerForm\"/>\n      <Arg name=\"workItemFormBasePath\" value=\"identityModel\"/>\n    </Approval>\n    <Description>\n       Display the registration form to collect information about the registrant.\n    </Description>\n    <Transition to=\"Build Confirmation Form\"/>\n  </Step>\n  <Step action=\"call:buildReadOnlyForm\" name=\"Build Confirmation Form\" posX=\"131\" posY=\"10\" resultVariable=\"confirmationForm\">\n    <Arg name=\"form\" value=\"registerForm\"/>\n    <Arg name=\"helpText\" value=\"lcm_registration_confirmation_text\"/>\n    <Arg name=\"nextButtonLabel\" value=\"label_confirm\"/>\n    <Description>\n       Create the confirmation form to be displayed.\n    </Description>\n    <Transition to=\"Confirmation Form\"/>\n  </Step>\n  <Step icon=\"Approval\" name=\"Confirmation Form\" posX=\"269\" posY=\"10\">\n    <Approval mode=\"serial\" owner=\"ref:launcher\" return=\"identityModel\">\n      <Arg name=\"workItemType\" value=\"Form\"/>\n      <Arg name=\"workItemDescription\" value=\"Confirmation form\"/>\n      <Arg name=\"workItemForm\" value=\"ref:confirmationForm\"/>\n      <Arg name=\"workItemFormBasePath\" value=\"identityModel\"/>\n    </Approval>\n    <Description>\n       Display the confirmation form to the registrant.\n    </Description>\n    <Transition to=\"Registration Form\" when=\"!approved\"/>\n    <Transition to=\"Verify\"/>\n  </Step>\n  <Step icon=\"Analysis\" name=\"Verify\" posX=\"403\" posY=\"6\">\n    <Description>\n      This is a place-holder step where verification of the information could\n      occur before a creation request is launched.  This could potentially call\n      out to an external system to verify some unique information (eg - employeeId)\n      before continuing on.\n    </Description>\n    <Transition to=\"Set identity name\"/>\n  </Step>\n  <Step name=\"Set identity name\" posX=\"507\" posY=\"6\" resultVariable=\"identityName\">\n    <Description>\n      Set the identityName workflow variable based on the form input.\n    </Description>\n    <Script>\n      <Source>\n        return identityModel.get(\"name\");\n      </Source>\n    </Script>\n    <Transition to=\"Build Provisioning Plan\"/>\n  </Step>\n  <Step action=\"call:buildPlanFromIdentityModel\" name=\"Build Provisioning Plan\" posX=\"646\" posY=\"6\" resultVariable=\"plan\">\n    <Arg name=\"identityModel\" value=\"ref:identityModel\"/>\n    <Description>\n      Convert the registration request into a provisioning plan.\n    </Description>\n    <Transition to=\"Submit Registration Request\"/>\n  </Step>\n  <Step icon=\"Task\" name=\"Submit Registration Request\" posX=\"646\" posY=\"110\">\n    <Arg name=\"identityName\" value=\"ref:identityName\"/>\n    <Arg name=\"identityDisplayName\" value=\"ref:identityDisplayName\"/>\n    <Arg name=\"plan\" value=\"ref:plan\"/>\n    <Arg name=\"flow\" value=\"ref:flow\"/>\n    <Arg name=\"optimisticProvisioning\" value=\"ref:optimisticProvisioning\"/>\n    <Arg name=\"foregroundProvisioning\" value=\"ref:foregroundProvisioning\"/>\n    <Arg name=\"doRefresh\" value=\"ref:doRefresh\"/>\n    <Arg name=\"securityOfficerName\" value=\"ref:securityOfficerName\"/>\n    <Arg name=\"notificationScheme\" value=\"ref:notificationScheme\"/>\n    <Arg name=\"approvalMode\" value=\"ref:approvalMode\"/>\n    <Arg name=\"approvalScheme\" value=\"ref:approvalScheme\"/>\n    <Arg name=\"fallbackApprover\" value=\"ref:fallbackApprover\"/>\n    <Arg name=\"approverElectronicSignature\" value=\"ref:approverElectronicSignature\"/>\n    <Arg name=\"approvalEmailTemplate\" value=\"ref:approvalEmailTemplate\"/>\n    <Arg name=\"userEmailTemplate\" value=\"ref:userEmailTemplate\"/>\n    <Arg name=\"managerEmailTemplate\" value=\"ref:managerEmailTemplate\"/>\n    <Arg name=\"securityOfficerEmailTemplate\" value=\"ref:securityOfficerEmailTemplate\"/>\n    <Arg name=\"policyScheme\" value=\"ref:policyScheme\"/>\n    <Arg name=\"policiesToCheck\" value=\"ref:policiesToCheck\"/>\n    <Arg name=\"priority\" value=\"ref:workItemPriority\"/>\n    <Arg name=\"ticketManagementApplication\" value=\"ref:ticketManagementApplication\"/>\n    <Arg name=\"source\" value=\"ref:source\"/>\n    <Arg name=\"trace\" value=\"ref:trace\"/>\n    <Description>\n      Call the LCM Create and Update workflow with the plan that was created.\n    </Description>\n    <WorkflowRef>\n      <Reference class=\"sailpoint.object.Workflow\" id=\"4028ab1063fdfb6d0163fdfc7045003d\" name=\"LCM Create and Update\"/>\n    </WorkflowRef>\n    <Transition to=\"end\"/>\n  </Step>\n  <Step icon=\"Stop\" name=\"end\" posX=\"646\" posY=\"217\"/>\n</List>\n',' ',' ','Identity,BatchRequest'),('4028ab1063fdfb6d0163fdfc722d003f',1528974570029,1739425378333,NULL,NULL,NULL,'LCM Manage Passwords',NULL,'LCMProvisioning','LCM',_binary '\0',_binary '\0',_binary '\0',0,_binary '\0','sailpoint.api.StandardWorkflowHandler',NULL,'<List>\n  <Variable input=\"true\" name=\"identityName\">\n    <Description>The name of the identity being updated.</Description>\n  </Variable>\n  <Variable initializer=\"script:(identityDisplayName != void) ? identityDisplayName : resolveDisplayName(identityName)\" input=\"true\" name=\"identityDisplayName\">\n    <Description>\n      The displayName of the identity being updated.\n      Query for this using a projection query and fall back to the name.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"batchRequestItemId\">\n    <Description>\n      Used by the batch interface to record back individual request item status. The specific item id for the individual request in the batch file.\n    </Description>\n  </Variable>\n  <Variable initializer=\"false\" input=\"true\" name=\"endOnManualWorkItems\">\n    <Description>Option to skip requests with manual work items.</Description>\n  </Variable>\n  <Variable initializer=\"false\" input=\"true\" name=\"endOnProvisioningForms\">\n    <Description>Option to skip requests with provisioning forms.</Description>\n  </Variable>\n  <Variable input=\"true\" name=\"plan\">\n    <Description>The provisioning plan ready to execute.</Description>\n  </Variable>\n  <Variable input=\"true\" name=\"flow\">\n    <Description>\n      The name of the flow that launched this workflow.\n\n      This is one of these three values:\n\n      ForgotPassword\n      ExpiredPassword\n      PasswordRequest\n\n    </Description>\n  </Variable>\n  <Variable editable=\"true\" initializer=\"true\" name=\"foregroundProvisioning\">\n    <Description>\n      Normally provisioning is done in a step that uses the \"background\"\n      option to force the workflow to be suspend and be resumed in a\n      background task thread.  This prevents the browser session from\n      hanging since provision can sometimes take a long time.  For demos\n      and testing it can be better to do this in the foreground so that\n      provisioning will have been performed when control is returned to the\n      user.  This prevents having to run the Perform Maintenance task to\n      see the results of the request.\n    </Description>\n  </Variable>\n  <Variable initializer=\"user\" input=\"true\" name=\"notificationScheme\">\n    <Description>\n     A string that specifies who should be notified when the request has been complete.\n     The value can be null or a csv of one or more of the following options.\n\n     none or null\n       disable notifications\n\n     user\n       Identity that is being update will be notified.\n\n    </Description>\n  </Variable>\n  <Variable initializer=\"LCM\" input=\"true\" name=\"source\">\n    <Description>\n      String version of sailpoint.object.Source to indicate\n      where the request originated.  Defaults to LCM.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"ticketManagementApplication\">\n    <Description>\n      Name of the application that can handle ticket requests.\n      When non-null the Manage Ticket Steps will be visited to open\n      tickets during the workflow lifecycle.\n    </Description>\n  </Variable>\n  <Variable initializer=\"LCM Password Change Notification\" input=\"true\" name=\"userEmailTemplate\">\n    <Description>\n     The email template to use for user notification.\n    </Description>\n  </Variable>\n  <Variable initializer=\"LCM Password Change Notification\" input=\"true\" name=\"requesterEmailTemplate\">\n    <Description>\n     The email template to use for requester notification.\n    </Description>\n  </Variable>\n  <Variable initializer=\"LCM Password Change Notification\" input=\"true\" name=\"managerEmailTemplate\">\n    <Description>\n     The email template to use for manager notification.\n    </Description>\n  </Variable>\n  <Variable name=\"ticketId\">\n    <Description>\n      The id of the ticket that is generated by the ticketingManagementApplication.\n      This is typically generated on the \"open\" call, and then used in subsequent\n      calls.  It is also stored on the IdentityRequest object under the\n      externalTicketId variable.\n    </Description>\n  </Variable>\n  <Variable name=\"approvalSet\">\n    <Description>\n       This attributes is set during the \"Build Approval Set\" step,\n       which builds this list by going through the ProvisioningPlan\n       to build the line items that need to be approved,\n\n       This variable includes all ApprovalItems that are part of\n       the request process and is updated during the AfterScript\n       of the approval process by assimilating the decisions\n       and comments from the Approvals copy of the ApprovalItem.\n    </Description>\n  </Variable>\n  <Variable initializer=\"false\" name=\"trace\">\n    <Description>\n      Used for debugging this workflow and when set to true trace\n      will be sent to stdout.\n    </Description>\n  </Variable>\n  <Variable name=\"project\">\n    <Description>\n      ProvisioningProject which is just a compiled version of the ProvisioningPlan.\n    </Description>\n  </Variable>\n  <Variable name=\"policyViolations\">\n    <Description>\n       List of policy violations that were found during our initial policy scan.\n       This list is passed into each work item so the approvers can see\n       pending violations.\n    </Description>\n  </Variable>\n  <Variable name=\"identityRequestId\" output=\"true\">\n    <Description>\n       The sequence id of the Identity request object which is stored in\n       the name field of the identity request.\n    </Description>\n  </Variable>\n  <Variable initializer=\"Normal\" input=\"true\" name=\"workItemPriority\">\n    <Description>\n       The String version of a WorkItem.Priority. This variable is\n       used to set the priority on all of the workitems generated\n       as part of this workflow and also set on the IdentityRequest\n       object.\n    </Description>\n  </Variable>\n  <Variable initializer=\"false\" input=\"true\" name=\"isProvisioningFailed\" output=\"true\">\n    <Description>\n      This variable will keep track of provisioning errors reported\n      in the Identity Request Items within the Identity Request object,\n      so that we can prevent from notifying the user about provisioning\n      actions status on failure.\n    </Description>\n  </Variable>\n</List>\n','LCM Manage Passwords Config Form','<List>\n  <Step icon=\"Start\" name=\"Start\" posX=\"28\" posY=\"12\">\n    <Transition to=\"Initialize\"/>\n  </Step>\n  <Step icon=\"Task\" name=\"Initialize\" posX=\"118\" posY=\"11\">\n    <Arg name=\"flow\" value=\"ref:flow\"/>\n    <Arg name=\"formTemplate\" value=\"Identity Update\"/>\n    <Arg name=\"identityName\" value=\"ref:identityName\"/>\n    <Arg name=\"identityDisplayName\" value=\"ref:identityDisplayName\"/>\n    <Arg name=\"launcher\" value=\"ref:launcher\"/>\n    <Arg name=\"optimisticProvisioning\" value=\"false\"/>\n    <Arg name=\"plan\" value=\"ref:plan\"/>\n    <Arg name=\"policiesToCheck\" value=\"ref:policiesToCheck\"/>\n    <Arg name=\"policyScheme\" value=\"none\"/>\n    <Arg name=\"priority\" value=\"ref:workItemPriority\"/>\n    <Arg name=\"source\" value=\"ref:source\"/>\n    <Arg name=\"trace\" value=\"ref:trace\"/>\n    <Arg name=\"batchRequestItemId\" value=\"ref:batchRequestItemId\"/>\n    <Arg name=\"endOnProvisioningForms\" value=\"ref:endOnProvisioningForms\"/>\n    <Arg name=\"endOnManualWorkItems\" value=\"ref:endOnManualWorkItems\"/>\n    <Description>\n      Call the standard subprocess to initialize the request, this includes\n      auditing, building the approvalset, compiling the plan into\n      a project and checking policy violations.\n    </Description>\n    <Return name=\"project\" to=\"project\"/>\n    <Return name=\"approvalSet\" to=\"approvalSet\"/>\n    <Return name=\"identityRequestId\" to=\"identityRequestId\"/>\n    <WorkflowRef>\n      <Reference class=\"sailpoint.object.Workflow\" id=\"4028ab1063fdfb6d0163fdfc68a90035\" name=\"Identity Request Initialize\"/>\n    </WorkflowRef>\n    <Transition to=\"Exit On Manual Work Items\" when=\"script:(isTrue(endOnManualWorkItems) &amp;&amp; (project.getUnmanagedPlan() != null))\"/>\n    <Transition to=\"Exit On Provisioning Form\" when=\"script:(isTrue(endOnProvisioningForms) &amp;&amp; (project.hasQuestions()))\"/>\n    <Transition to=\"Create Ticket\"/>\n  </Step>\n  <Step condition=\"script:(ticketManagementApplication != null)\" icon=\"Task\" name=\"Create Ticket\" posX=\"279\" posY=\"8\">\n    <Arg name=\"action\" value=\"openNoApproval\"/>\n    <Arg name=\"source\" value=\"ref:source\"/>\n    <Arg name=\"priority\" value=\"ref:workItemPriority\"/>\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Arg name=\"ticketManagementApplication\" value=\"ref:ticketManagementApplication\"/>\n    <Arg name=\"identityRequestId\" value=\"ref:identityRequestId\"/>\n    <Arg name=\"ticketDataGenerationRule\" value=\"\"/>\n    <Arg name=\"trace\" value=\"ref:trace\"/>\n    <Description>\n      Call a subprocess to create a ticket in the ticketManagementApplication is non-null.\n      You can specify a specific \'ticketDataGenerationRule\' here or you can also specify\n      it on the application.  It\'ll be read from the argument first and fall back to the \'\n      application config.\n    </Description>\n    <Return name=\"ticketId\" to=\"externalTicketId\"/>\n    <WorkflowRef>\n      <Reference class=\"sailpoint.object.Workflow\" id=\"4028ab1063f427af0163f42904b20183\" name=\"Manage Ticket\"/>\n    </WorkflowRef>\n    <Transition to=\"Provision\"/>\n  </Step>\n  <Step icon=\"Task\" name=\"Provision\" posX=\"369\" posY=\"8\">\n    <Arg name=\"approvalScheme\" value=\"ref:approvalScheme\"/>\n    <Arg name=\"approvalSet\" value=\"ref:approvalSet\"/>\n    <Arg name=\"fallbackApprover\" value=\"spadmin\"/>\n    <Arg name=\"foregroundProvisioning\" value=\"ref:foregroundProvisioning\"/>\n    <Arg name=\"formTemplate\" value=\"Identity Update\"/>\n    <Arg name=\"flow\" value=\"ref:flow\"/>\n    <Arg name=\"identityDisplayName\" value=\"ref:identityDisplayName\"/>\n    <Arg name=\"identityName\" value=\"ref:identityName\"/>\n    <Arg name=\"identityRequestId\" value=\"ref:identityRequestId\"/>\n    <Arg name=\"launcher\" value=\"ref:launcher\"/>\n    <Arg name=\"manualActionsEmailTemplate\" value=\"Pending Manual Changes\"/>\n    <Arg name=\"optimisticProvisioning\" value=\"ref:optimisticProvisioning\"/>\n    <Arg name=\"policyViolations\" value=\"ref:policyViolations\"/>\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Arg name=\"policyScheme\" value=\"ref:policyScheme\"/>\n    <Arg name=\"priority\" value=\"ref:workItemPriority\"/>\n    <Arg name=\"trace\" value=\"ref:trace\"/>\n    <Description>\n      Call the standard subprocess that will process the\n      approval decisions and do provisioning.  This\n      includes calling any configured provisioning\n      connectors and building manual actions.\n    </Description>\n    <Return name=\"project\" to=\"project\"/>\n    <WorkflowRef>\n      <Reference class=\"sailpoint.object.Workflow\" id=\"4028ab1063fdfb6d0163fdfc6aa00038\" name=\"Identity Request Provision\"/>\n    </WorkflowRef>\n    <Transition to=\"Post Provision\"/>\n  </Step>\n  <Step icon=\"Task\" name=\"Post Provision\" posX=\"472\" posY=\"8\" resultVariable=\"isProvisioningFailed\">\n    <Script>\n      <Source>\n        import sailpoint.api.ObjectUtil;\n        import sailpoint.tools.Util;\n        import sailpoint.object.WorkflowCase;\n        import sailpoint.object.TaskResult;\n        import sailpoint.object.IdentityRequest;\n        import sailpoint.object.IdentityRequestItem;\n        import sailpoint.object.ProvisioningProject;\n\n        if ( null != identityRequestId ) {\n            IdentityRequest ir = wfcontext.getSailPointContext().getObject(IdentityRequest.class, identityRequestId);\n            if ( null != ir ) {\n                List requestItems = ir.getItems();\n                if ( Util.size(requestItems) > 0 ) {\n                    for ( IdentityRequestItem item : requestItems ) {\n                        if ( item.isProvisioningFailed() ) {\n                            isProvisioningFailed = true;\n                            return isProvisioningFailed;\n                        }\n                    }\n                }\n            }\n        }\n\n        if ( approvalSet != null ) {\n            // Set state to provisioned and also mark them all approved\n            approvalSet.setAllProvisioned();\n\n            List items = approvalSet.getItems();\n            if ( Util.size(items) > 0 ) {\n                for ( ApprovalItem item : items ) {\n                    item.approve();\n                }\n            }\n            if ( Util.otob(trace) ) {\n                System.out.println(\"ApprovalSet:\\n\" + approvalSet.toXml());\n            }\n        }\n\n        // mark this verified to prevent the scanner from processing it\n        TaskResult result = wfcontext.getTaskResult();\n        if ( result != null ) {\n            result.setVerified(new Date());\n        }\n        if ( project != null ) {\n            if ( Util.otob(trace) ) {\n                // clone and scrub the project so passwords are not visible\n                ProvisioningProject clonedProject = project.deepCopy(wfcontext.getSailPointContext());\n                ObjectUtil.scrubPasswords(clonedProject);\n                System.out.println(\"Project Executed in lcm:\\n\" + clonedProject.toXml());\n            }\n        }\n      </Source>\n    </Script>\n    <Transition to=\"end\" when=\"ref:isProvisioningFailed\"/>\n    <Transition to=\"Update Ticket Post Provision\"/>\n  </Step>\n  <Step condition=\"script:(ticketManagementApplication != null)\" icon=\"Task\" name=\"Update Ticket Post Provision\" posX=\"604\" posY=\"8\">\n    <Arg name=\"action\" value=\"postProvisioning\"/>\n    <Arg name=\"source\" value=\"ref:source\"/>\n    <Arg name=\"priority\" value=\"ref:workItemPriority\"/>\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Arg name=\"ticketManagementApplication\" value=\"ref:ticketManagementApplication\"/>\n    <Arg name=\"identityRequestId\" value=\"ref:identityRequestId\"/>\n    <Arg name=\"ticketDataGenerationRule\" value=\"\"/>\n    <Arg name=\"trace\" value=\"ref:trace\"/>\n    <Description>\n      Call a subprocess to update the ticket in the ticketManagementApplication is non-null.\n\n      You can specify a specific \'ticketDataGenerationRule\' here or you can also specify\n      it on the application.  It\'ll be read from the argument first and fall back to the \'\n      application config.\n\n    </Description>\n    <WorkflowRef>\n      <Reference class=\"sailpoint.object.Workflow\" id=\"4028ab1063f427af0163f42904b20183\" name=\"Manage Ticket\"/>\n    </WorkflowRef>\n    <Transition to=\"Notify\"/>\n  </Step>\n  <Step icon=\"Task\" name=\"Notify\" posX=\"719\" posY=\"8\">\n    <Arg name=\"approvalScheme\" value=\"ref:approvalScheme\"/>\n    <Arg name=\"approvalSet\" value=\"ref:approvalSet\"/>\n    <Arg name=\"flow\" value=\"ref:flow\"/>\n    <Arg name=\"identityDisplayName\" value=\"ref:identityDisplayName\"/>\n    <Arg name=\"identityName\" value=\"ref:identityName\"/>\n    <Arg name=\"launcher\" value=\"ref:launcher\"/>\n    <Arg name=\"notificationScheme\" value=\"ref:notificationScheme\"/>\n    <Arg name=\"userEmailTemplate\" value=\"ref:userEmailTemplate\"/>\n    <Arg name=\"requesterEmailTemplate\" value=\"ref:requesterEmailTemplate\"/>\n    <Arg name=\"managerEmailTemplate\" value=\"ref:managerEmailTemplate\"/>\n    <Arg name=\"plan\" value=\"ref:plan\"/>\n    <Arg name=\"policyViolations\" value=\"ref:policyViolations\"/>\n    <Arg name=\"priority\" value=\"ref:workItemPriority\"/>\n    <Arg name=\"trace\" value=\"ref:trace\"/>\n    <Description>\n      Call the standard subprocess that will notify the various\n      actors based on notification scheme.\n    </Description>\n    <WorkflowRef>\n      <Reference class=\"sailpoint.object.Workflow\" id=\"4028ab1063fdfb6d0163fdfc69b30037\" name=\"Identity Request Notify\"/>\n    </WorkflowRef>\n    <Transition to=\"end\"/>\n  </Step>\n  <Step action=\"call:addMessage\" name=\"Exit On Manual Work Items\" posX=\"185\" posY=\"164\">\n    <Arg name=\"message\" value=\"Failed due to manual work item(s)\"/>\n    <Arg name=\"type\" value=\"Error\"/>\n    <Transition to=\"end\"/>\n  </Step>\n  <Step action=\"call:addMessage\" name=\"Exit On Provisioning Form\" posX=\"231\" posY=\"81\">\n    <Arg name=\"message\" value=\"Failed due to provisioning form\"/>\n    <Arg name=\"type\" value=\"Error\"/>\n    <Transition to=\"end\"/>\n  </Step>\n  <Step catches=\"complete\" icon=\"Catches\" name=\"Finalize\" posX=\"666\" posY=\"222\">\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Arg name=\"approvalSet\" value=\"ref:approvalSet\"/>\n    <Arg name=\"trace\" value=\"ref:trace\"/>\n    <Arg name=\"autoVerifyIdentityRequest\" value=\"true\"/>\n    <Arg name=\"batchRequestItemId\" value=\"ref:batchRequestItemId\"/>\n    <Arg name=\"identityRequestId\" value=\"ref:identityRequestId\"/>\n    <Arg name=\"priority\" value=\"ref:workItemPriority\"/>\n    <Arg name=\"ticketManagementApplication\" value=\"ref:ticketManagementApplication\"/>\n    <Description>\n      Call the standard subprocess that can audit/finalize the request.\n    </Description>\n    <WorkflowRef>\n      <Reference class=\"sailpoint.object.Workflow\" id=\"4028ab1063fdfb6d0163fdfc6b2b0039\" name=\"Identity Request Finalize\"/>\n    </WorkflowRef>\n  </Step>\n  <Step icon=\"Stop\" name=\"end\" posX=\"720\" posY=\"163\"/>\n</List>\n',' ',' ','Identity,Role,PolicyViolation,LCM,BatchRequest'),('4028ab1063fdfb6d0163fdfc72f40040',1528974570228,1739425379150,NULL,NULL,NULL,'Lifecycle Event - Joiner','Process a new employee.','IdentityLifecycle',NULL,_binary '\0',_binary '',_binary '\0',0,_binary '\0',NULL,NULL,'<List>\n  <Variable input=\"true\" name=\"trigger\">\n    <Description>The IdentityTrigger</Description>\n  </Variable>\n  <Variable input=\"true\" name=\"event\" transient=\"true\">\n    <Description>\n      The IdentityChangeEvent.  It can be used to build\n      the provisioning plan, but does not need to be\n      persisted with the case, so marked as transient.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"identityName\">\n    <Description>The name of the identity.</Description>\n  </Variable>\n  <Variable name=\"identityDisplayName\">\n    <Script>\n      <Source>\n			import sailpoint.object.Identity;\n			Identity identity =  context.getObjectByName( Identity.class, identityName );\n			if( identity != null )\n			{\n				return identity.getDisplayName() ;\n			}\n		</Source>\n    </Script>\n  </Variable>\n  <Variable initializer=\"string:Joiner\" name=\"flow\">\n    <Description>The name of the identity.</Description>\n  </Variable>\n  <Variable initializer=\"LCM\" input=\"true\" name=\"source\">\n    <Description>\n			String version of sailpoint.object.Source to indicate\n			where the request originated. Defaults to LCM.\n		</Description>\n  </Variable>\n  <Variable editable=\"true\" initializer=\"String:none\" name=\"approvalScheme\"/>\n  <Variable name=\"fallbackApprover\">\n    <Description>Name of the fallback approver to whom workitem is\n			assigned if no owner is found</Description>\n    <Script>\n      <Source>\n				return \"spadmin\";\n	</Source>\n    </Script>\n  </Variable>\n  <Variable editable=\"true\" initializer=\"false\" name=\"optimisticProvisioning\">\n    <Description>\n			Set to true to enable optimistic provisioning. This will\n			cause\n			changes to the entitlements compiled from role assignments to be\n			applied immediately to the identity cube rather than waiting\n			for the\n			next refresh/reaggregation after the provisioning system\n			completes the\n			request.\n		</Description>\n  </Variable>\n  <Variable editable=\"true\" initializer=\"true\" name=\"foregroundProvisioning\">\n    <Description>\n			Normally provisioning is done in a step that uses the\n			\"background\"\n			option to force the workflow to be suspend and be resumed\n			in a\n			background task thread. This prevents the browser session from\n			hanging since provision can sometimes take a long time. For demos\n			and\n			testing it can be better to do this in the foreground so that\n			provisioning will have been performed when control is returned to the\n			user. This prevents having to run the Perform Maintenance task to\n			see\n			the results of the request.\n		</Description>\n  </Variable>\n  <Variable name=\"cart\" output=\"true\">\n    <Description>\n			This variable includes all ApprovalItems that are part of\n			the request process and is updated during the AfterScript\n			of the\n			approval process by assimilating the decisions\n			and comments from the\n			Approvals copy of the ApprovalItem.\n		</Description>\n  </Variable>\n  <Variable input=\"true\" name=\"uid\">\n    <Description>The name of the identity.</Description>\n  </Variable>\n  <Variable input=\"true\" name=\"plan\">\n    <Description>The provisioning plan, which is built by a service\n			method.\n		</Description>\n  </Variable>\n  <Variable initializer=\"string:Joiner Email Template\" input=\"true\" name=\"emailTemplateName\">\n    <Description>The email template used for joiner mail\n		</Description>\n  </Variable>\n  <Variable name=\"project\">\n    <Description>\n			ProvisioningProject which is just a compiled version of\n			the ProvisioningPlan.\n		</Description>\n  </Variable>\n  <Variable name=\"identityRequestId\" output=\"true\">\n    <Description>\n			The sequence id of the Identity request object which is\n			stored in\n			the name field of the identity request.\n		</Description>\n  </Variable>\n</List>\n',NULL,'<List>\n  <Step icon=\"Start\" name=\"Start\" posX=\"28\" posY=\"10\">\n    <Transition to=\"Assign UID\">\n      <Script>\n        <Source>\n		import sailpoint.api.*;\n		import sailpoint.tools.*;\n		import sailpoint.object.*;\n		import java.util.*;\n		import java.text.*;\n		\n		Identity identity = context.getObjectByName(Identity.class, identityName);\n		String uid = \"\";\n		if( identity.getAttribute(\"uid\") != null )\n		{\n			uid = identity.getAttribute(\"uid\").toString().trim() ;\n		}\n		\n		if(identity.getAttribute(\"uid\") == null || uid.isEmpty()){\n			return true;\n		}\n		\n		return false;\n	  </Source>\n      </Script>\n    </Transition>\n    <Transition to=\"Build Plan\"/>\n  </Step>\n  <Step icon=\"Message\" name=\"Assign UID\" posX=\"148\" posY=\"10\" resultVariable=\"plan\">\n    <Description>Assign new UID to user.</Description>\n    <Script>\n      <Source>\n		import sailpoint.api.*;\n		import sailpoint.tools.*;\n		import sailpoint.object.*;\n		import java.util.*;\n		import java.text.*;\n		import sailpoint.server.Auditor;\n		\n		System.out.println(\"New user was entered the system: \" + event.getObject().getDisplayableName());\n		\n		String newUID = getNewUID(context);\n		\n		if (Auditor.isEnabled(\"JoinerEvent\")) {\n			Auditor.logAs(\"Joiner-WF-AssignUID\", \"JoinerEvent\", identityName, newUID, \"\", \"\", \"\");\n			context.commitTransaction();\n		}\n	  \n		Identity identity = context.getObjectByName(Identity.class, identityName);\n		identity.setAttribute(\"uid\", newUID);\n		context.saveObject(identity);\n		context.commitTransaction();\n		\n		System.out.println(Generated new uid for \" + identityName + \" UID: \" + newUID);\n		\n		return plan;\n      </Source>\n    </Script>\n    <Transition to=\"Build Plan\"/>\n  </Step>\n  <Step icon=\"Message\" name=\"Build Plan\" posX=\"148\" posY=\"10\" resultVariable=\"plan\">\n    <Description>Process the user that joined.</Description>\n    <Script>\n      <Source>\n		import org.apache.commons.logging.Log;\n		import org.apache.commons.logging.LogFactory;\n		import org.apache.commons.lang.StringUtils;\n		import sailpoint.object.AttributeAssignment;\n		import sailpoint.api.IdentityService;\n		import sailpoint.api.ObjectUtil;\n		import sailpoint.api.SailPointContext;\n		import sailpoint.api.SailPointFactory;\n		import sailpoint.api.Provisioner;\n		import sailpoint.api.*;\n		import java.util.Calendar;\n		import sailpoint.object.IdentityEntitlement;\n		import sailpoint.object.ApprovalItem.ProvisioningState;\n		import sailpoint.object.Application;\n		import sailpoint.object.ApprovalItem;\n		import sailpoint.object.AuditEvent;\n		import sailpoint.object.Attributes;\n		import sailpoint.object.AuthenticationAnswer;\n		import sailpoint.object.AuthenticationQuestion;\n		import sailpoint.object.Bundle;\n		import sailpoint.object.Certification;\n		import sailpoint.object.CertificationEntity;\n		import sailpoint.object.Custom;\n		import sailpoint.object.EmailOptions;\n		import sailpoint.object.EmailTemplate;\n		import sailpoint.object.Filter;\n		import sailpoint.object.Form;\n		import sailpoint.object.Identity;\n		import sailpoint.object.IdentityRequest;\n		import sailpoint.object.IdentityRequestItem;\n		import sailpoint.object.Link;\n		import sailpoint.object.ManagedAttribute;\n		import sailpoint.object.ProvisioningPlan;\n		import sailpoint.object.ProvisioningPlan.AccountRequest;\n		import sailpoint.object.ProvisioningPlan.AttributeRequest;\n		import sailpoint.object.ProvisioningPlan.Operation;\n		import sailpoint.object.ProvisioningPlan.AccountRequest.Operation;\n		import sailpoint.object.ProvisioningProject;\n		import sailpoint.object.ProvisioningResult;\n		import sailpoint.object.QueryOptions;\n		import sailpoint.object.RoleAssignment;\n		import sailpoint.object.Field;\n		import sailpoint.object.Filter;\n		import sailpoint.object.Form;\n		import sailpoint.object.WorkItem;\n		import sailpoint.object.Form.Section;\n		import sailpoint.object.*;\n		import sailpoint.object.Request;\n		import sailpoint.object.Filter.LeafFilter;\n		import sailpoint.object.Filter.CompositeFilter;\n		import sailpoint.object.Profile;\n		import sailpoint.workflow.WorkflowContext;\n\n\n		import sailpoint.tools.GeneralException;\n		import sailpoint.tools.Message;\n		import sailpoint.tools.Util;\n		import sailpoint.tools.xml.XMLObjectFactory;\n\n		import java.util.ArrayList;\n		import java.util.HashMap;\n		import java.util.Iterator;\n		import java.util.List;\n		import java.util.Map;\n		import java.util.Arrays;\n		\n		System.out.println(\"New user was entered the system: \" + event.getObject().getDisplayableName());\n	  \n		Identity identity = context.getObjectByName(Identity.class, identityName);\n		\n		List links = identity.getLinks();\n		Link ldapLink = null;\n		Link jdbcLink = null;\n		\n		for(Iterator iterator = links.iterator(); iterator.hasNext();){\n			Link link = (Link) iterator.next();\n			if(link.getApplicationName().equalsIgnoreCase(\"LDAP\")){\n				ldapLink = link;\n			}\n			\n			if(link.getApplicationName().equalsIgnoreCase(\"JDBC\")){\n				jdbcLink = link;\n			}\n		}\n		\n		\n		ProvisioningPlan plan = new ProvisioningPlan();\n		// Set identity to the plan\n		plan.setIdentity(identity);\n\n		List acctReqs = new ArrayList();\n		\n		if(ldapLink == null){\n			AccountRequest ldapAcctReq = new AccountRequest();\n			ldapAcctReq.setOperation(AccountRequest.Operation.Create);\n			ldapAcctReq.setApplication(\"LDAP\");\n			acctReqs.add(ldapAcctReq);\n		}\n		\n		//AccountRequest acctReq = createAR(context, \"LDAP\");\n		//acctReqs.add(acctReq);\n		//AccountRequest acctReq = createAR(context, \"HR System\");\n		//acctReqs.add(acctReq);\n		\n		if(jdbcLink == null){\n			AccountRequest jdbcAcctReq = new AccountRequest();\n			jdbcAcctReq.setOperation(AccountRequest.Operation.Create);\n			jdbcAcctReq.setApplication(\"HR System\");\n			acctReqs.add(jdbcAcctReq);\n		}\n\n		\n		plan.setAccountRequests(acctReqs);\n		\n		workflow.put(\"plan\", plan);\n		\n		return plan;\n      </Source>\n    </Script>\n    <Transition to=\"Initialize\"/>\n  </Step>\n  <Step icon=\"Task\" name=\"Initialize\" posX=\"562\" posY=\"126\">\n    <Arg name=\"formTemplate\" value=\"COF Identity Update Form\"/>\n    <Arg name=\"identityName\" value=\"ref:identityName\"/>\n    <Arg name=\"enableRetryRequest\"/>\n    <Arg name=\"allowRequestsWithViolations\"/>\n    <Arg name=\"endOnManualWorkItems\"/>\n    <Arg name=\"policiesToCheck\"/>\n    <Arg name=\"workItemPriority\"/>\n    <Arg name=\"workItemComments\"/>\n    <Arg name=\"source\" value=\"ref:source\"/>\n    <Arg name=\"violationReviewDecision\"/>\n    <Arg name=\"policyScheme\" value=\"none\"/>\n    <Arg name=\"priority\" value=\"ref:workItemPriority\"/>\n    <Arg name=\"identityDisplayName\" value=\"ref:identityDisplayName\"/>\n    <Arg name=\"requireViolationReviewComments\"/>\n    <Arg name=\"identityRequest\"/>\n    <Arg name=\"trace\" value=\"ref:trace\"/>\n    <Arg name=\"asyncCacheRefresh\"/>\n    <Arg name=\"endOnProvisioningForms\"/>\n    <Arg name=\"optimisticProvisioning\" value=\"ref:optimisticProvisioning\"/>\n    <Arg name=\"plan\" value=\"ref:plan\"/>\n    <Arg name=\"flow\" value=\"ref:flow\"/>\n    <Arg name=\"launcher\" value=\"ref:launcher\"/>\n    <Description>\n			Call the standard subprocess to initialize the request,\n			this includes\n			auditing, building the approvalset, compiling the plan\n			into\n			project and checking policy violations.\n		</Description>\n    <Return name=\"project\" to=\"project\"/>\n    <Return name=\"approvalSet\" to=\"cart\"/>\n    <Return name=\"identityRequestId\" to=\"identityRequestId\"/>\n    <Return name=\"policyViolations\" to=\"policyViolations\"/>\n    <WorkflowRef>\n      <Reference class=\"sailpoint.object.Workflow\" id=\"4028ab1063fdfb6d0163fdfc68a90035\" name=\"Identity Request Initialize\"/>\n    </WorkflowRef>\n    <Transition to=\"Provision\"/>\n  </Step>\n  <Step icon=\"Task\" name=\"Provision\" posX=\"696\" posY=\"126\" wait=\"-1\">\n    <Arg name=\"formTemplate\" value=\"COF Identity Update Form\"/>\n    <Arg name=\"approvalScheme\" value=\"ref:approvalScheme\"/>\n    <Arg name=\"identityName\" value=\"ref:identityName\"/>\n    <Arg name=\"fallbackApprover\" value=\"ref:fallbackApprover\"/>\n    <Arg name=\"approvalSet\"/>\n    <Arg name=\"manualActionsEmailTemplate\"/>\n    <Arg name=\"workItemComments\"/>\n    <Arg name=\"workItemPriority\"/>\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Arg name=\"identityRequestId\"/>\n    <Arg name=\"policyScheme\" value=\"ref:policyScheme\"/>\n    <Arg name=\"splitProvisioning\"/>\n    <Arg name=\"saveUnmanagedPlan\"/>\n    <Arg name=\"foregroundProvisioning\" value=\"ref:foregroundProvisioning\"/>\n    <Arg name=\"identityDisplayName\" value=\"ref:identityDisplayName\"/>\n    <Arg name=\"trace\" value=\"ref:trace\"/>\n    <Arg name=\"recompile\"/>\n    <Arg name=\"optimisticProvisioning\" value=\"ref:optimisticProvisioning\"/>\n    <Arg name=\"plan\"/>\n    <Arg name=\"launcher\" value=\"ref:launcher\"/>\n    <WorkflowRef>\n      <Reference class=\"sailpoint.object.Workflow\" id=\"4028ab1063fdfb6d0163fdfc6aa00038\" name=\"Identity Request Provision\"/>\n    </WorkflowRef>\n    <Transition to=\"Finalize\"/>\n  </Step>\n  <Step catches=\"complete\" icon=\"Task\" name=\"Finalize\" posX=\"992\" posY=\"10\">\n    <Arg name=\"trace\" value=\"ref:trace\"/>\n    <Arg name=\"autoVerifyIdentityRequest\"/>\n    <Arg name=\"approvalSet\" value=\"ref:cart\"/>\n    <Arg name=\"ticketManagementApplication\"/>\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Arg name=\"workItemPriority\"/>\n    <Arg name=\"identityRequestId\" value=\"ref:identityRequestId\"/>\n    <Arg name=\"ticketDataGenerationRule\"/>\n    <Description>\n			Call the standard subprocess that can audit/finalize the\n			request.\n		</Description>\n    <WorkflowRef>\n      <Reference class=\"sailpoint.object.Workflow\" id=\"4028ab1063fdfb6d0163fdfc6b2b0039\" name=\"Identity Request Finalize\"/>\n    </WorkflowRef>\n    <Transition to=\"Stop\"/>\n  </Step>\n  <Step icon=\"Stop\" name=\"Stop\" posX=\"268\" posY=\"10\"/>\n</List>\n',' ',' ','Identity'),('4028ab1063fdfb6d0163fdfc737e0041',1528974570366,1739425379409,NULL,NULL,NULL,'Lifecycle Event - Leaver','Disable all accounts when an employee leaves the company.','IdentityLifecycle',NULL,_binary '\0',_binary '',_binary '\0',0,_binary '\0',NULL,NULL,'<List>\n  <Variable input=\"true\" name=\"trigger\">\n    <Description>The IdentityTrigger</Description>\n  </Variable>\n  <Variable input=\"true\" name=\"event\" transient=\"true\">\n    <Description>\n      The IdentityChangeEvent.  It can be used to build\n      the provisioning plan, but does not need to be\n      persisted with the case, so marked as transient.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"identityName\">\n    <Description>The name of the identity.</Description>\n  </Variable>\n  <Variable initializer=\"script:(identityDisplayName != void) ? identityDisplayName : resolveDisplayName(identityName)\" input=\"true\" name=\"identityDisplayName\">\n    <Description>\n      The displayName of the identity being updated.\n      Query for this using a projection query and fall back to the name.\n    </Description>\n  </Variable>\n  <Variable name=\"plan\">\n    <Description>The provisioning plan, which is built by a service method. </Description>\n  </Variable>\n  <Variable initializer=\"string:Leaver\" name=\"flow\">\n    <Description>The name of the identity.</Description>\n  </Variable>\n  <Variable editable=\"true\" initializer=\"false\" name=\"optimisticProvisioning\">\n    <Description>\n      Set to true to enable optimistic provisioning.  This will cause\n      changes to the entitlements compiled from role assignments to be \n      applied immediately to the identity cube rather than waiting\n      for the next refresh/reaggregation after the provisioning system\n      completes the request.\n    </Description>\n  </Variable>\n  <Variable editable=\"true\" initializer=\"true\" name=\"foregroundProvisioning\">\n    <Description>\n      Normally provisioning is done in a step that uses the \"background\"\n      option to force the workflow to be suspend and be resumed in a\n      background task thread.  This prevents the browser session from\n      hanging since provision can sometimes take a long time.  For demos\n      and testing it can be better to do this in the foreground so that\n      provisioning will have been performed when control is returned to the\n      user.  This prevents having to run the Perform Maintenance task to \n      see the results of the request.\n    </Description>\n  </Variable>\n  <Variable initializer=\"spadmin\" input=\"true\" name=\"fallbackApprover\">\n    <Description>\n      A String that specifies the name of the Identity that will \n      be assigned any approvals where the owner of the approver \n      can\'t be resolved. Example if the scheme is \"owner\" and the \n      application doesn\'t specify and owner.\n    </Description>\n  </Variable>\n  <Variable initializer=\"LCM\" input=\"true\" name=\"source\">\n    <Description>\n      String version of sailpoint.object.Source to indicate\n      where the request originated.  Defaults to LCM.\n    </Description>\n  </Variable>\n  <Variable initializer=\"false\" input=\"true\" name=\"trace\">\n    <Description>\n      Used for debugging this workflow and when set to true trace\n      will be sent to stdout.\n    </Description>\n  </Variable>\n  <Variable name=\"project\">\n    <Description>\n      ProvisioningProject which is just a compiled version of the ProvisioningPlan.\n    </Description>\n  </Variable>\n  <Variable name=\"identityRequestId\" output=\"true\">\n    <Description>\n       The sequence id of the Identity request object which is stored in \n       the name field of the identity request.\n    </Description>\n  </Variable>\n  <Variable name=\"cart\" output=\"true\">\n    <Description>\n       This variable includes all ApprovalItems that are part of \n       the request process and is updated during the AfterScript\n       of the approval process by assimilating the decisions \n       and comments from the Approvals copy of the ApprovalItem.\n    </Description>\n  </Variable>\n  <Variable initializer=\"Normal\" input=\"true\" name=\"workItemPriority\">\n    <Description>\n       The String version of a WorkItem.Priority. This variable is \n       used to set the priority on all of the workitems generated \n       as part of this workflow and also set on the IdentityRequest\n       object.\n    </Description>\n  </Variable>\n</List>\n',NULL,'<List>\n  <Step icon=\"Start\" name=\"Start\" posX=\"28\" posY=\"10\">\n    <Transition to=\"ResetPassword\"/>\n  </Step>\n  <Step icon=\"Message\" name=\"ResetPassword\" posX=\"148\" posY=\"10\" resultVariable=\"plan\">\n    <Description>Process the user that joined.</Description>\n    <Script>\n      <Source>\n		import sailpoint.object.Identity;;\n\n		Identity identity = context.getObjectByName(Identity.class, identityName);\n		identity.setPassword(\"TermUser@123\");\n		context.saveObject(identity);\n		context.commitTransaction();\n		\n		\n      </Source>\n    </Script>\n    <Transition to=\"Build Plan\"/>\n  </Step>\n  <Step icon=\"Message\" name=\"Build Plan\" posX=\"148\" posY=\"10\" resultVariable=\"plan\">\n    <Description>Process the user that joined.</Description>\n    <Script>\n      <Source>\n		import org.apache.commons.logging.Log;\n		import org.apache.commons.logging.LogFactory;\n		import org.apache.commons.lang.StringUtils;\n		import sailpoint.object.AttributeAssignment;\n		import sailpoint.api.IdentityService;\n		import sailpoint.api.ObjectUtil;\n		import sailpoint.api.SailPointContext;\n		import sailpoint.api.SailPointFactory;\n		import sailpoint.api.Provisioner;\n		import sailpoint.api.*;\n		import java.util.Calendar;\n		import sailpoint.object.IdentityEntitlement;\n		import sailpoint.object.ApprovalItem.ProvisioningState;\n		import sailpoint.object.Application;\n		import sailpoint.object.ApprovalItem;\n		import sailpoint.object.AuditEvent;\n		import sailpoint.object.Attributes;\n		import sailpoint.object.AuthenticationAnswer;\n		import sailpoint.object.AuthenticationQuestion;\n		import sailpoint.object.Bundle;\n		import sailpoint.object.Certification;\n		import sailpoint.object.CertificationEntity;\n		import sailpoint.object.Custom;\n		import sailpoint.object.EmailOptions;\n		import sailpoint.object.EmailTemplate;\n		import sailpoint.object.Filter;\n		import sailpoint.object.Form;\n		import sailpoint.object.Identity;\n		import sailpoint.object.IdentityRequest;\n		import sailpoint.object.IdentityRequestItem;\n		import sailpoint.object.Link;\n		import sailpoint.object.ManagedAttribute;\n		import sailpoint.object.ProvisioningPlan;\n		import sailpoint.object.ProvisioningPlan.AccountRequest;\n		import sailpoint.object.ProvisioningPlan.AttributeRequest;\n		import sailpoint.object.ProvisioningPlan.Operation;\n		import sailpoint.object.ProvisioningPlan.AccountRequest.Operation;\n		import sailpoint.object.ProvisioningProject;\n		import sailpoint.object.ProvisioningResult;\n		import sailpoint.object.QueryOptions;\n		import sailpoint.object.RoleAssignment;\n		import sailpoint.object.Field;\n		import sailpoint.object.Filter;\n		import sailpoint.object.Form;\n		import sailpoint.object.WorkItem;\n		import sailpoint.object.Form.Section;\n		import sailpoint.object.*;\n		import sailpoint.object.Request;\n		import sailpoint.object.Filter.LeafFilter;\n		import sailpoint.object.Filter.CompositeFilter;\n		import sailpoint.object.Profile;\n		import sailpoint.workflow.WorkflowContext;\n\n\n		import sailpoint.tools.GeneralException;\n		import sailpoint.tools.Message;\n		import sailpoint.tools.Util;\n		import sailpoint.tools.xml.XMLObjectFactory;\n\n		import java.util.ArrayList;\n		import java.util.HashMap;\n		import java.util.Iterator;\n		import java.util.List;\n		import java.util.Map;\n		import java.util.Arrays;\n		\n		System.out.println(\"User getting terminated from the system: \" + event.getObject().getDisplayableName());\n	  \n		Identity identity = context.getObjectByName(Identity.class, identityName);\n		\n		ProvisioningPlan plan = new ProvisioningPlan();\n		// Set identity to the plan\n		plan.setIdentity(identity);\n		\n		List acctReqs = new ArrayList();\n		\n		List links = identity.getLinks();\n\n		for(Iterator iterator = links.iterator(); iterator.hasNext();){\n			Link link = (Link) iterator.next();\n			if(link.getApplicationName().equalsIgnoreCase(\"LDAP\")){\n				AccountRequest ldapAcctReq = new AccountRequest();\n				ldapAcctReq.setOperation(AccountRequest.Operation.Disable);\n				ldapAcctReq.setNativeIdentity(link.getNativeIdentity());\n				ldapAcctReq.setApplication(\"LDAP\");\n				acctReqs.add(ldapAcctReq);\n			}\n			\n			if(link.getApplicationName().equalsIgnoreCase(\"HR System\")){\n				AccountRequest jdbcAcctReq = new AccountRequest();\n				jdbcAcctReq.setOperation(AccountRequest.Operation.Disable);\n				jdbcAcctReq.setNativeIdentity(link.getNativeIdentity());\n				jdbcAcctReq.setApplication(\"HR System\");\n				acctReqs.add(jdbcAcctReq);\n			}\n		}\n		\n		\n		plan.setAccountRequests(acctReqs);\n		\n		workflow.put(\"plan\", plan);\n		\n		return plan;\n      </Source>\n    </Script>\n    <Transition to=\"Initialize\"/>\n  </Step>\n  <Step icon=\"Task\" name=\"Initialize\" posX=\"170\" posY=\"10\">\n    <Arg name=\"formTemplate\" value=\"Identity Update\"/>\n    <Arg name=\"identityName\" value=\"ref:identityName\"/>\n    <Arg name=\"identityDisplayName\" value=\"ref:identityDisplayName\"/>\n    <Arg name=\"launcher\" value=\"ref:launcher\"/>\n    <Arg name=\"optimisticProvisioning\" value=\"ref:optimisticProvisioning\"/>\n    <Arg name=\"plan\" value=\"ref:plan\"/>\n    <Arg name=\"policyScheme\" value=\"none\"/>\n    <Arg name=\"priority\" value=\"ref:workItemPriority\"/>\n    <Arg name=\"source\" value=\"ref:source\"/>\n    <Arg name=\"trace\" value=\"ref:trace\"/>\n    <Arg name=\"flow\" value=\"Lifecycle\"/>\n    <Description>\n      Call the standard subprocess to initialize the request, this includes\n      auditing, building the approvalset, compiling the plan into \n       project and checking policy violations.\n    </Description>\n    <Return name=\"project\" to=\"project\"/>\n    <Return name=\"approvalSet\" to=\"cart\"/>\n    <Return name=\"identityRequestId\" to=\"identityRequestId\"/>\n    <Return name=\"policyViolations\" to=\"policyViolations\"/>\n    <WorkflowRef>\n      <Reference class=\"sailpoint.object.Workflow\" id=\"4028ab1063fdfb6d0163fdfc68a90035\" name=\"Identity Request Initialize\"/>\n    </WorkflowRef>\n    <Transition to=\"Provision\"/>\n  </Step>\n  <Step condition=\"script:!((size(policyViolations) > 0 ) &amp;&amp; (policyScheme.equals(&quot;fail&quot;)))\" icon=\"Task\" name=\"Provision\" posX=\"290\" posY=\"10\">\n    <Arg name=\"approvalScheme\" value=\"ref:approvalScheme\"/>\n    <Arg name=\"fallbackApprover\" value=\"ref:fallbackApprover\"/>\n    <Arg name=\"foregroundProvisioning\" value=\"ref:foregroundProvisioning\"/>\n    <Arg name=\"formTemplate\" value=\"Identity Update\"/>\n    <Arg name=\"identityDisplayName\" value=\"ref:identityDisplayName\"/>\n    <Arg name=\"identityName\" value=\"ref:identityName\"/>\n    <Arg name=\"identityRequestId\" value=\"ref:identityRequestId\"/>\n    <Arg name=\"launcher\" value=\"ref:launcher\"/>\n    <Arg name=\"manualActionsEmailTemplate\" value=\"Pending Manual Changes\"/>\n    <Arg name=\"optimisticProvisioning\" value=\"ref:optimisticProvisioning\"/>\n    <Arg name=\"priority\" value=\"ref:workItemPriority\"/>\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Arg name=\"policyScheme\" value=\"none\"/>\n    <Arg name=\"trace\" value=\"ref:trace\"/>\n    <Description>\n      Call the standard subprocess that will process the \n      approval decisions and do provisioning.  This\n      includes calling any configured provisioning \n      connectors and building manual actions.\n    </Description>\n    <Return name=\"project\" to=\"project\"/>\n    <WorkflowRef>\n      <Reference class=\"sailpoint.object.Workflow\" id=\"4028ab1063fdfb6d0163fdfc6aa00038\" name=\"Identity Request Provision\"/>\n    </WorkflowRef>\n    <Transition to=\"Finalize\"/>\n  </Step>\n  <Step catches=\"complete\" condition=\"script:!((size(policyViolations) > 0 ) &amp;&amp; (policyScheme.equals(&quot;fail&quot;)))\" icon=\"Task\" name=\"Finalize\" posX=\"410\" posY=\"10\">\n    <Arg name=\"approvalSet\" value=\"ref:cart\"/>\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Arg name=\"priority\" value=\"ref:workItemPriority\"/>\n    <Arg name=\"trace\" value=\"ref:trace\"/>\n    <Arg name=\"identityRequestId\" value=\"ref:identityRequestId\"/>\n    <Description>\n      Call the standard subprocess that can audit/finalize the request.\n    </Description>\n    <WorkflowRef>\n      <Reference class=\"sailpoint.object.Workflow\" id=\"4028ab1063fdfb6d0163fdfc6b2b0039\" name=\"Identity Request Finalize\"/>\n    </WorkflowRef>\n    <Transition to=\"end\"/>\n  </Step>\n  <Step icon=\"Stop\" name=\"end\" posX=\"540\" posY=\"10\"/>\n</List>\n',' ',' ','Identity'),('4028ab1063fdfb6d0163fdfc74430042',1528974570563,1739425380272,NULL,NULL,NULL,'Lifecycle Event - Reinstate','Enable all accounts when an employee is reinstated.','IdentityLifecycle',NULL,_binary '\0',_binary '',_binary '\0',0,_binary '\0',NULL,NULL,'<List>\n  <Variable input=\"true\" name=\"trigger\">\n    <Description>The IdentityTrigger</Description>\n  </Variable>\n  <Variable input=\"true\" name=\"event\" transient=\"true\">\n    <Description>\n      The IdentityChangeEvent.  It can be used to build\n      the provisioning plan, but does not need to be\n      persisted with the case, so marked as transient.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"identityName\">\n    <Description>The name of the identity.</Description>\n  </Variable>\n  <Variable initializer=\"script:(identityDisplayName != void) ? identityDisplayName : resolveDisplayName(identityName)\" input=\"true\" name=\"identityDisplayName\">\n    <Description>\n      The displayName of the identity being updated.\n      Query for this using a projection query and fall back to the name.\n    </Description>\n  </Variable>\n  <Variable name=\"plan\">\n    <Description>The provisioning plan, which is built by a service method. </Description>\n  </Variable>\n  <Variable initializer=\"string:Reinstate\" name=\"flow\">\n    <Description>The name of the identity.</Description>\n  </Variable>\n  <Variable editable=\"true\" initializer=\"false\" name=\"optimisticProvisioning\">\n    <Description>\n      Set to true to enable optimistic provisioning.  This will cause\n      changes to the entitlements compiled from role assignments to be \n      applied immediately to the identity cube rather than waiting\n      for the next refresh/reaggregation after the provisioning system\n      completes the request.\n    </Description>\n  </Variable>\n  <Variable editable=\"true\" initializer=\"true\" name=\"foregroundProvisioning\">\n    <Description>\n      Normally provisioning is done in a step that uses the \"background\"\n      option to force the workflow to be suspend and be resumed in a\n      background task thread.  This prevents the browser session from\n      hanging since provision can sometimes take a long time.  For demos\n      and testing it can be better to do this in the foreground so that\n      provisioning will have been performed when control is returned to the\n      user.  This prevents having to run the Perform Maintenance task to \n      see the results of the request.\n    </Description>\n  </Variable>\n  <Variable initializer=\"spadmin\" input=\"true\" name=\"fallbackApprover\">\n    <Description>\n      A String that specifies the name of the Identity that will \n      be assigned any approvals where the owner of the approver \n      can\'t be resolved. Example if the scheme is \"owner\" and the \n      application doesn\'t specify and owner.\n    </Description>\n  </Variable>\n  <Variable initializer=\"LCM\" input=\"true\" name=\"source\">\n    <Description>\n      String version of sailpoint.object.Source to indicate\n      where the request originated.  Defaults to LCM.\n    </Description>\n  </Variable>\n  <Variable initializer=\"false\" input=\"true\" name=\"trace\">\n    <Description>\n      Used for debugging this workflow and when set to true trace\n      will be sent to stdout.\n    </Description>\n  </Variable>\n  <Variable name=\"project\">\n    <Description>\n      ProvisioningProject which is just a compiled version of the ProvisioningPlan.\n    </Description>\n  </Variable>\n  <Variable name=\"identityRequestId\" output=\"true\">\n    <Description>\n       The id of the object that encapsulates the request information\n       and status as it goes through the request life cycle. The workflow will create\n       and update this object ( through special steps ) as the workflow \n       progresses.\n    </Description>\n  </Variable>\n  <Variable name=\"cart\" output=\"true\">\n    <Description>\n       This attribute is set during the \"Build Approval Set\" step,\n       which builds this list by going through the ProvisioningPlan\n       to build the line items that need to be approved.\n\n       This variable includes all ApprovalItems that are part of \n       the request process and is updated during the AfterScript\n       of the approval process by assimilating the decisions \n       and comments from the Approvals copy of the ApprovalItem.\n    </Description>\n  </Variable>\n  <Variable initializer=\"Normal\" input=\"true\" name=\"workItemPriority\">\n    <Description>\n       The String version of a WorkItem.Priority. This variable is \n       used to set the priority on all of the workitems generated \n       as part of this workflow and also set on the IdentityRequest\n       object.\n    </Description>\n  </Variable>\n</List>\n',NULL,'<List>\n  <Step icon=\"Start\" name=\"Start\" posX=\"28\" posY=\"10\">\n    <Transition to=\"Call Joiner\">\n      <Script>\n        <Source>\n		import sailpoint.api.*;\n		import sailpoint.tools.*;\n		import sailpoint.object.*;\n		import java.util.*;\n		import java.text.*;\n		\n		Identity identity = context.getObjectByName(Identity.class, identityName);\n		\n		List links = identity.getLinks();\n		Link ldapLink = null;\n		Link jdbcLink = null;\n		\n		for(Iterator iterator = links.iterator(); iterator.hasNext();){\n			Link link = (Link) iterator.next();\n			if(!link.getApplicationName().equalsIgnoreCase(\"LDAP\")){\n				return true;\n			}\n			\n			if(!link.getApplicationName().equalsIgnoreCase(\"HR System\")){\n				return true;\n			}\n		}\n		\n		return false;\n	  </Source>\n      </Script>\n    </Transition>\n    <Transition to=\"Build Plan\"/>\n  </Step>\n  <Step icon=\"Message\" name=\"Call Joiner\" posX=\"148\" posY=\"10\">\n    <Arg name=\"identityName\" value=\"ref:identityName\"/>\n    <Arg name=\"launcher\" value=\"ref:launcher\"/>\n    <Arg name=\"foregroundProvisioning\" value=\"ref:foregroundProvisioning\"/>\n    <Description>\n      Call Joiner workflow\n    </Description>\n    <WorkflowRef>\n      <Reference class=\"sailpoint.object.Workflow\" id=\"4028ab1063fdfb6d0163fdfc72f40040\" name=\"Lifecycle Event - Joiner\"/>\n    </WorkflowRef>\n    <Transition to=\"Build Plan\"/>\n  </Step>\n  <Step icon=\"Message\" name=\"Build Plan\" posX=\"148\" posY=\"10\" resultVariable=\"plan\">\n    <Description>Process the user that joined.</Description>\n    <Script>\n      <Source>\n		import org.apache.commons.logging.Log;\n		import org.apache.commons.logging.LogFactory;\n		import org.apache.commons.lang.StringUtils;\n		import sailpoint.object.AttributeAssignment;\n		import sailpoint.api.IdentityService;\n		import sailpoint.api.ObjectUtil;\n		import sailpoint.api.SailPointContext;\n		import sailpoint.api.SailPointFactory;\n		import sailpoint.api.Provisioner;\n		import sailpoint.api.*;\n		import java.util.Calendar;\n		import sailpoint.object.IdentityEntitlement;\n		import sailpoint.object.ApprovalItem.ProvisioningState;\n		import sailpoint.object.Application;\n		import sailpoint.object.ApprovalItem;\n		import sailpoint.object.AuditEvent;\n		import sailpoint.object.Attributes;\n		import sailpoint.object.AuthenticationAnswer;\n		import sailpoint.object.AuthenticationQuestion;\n		import sailpoint.object.Bundle;\n		import sailpoint.object.Certification;\n		import sailpoint.object.CertificationEntity;\n		import sailpoint.object.Custom;\n		import sailpoint.object.EmailOptions;\n		import sailpoint.object.EmailTemplate;\n		import sailpoint.object.Filter;\n		import sailpoint.object.Form;\n		import sailpoint.object.Identity;\n		import sailpoint.object.IdentityRequest;\n		import sailpoint.object.IdentityRequestItem;\n		import sailpoint.object.Link;\n		import sailpoint.object.ManagedAttribute;\n		import sailpoint.object.ProvisioningPlan;\n		import sailpoint.object.ProvisioningPlan.AccountRequest;\n		import sailpoint.object.ProvisioningPlan.AttributeRequest;\n		import sailpoint.object.ProvisioningPlan.Operation;\n		import sailpoint.object.ProvisioningPlan.AccountRequest.Operation;\n		import sailpoint.object.ProvisioningProject;\n		import sailpoint.object.ProvisioningResult;\n		import sailpoint.object.QueryOptions;\n		import sailpoint.object.RoleAssignment;\n		import sailpoint.object.Field;\n		import sailpoint.object.Filter;\n		import sailpoint.object.Form;\n		import sailpoint.object.WorkItem;\n		import sailpoint.object.Form.Section;\n		import sailpoint.object.*;\n		import sailpoint.object.Request;\n		import sailpoint.object.Filter.LeafFilter;\n		import sailpoint.object.Filter.CompositeFilter;\n		import sailpoint.object.Profile;\n		import sailpoint.workflow.WorkflowContext;\n\n\n		import sailpoint.tools.GeneralException;\n		import sailpoint.tools.Message;\n		import sailpoint.tools.Util;\n		import sailpoint.tools.xml.XMLObjectFactory;\n\n		import java.util.ArrayList;\n		import java.util.HashMap;\n		import java.util.Iterator;\n		import java.util.List;\n		import java.util.Map;\n		import java.util.Arrays;\n		\n		System.out.println(\"New user was entered the system: \" + event.getObject().getDisplayableName());\n	  \n		Identity identity = context.getObjectByName(Identity.class, identityName);\n		\n		List links = identity.getLinks();\n		Link ldapLink = null;\n		Link jdbcLink = null;\n		\n		for(Iterator iterator = links.iterator(); iterator.hasNext();){\n			Link link = (Link) iterator.next();\n			if(link.getApplicationName().equalsIgnoreCase(\"LDAP\")){\n				ldapLink = link;\n			}\n			\n			if(link.getApplicationName().equalsIgnoreCase(\"HR System\")){\n				jdbcLink = link;\n			}\n		}\n		\n		\n		ProvisioningPlan plan = new ProvisioningPlan();\n		// Set identity to the plan\n		plan.setIdentity(identity);\n\n		List acctReqs = new ArrayList();\n		\n		if(ldapLink != null){\n			AccountRequest ldapAcctReq = new AccountRequest();\n			ldapAcctReq.setOperation(AccountRequest.Operation.Enable);\n			ldapAcctReq.setApplication(\"LDAP\");\n			acctReqs.add(ldapAcctReq);\n		}\n		\n		if(jdbcLink != null){\n			AccountRequest jdbcAcctReq = new AccountRequest();\n			jdbcAcctReq.setOperation(AccountRequest.Operation.Enable);\n			jdbcAcctReq.setApplication(\"HR System\");\n			acctReqs.add(jdbcAcctReq);\n		}\n\n		\n		plan.setAccountRequests(acctReqs);\n		\n		workflow.put(\"plan\", plan);\n		\n		return plan;\n      </Source>\n    </Script>\n    <Transition to=\"Initialize\"/>\n  </Step>\n  <Step icon=\"Task\" name=\"Initialize\" posX=\"170\" posY=\"10\">\n    <Arg name=\"formTemplate\" value=\"Identity Update\"/>\n    <Arg name=\"identityName\" value=\"ref:identityName\"/>\n    <Arg name=\"identityDisplayName\" value=\"ref:identityDisplayName\"/>\n    <Arg name=\"launcher\" value=\"ref:launcher\"/>\n    <Arg name=\"optimisticProvisioning\" value=\"ref:optimisticProvisioning\"/>\n    <Arg name=\"plan\" value=\"ref:plan\"/>\n    <Arg name=\"priority\" value=\"ref:workItemPriority\"/>\n    <Arg name=\"policyScheme\" value=\"none\"/>\n    <Arg name=\"source\" value=\"ref:source\"/>\n    <Arg name=\"trace\" value=\"ref:trace\"/>\n    <Arg name=\"flow\" value=\"ref:flow\"/>\n    <Description>\n      Call the standard subprocess to initialize the request, this includes\n      auditing, building the approvalset, compiling the plan into \n       project and checking policy violations.\n    </Description>\n    <Return name=\"project\" to=\"project\"/>\n    <Return name=\"approvalSet\" to=\"cart\"/>\n    <Return name=\"identityRequestId\" to=\"identityRequestId\"/>\n    <Return name=\"policyViolations\" to=\"policyViolations\"/>\n    <WorkflowRef>\n      <Reference class=\"sailpoint.object.Workflow\" id=\"4028ab1063fdfb6d0163fdfc68a90035\" name=\"Identity Request Initialize\"/>\n    </WorkflowRef>\n    <Transition to=\"Provision\"/>\n  </Step>\n  <Step condition=\"script:!((size(policyViolations) > 0 ) &amp;&amp; (policyScheme.equals(&quot;fail&quot;)))\" icon=\"Task\" name=\"Provision\" posX=\"290\" posY=\"10\">\n    <Arg name=\"approvalScheme\" value=\"ref:approvalScheme\"/>\n    <Arg name=\"fallbackApprover\" value=\"ref:fallbackApprover\"/>\n    <Arg name=\"foregroundProvisioning\" value=\"ref:foregroundProvisioning\"/>\n    <Arg name=\"formTemplate\" value=\"Identity Update\"/>\n    <Arg name=\"identityDisplayName\" value=\"ref:identityDisplayName\"/>\n    <Arg name=\"identityName\" value=\"ref:identityName\"/>\n    <Arg name=\"identityRequestId\" value=\"ref:identityRequestId\"/>\n    <Arg name=\"launcher\" value=\"ref:launcher\"/>\n    <Arg name=\"manualActionsEmailTemplate\" value=\"Pending Manual Changes\"/>\n    <Arg name=\"optimisticProvisioning\" value=\"ref:optimisticProvisioning\"/>\n    <Arg name=\"priority\" value=\"ref:workItemPriority\"/>\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Arg name=\"policyScheme\" value=\"none\"/>\n    <Arg name=\"trace\" value=\"ref:trace\"/>\n    <Description>\n      Call the standard subprocess that will process the \n      approval decisions and do provisioning.  This\n      includes calling any configured provisioning\n      connectors and building manual actions.\n    </Description>\n    <Return name=\"project\" to=\"project\"/>\n    <WorkflowRef>\n      <Reference class=\"sailpoint.object.Workflow\" id=\"4028ab1063fdfb6d0163fdfc6aa00038\" name=\"Identity Request Provision\"/>\n    </WorkflowRef>\n    <Transition to=\"Finalize\"/>\n  </Step>\n  <Step catches=\"complete\" condition=\"script:!((size(policyViolations) > 0 ) &amp;&amp; (policyScheme.equals(&quot;fail&quot;)))\" icon=\"Task\" name=\"Finalize\" posX=\"410\" posY=\"10\">\n    <Arg name=\"approvalSet\" value=\"ref:cart\"/>\n    <Arg name=\"priority\" value=\"ref:workItemPriority\"/>\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Arg name=\"trace\" value=\"ref:trace\"/>\n    <Arg name=\"identityRequestId\" value=\"ref:identityRequestId\"/>\n    <Description>\n      Call the standard subprocess that can audit/finalize the request.\n    </Description>\n    <WorkflowRef>\n      <Reference class=\"sailpoint.object.Workflow\" id=\"4028ab1063fdfb6d0163fdfc6b2b0039\" name=\"Identity Request Finalize\"/>\n    </WorkflowRef>\n    <Transition to=\"end\"/>\n  </Step>\n  <Step icon=\"Stop\" name=\"end\" posX=\"530\" posY=\"10\"/>\n</List>\n',' ',' ','Identity'),('4028ab1063fdfb6d0163fdfc75260043',1528974570790,1739425380033,NULL,NULL,NULL,'Lifecycle Event - Manager Transfer','Process a user when they change managers.','IdentityLifecycle',NULL,_binary '\0',_binary '',_binary '\0',0,_binary '\0',NULL,NULL,'<List>\n  <Variable input=\"true\" name=\"trigger\">\n    <Description>The IdentityTrigger</Description>\n  </Variable>\n  <Variable input=\"true\" name=\"event\" transient=\"true\">\n    <Description>\n      The IdentityChangeEvent.  It can be used to build\n      the provisioning plan, but does not need to be\n      persisted with the case, so marked as transient.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"identityName\">\n    <Description>The name of the identity.</Description>\n  </Variable>\n</List>\n',NULL,'<List>\n  <Step icon=\"Start\" name=\"Start\" posX=\"28\" posY=\"10\">\n    <Transition to=\"Process user\"/>\n  </Step>\n  <Step icon=\"Message\" name=\"Process user\" posX=\"148\" posY=\"10\">\n    <Description>Process the user that transferred managers.</Description>\n    <Script>\n      <Source>\n      \n       import sailpoint.object.*;\n\n       String identityFullname = event.getIdentityFullName();\n       Identity oldManager = (null != event.getOldObject()) ? event.getOldObject().getManager() : null;\n       Identity newManager = (null != event.getObject()) ? event.getObject().getManager() : null;\n\n       String oldManagerName = (null != oldManager) ? oldManager.getDisplayableName() : null;\n       String newManagerName = (null != newManager) ? newManager.getDisplayableName() : null;\n\n       System.out.println(identityFullname + \" changed managers from \" + oldManagerName + \" to \" + newManagerName);\n      \n      </Source>\n    </Script>\n    <Transition to=\"Stop\"/>\n  </Step>\n  <Step icon=\"Stop\" name=\"Stop\" posX=\"268\" posY=\"10\"/>\n</List>\n',' ',' ','Identity'),('4028ab1063fdfb6d0163fdfc75820044',1528974570882,1739425378830,NULL,NULL,NULL,'Lifecycle Event - Email manager for all native changes','\n    Send a email to the manager when we notice there are native entitlement\n    changes.\n  ','IdentityLifecycle',NULL,_binary '\0',_binary '',_binary '\0',0,_binary '\0',NULL,NULL,'<List>\n  <Variable input=\"true\" name=\"trigger\">\n    <Description>The IdentityTrigger</Description>\n  </Variable>\n  <Variable input=\"true\" name=\"event\" transient=\"true\">\n    <Description>\n      The IdentityChangeEvent.  It can be used to build\n      the provisioning plan, but does not need to be\n      persisted with the case, so marked as transient.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"identityName\">\n    <Description>The name of the identity.</Description>\n  </Variable>\n  <Variable initializer=\"script:(identityDisplayName != void) ? identityDisplayName : resolveDisplayName(identityName)\" input=\"true\" name=\"identityDisplayName\">\n    <Description>\n      The displayName of the identity being updated.\n      Query for this using a projection query and fall back to the name.\n    </Description>\n  </Variable>\n  <Variable name=\"plan\">\n    <Description>The provisioning plan, which is built by a service method. </Description>\n  </Variable>\n  <Variable editable=\"true\" initializer=\"false\" name=\"optimisticProvisioning\">\n    <Description>\n      Set to true to enable optimistic provisioning.  This will cause\n      changes to the entitlements compiled from role assignments to be \n      applied immediately to the identity cube rather than waiting\n      for the next refresh/reaggregation after the provisioning system\n      completes the request.\n    </Description>\n  </Variable>\n  <Variable editable=\"true\" initializer=\"true\" name=\"foregroundProvisioning\">\n    <Description>\n      Normally provisioning is done in a step that uses the \"background\"\n      option to force the workflow to be suspend and be resumed in a\n      background task thread.  This prevents the browser session from\n      hanging since provision can sometimes take a long time.  For demos\n      and testing it can be better to do this in the foreground so that\n      provisioning will have been performed when control is returned to the\n      user.  This prevents having to run the Perform Maintenance task to \n      see the results of the request.\n    </Description>\n  </Variable>\n  <Variable initializer=\"spadmin\" input=\"true\" name=\"fallbackApprover\">\n    <Description>\n      A String that specifies the name of the Identity that will \n      be assigned any approvals where the owner of the approver \n      can\'t be resolved. Example if the scheme is \"owner\" and the \n      application doesn\'t specify and owner.\n    </Description>\n  </Variable>\n  <Variable initializer=\"LCM\" input=\"true\" name=\"source\">\n    <Description>\n      String version of sailpoint.object.Source to indicate\n      where the request originated.  Defaults to LCM.\n    </Description>\n  </Variable>\n  <Variable initializer=\"false\" input=\"true\" name=\"trace\">\n    <Description>\n      Used for debugging this workflow and when set to true trace\n      will be sent to stdout.\n    </Description>\n  </Variable>\n  <Variable name=\"project\">\n    <Description>\n      ProvisioningProject which is just a compiled version of the ProvisioningPlan.\n    </Description>\n  </Variable>\n  <Variable name=\"identityRequestId\" output=\"true\">\n    <Description>\n       The sequence id of the Identity request object which is stored in \n       the name field of the identity request.\n    </Description>\n  </Variable>\n  <Variable name=\"cart\" output=\"true\">\n    <Description>\n       This variable includes all ApprovalItems that are part of \n       the request process and is updated during the AfterScript\n       of the approval process by assimilating the decisions \n       and comments from the Approvals copy of the ApprovalItem.\n    </Description>\n  </Variable>\n  <Variable initializer=\"Normal\" input=\"true\" name=\"workItemPriority\">\n    <Description>\n       The String version of a WorkItem.Priority. This variable is \n       used to set the priority on all of the workitems generated \n       as part of this workflow and also set on the IdentityRequest\n       object.\n    </Description>\n  </Variable>\n</List>\n',NULL,'<List>\n  <Step name=\"start\" posX=\"28\" posY=\"10\">\n    <Script>\n      <Source>\n        import sailpoint.tools.Util;\n        import sailpoint.object.WorkflowCase;\n        import sailpoint.object.TaskResult;\n\n       // System.out.println(\"Event was fired for identity [\"+identityName+\"]\");\n       // System.out.println(\"                    trigger [\"+trigger.toXml()+\"]\");\n       // System.out.println(\"                    event [\"+event.toXml()+\"]\");\n      </Source>\n    </Script>\n    <Transition to=\"Notify Manager\"/>\n  </Step>\n  <Step action=\"call:sendEmail\" icon=\"Email\" name=\"Notify Manager\" posX=\"148\" posY=\"10\">\n    <Arg name=\"template\" value=\"Native Account Change Manager Notification\"/>\n    <Arg name=\"to\" value=\"script:getManagersEmail(identityName)\"/>\n    <Transition to=\"end\"/>\n  </Step>\n  <Step icon=\"Stop\" name=\"end\" posX=\"276\" posY=\"10\"/>\n</List>\n',' ',' ','Identity'),('4028ab1063fdfb6d0163fdfc76260045',1528974571047,1739425379798,NULL,NULL,NULL,'Lifecycle Event - Manager Approval for all native changes','\n  An example workflow that requires manager approval\n  for all natively detected changes found by IdentityIQ.\n  \n  Any items rejected by the manager will be reversed and \n  provisioned.    \n  ','IdentityLifecycle',NULL,_binary '\0',_binary '',_binary '\0',0,_binary '\0',NULL,NULL,'<List>\n  <Variable input=\"true\" name=\"trigger\">\n    <Description>The IdentityTrigger</Description>\n  </Variable>\n  <Variable input=\"true\" name=\"event\" transient=\"true\">\n    <Description>\n      The IdentityChangeEvent.  It can be used to build\n      the provisioning plan, but does not need to be\n      persisted with the case, so marked as transient.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"identityName\">\n    <Description>The name of the identity.</Description>\n  </Variable>\n  <Variable initializer=\"script:(identityDisplayName != void) ? identityDisplayName : resolveDisplayName(identityName)\" input=\"true\" name=\"identityDisplayName\">\n    <Description>\n      The displayName of the identity being updated.\n      Query for this using a projection query and fall back to the name.\n    </Description>\n  </Variable>\n  <Variable name=\"plan\">\n    <Description>The provisioning plan, which is built by a service method. </Description>\n  </Variable>\n  <Variable editable=\"true\" initializer=\"false\" name=\"optimisticProvisioning\">\n    <Description>\n      Set to true to enable optimistic provisioning.  This will cause\n      changes to the entitlements compiled from role assignments to be \n      applied immediately to the identity cube rather than waiting\n      for the next refresh/reaggregation after the provisioning system\n      completes the request.\n    </Description>\n  </Variable>\n  <Variable editable=\"true\" initializer=\"true\" name=\"foregroundProvisioning\">\n    <Description>\n      Normally provisioning is done in a step that uses the \"background\"\n      option to force the workflow to be suspend and be resumed in a\n      background task thread.  This prevents the browser session from\n      hanging since provision can sometimes take a long time.  For demos\n      and testing it can be better to do this in the foreground so that\n      provisioning will have been performed when control is returned to the\n      user.  This prevents having to run the Perform Maintenance task to \n      see the results of the request.\n    </Description>\n  </Variable>\n  <Variable initializer=\"spadmin\" input=\"true\" name=\"fallbackApprover\">\n    <Description>\n      A String that specifies the name of the Identity that will \n      be assigned any approvals where the owner of the approver \n      can\'t be resolved. Example if the scheme is \"owner\" and the \n      application doesn\'t specify and owner.\n    </Description>\n  </Variable>\n  <Variable initializer=\"LCM\" input=\"true\" name=\"source\">\n    <Description>\n      String version of sailpoint.object.Source to indicate\n      where the request originated.  Defaults to LCM.\n    </Description>\n  </Variable>\n  <Variable initializer=\"false\" input=\"true\" name=\"trace\">\n    <Description>\n      Used for debugging this workflow and when set to true trace\n      will be sent to stdout.\n    </Description>\n  </Variable>\n  <Variable name=\"project\">\n    <Description>\n      ProvisioningProject which is just a compiled version of the ProvisioningPlan.\n    </Description>\n  </Variable>\n  <Variable name=\"identityRequestId\" output=\"true\">\n    <Description>\n       The sequence id of the Identity request object which is stored in \n       the name field of the identity request.\n    </Description>\n  </Variable>\n  <Variable name=\"approvalSet\">\n    <Description>\n       The variable used to hold the approval set generated from the\n       native changes on the event.\n    </Description>\n  </Variable>\n  <Variable initializer=\"true\" name=\"provisionRejectedItems\">\n    <Description>\n        Flag to indicate if actual provisioning to reverse te native\n        change should take place OR if it should just print a plan to \n        stdout. Set this variable to true, if you want it to provision\n        the rejected items, otherwise it\'ll just be printed to stdout. \n     </Description>\n  </Variable>\n  <Variable name=\"launcher\">\n    <Description>The name of the identity that launched the workflow. In cases where workflows are launched by the system an alternate launcher name may be passed as as a variable.</Description>\n  </Variable>\n  <Variable initializer=\"Modify\" name=\"operations\">\n    <Description>CSV list of operations that are part of the native change request, default to Modify but this will be recalculated in the \"Build OP String\" step.</Description>\n  </Variable>\n  <Variable initializer=\"Normal\" input=\"true\" name=\"workItemPriority\">\n    <Description>\n       The String version of a WorkItem.Priority. This variable is \n       used to set the priority on all of the workitems generated \n       as part of this workflow and also set on the IdentityRequest\n       object.\n    </Description>\n  </Variable>\n</List>\n',NULL,'<List>\n  <Step icon=\"Start\" name=\"start\" posX=\"23\" posY=\"129\">\n    <Script>\n      <Source>\n        import sailpoint.tools.Util;\n        if ( Util.otob(trace) ) { \n            System.out.println(\"Event was fired for identity [\"+identityName+\"]\");\n            System.out.println(\"                    trigger [\"+trigger.toXml()+\"]\");\n            System.out.println(\"                    event [\"+event.toXml()+\"]\");\n        }\n      </Source>\n    </Script>\n    <Transition to=\"Build Op String\"/>\n    <Transition to=\"end\" when=\"script:(Util.size(event.getNativeChanges())==0)\"/>\n  </Step>\n  <Step name=\"Build Op String\" posX=\"81\" posY=\"20\" resultVariable=\"operations\">\n    <Script>\n      <Source>\n        import sailpoint.object.NativeChangeDetection;\n        import sailpoint.object.ProvisioningPlan.AccountRequest;\n        import sailpoint.tools.Util;\n        \n        List ops = new ArrayList();\n        if ( event != null ) {\n            List ncs = event.getNativeChanges();\n            if ( ncs != null ) {\n                for ( NativeChangeDetection nc : ncs ) {\n                    AccountRequest.Operation op = nc.getOperation();\n                    if ( op == null ) \n                        opString = \"Modify\";\n                    else\n                        opString = op.toString();\n\n                    if ( !ops.contains(opString) ) {\n                        ops.add(opString);\n                    }\n                }\n            }\n        }\n        return Util.listToCsv(ops);\n      </Source>\n    </Script>\n    <Transition to=\"Build Native Change Approval\"/>\n  </Step>\n  <Step action=\"call:buildApprovalSetFromNativeChanges\" name=\"Build Native Change Approval\" posX=\"232\" posY=\"20\" resultVariable=\"approvalSet\">\n    <Arg name=\"event\" value=\"ref:event\"/>\n    <Return name=\"approvalSet\" to=\"approvalSet\"/>\n    <Transition to=\"Approve Native Change\"/>\n  </Step>\n  <Step name=\"Approve Native Change\" posX=\"408\" posY=\"20\">\n    <Approval mode=\"parallel\" owner=\"script:getManagerName(identityName, launcher, fallbackApprover);\" renderer=\"nativeChangeApprovalRenderer.xhtml\" send=\"identityDisplayName,identityName\">\n      <AfterScript>\n        <Source>\n          import sailpoint.workflow.IdentityRequestLibrary;\n                    \n          if ( item == null ) \n              return;\n\n          assimilateWorkItemApprovalSet(wfcontext, item, approvalSet);          \n          auditDecisions(item);\n        </Source>\n      </AfterScript>\n      <Arg name=\"workItemRequester\" value=\"$(launcher)\"/>\n      <Arg name=\"launcher\" value=\"ref:launcher\"/>\n      <Arg name=\"approvalSet\" value=\"ref:approvalSet\"/>\n      <Arg name=\"operations\" value=\"$(operations)\"/>\n      <Arg name=\"workItemDescription\" value=\"Native Account Changes for User: $(identityDisplayName) - Manager Approval\"/>\n      <Arg name=\"workItemNotificationTemplate\" value=\"ref:ownerEmailTemplate\"/>\n      <Arg name=\"workItemPriority\" value=\"ref:workItemPriority\"/>\n    </Approval>\n    <Transition to=\"Process Approval Decisions\"/>\n  </Step>\n  <Step action=\"call:processNativeChangesApprovalDecisions\" name=\"Process Approval Decisions\" posX=\"575\" posY=\"20\" resultVariable=\"plan\">\n    <Transition to=\"Provision Native Change Reversal\"/>\n  </Step>\n  <Step condition=\"script:( Util.otob(provisionRejectedItems) &amp;&amp; plan != null )\" icon=\"Task\" name=\"Provision Native Change Reversal\" posX=\"767\" posY=\"20\">\n    <Arg name=\"flow\" value=\"EntitlementsRequest\"/>\n    <Arg name=\"identityName\" value=\"ref:identityName\"/>\n    <Arg name=\"identityDisplayName\" value=\"ref:identityDisplayName\"/>\n    <Arg name=\"optimisticProvisioning\" value=\"ref:optimisticProvisioning\"/>\n    <Arg name=\"plan\" value=\"ref:plan\"/>\n    <Arg name=\"policyScheme\" value=\"none\"/>\n    <Arg name=\"priority\" value=\"ref:workItemPriority\"/>\n    <Arg name=\"approvalScheme\" value=\"none\"/>\n    <Arg name=\"source\" value=\"ref:source\"/>\n    <Arg name=\"requireViolationReviewComments\" value=\"false\"/>\n    <Arg name=\"allowRequestsWithViolations\" value=\"true\"/>\n    <Arg name=\"enableRetryRequest\" value=\"false\"/>\n    <Arg name=\"launcher\" value=\"ref:launcher\"/>\n    <Arg name=\"doRefresh\" value=\"true\"/>\n    <Arg name=\"trace\" value=\"ref:trace\"/>\n    <Return name=\"project\" to=\"project\"/>\n    <Return name=\"identityRequestId\" to=\"identityRequestId\"/>\n    <Return merge=\"true\" name=\"workItemComments\" to=\"workItemComments\"/>\n    <WorkflowRef>\n      <Reference class=\"sailpoint.object.Workflow\" id=\"4028ab1063fdfb6d0163fdfc6ea7003c\" name=\"LCM Provisioning\"/>\n    </WorkflowRef>\n    <Transition to=\"end\"/>\n  </Step>\n  <Step catches=\"complete\" icon=\"Catches\" name=\"Complete\" posX=\"658\" posY=\"185\">\n    <Arg name=\"priority\" value=\"ref:workItemPriority\"/>\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Arg name=\"trace\" value=\"ref:trace\"/>\n    <Arg name=\"approvalSet\" value=\"ref:approvalSet\"/>\n    <Arg name=\"identityRequestId\" value=\"ref:identityRequestId\"/>\n    <Description>\n      Call the standard subprocess that can audit/finalize the request if they are in play. \n    </Description>\n    <WorkflowRef>\n      <Reference class=\"sailpoint.object.Workflow\" id=\"4028ab1063fdfb6d0163fdfc6b2b0039\" name=\"Identity Request Finalize\"/>\n    </WorkflowRef>\n    <Transition to=\"end\"/>\n  </Step>\n  <Step icon=\"Stop\" name=\"end\" posX=\"767\" posY=\"125\"/>\n</List>\n',' ',' ','Identity'),('4028ab1063fdfb6d0163fdfc80210053',1528974573601,1739425374063,NULL,NULL,NULL,'Batch Request Wrapper',NULL,'BatchProvisioning','LCM',_binary '\0',_binary '\0',_binary '\0',0,_binary '\0','sailpoint.api.StandardWorkflowHandler',NULL,'<List>\n  <Variable initializer=\"parallelPoll\" input=\"true\" name=\"approvalMode\">\n    <Description>\n     A string that specifies how we should handle the approvals.\n\n     parallel\n       Approvals are processed concurrently and there must be consensus,\n       we wait for all approvers to approve.  The first approver that\n       rejects terminates the entire approval.\n \n     parallelPoll \n       Approvals are processed concurrently but consensus is not required.\n       All approvals will be processed, we don\'t stop if there are any\n       rejections.  \n\n     serial\n       Approvals are processed one at a time and there must be consensus.\n       The first approver that rejects terminates the entire approval.\n\n     serialPoll\n       Approvals are processed in order but consensus is not required.\n       All approvals will be processed, we don\'t stop if there are any\n       rejections.  In effect we are \"taking a poll\" of the approvers.\n\n     any\n      Approvals are processed concurrently, the first approver to \n      respond makes the decision for the group.\n    </Description>\n  </Variable>\n  <Variable initializer=\"spadmin\" input=\"true\" name=\"fallbackApprover\">\n    <Description>\n      A String that specifies the name of the Identity that will\n      be assigned any approvals where the owner of the approver\n      can\'t be resolved. Example if the scheme is \"owner\" and the\n      application doesn\'t specify and owner.\n    </Description>\n  </Variable>\n  <Variable initializer=\"batchRequest\" input=\"true\" name=\"approvalScheme\">\n    <Description>\n      For batch requests you should use the batchRequest scheme.\n    </Description>\n  </Variable>\n  <Variable initializer=\"false\" name=\"trace\">\n    <Description>\n      Used for debugging this workflow and when set to true trace\n      will be sent to stdout.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"identityName\">\n    <Description>The name of the identity being updated.</Description>\n  </Variable>\n  <Variable initializer=\"spadmin\" input=\"true\" name=\"batchRequestApprover\">\n    <Description>The name of the batch request approver.</Description>\n  </Variable>\n  <Variable name=\"requireBatchRequestApproval\">\n    <Description>\n       True or false. specifies whether or not we need to worry about the approval step.\n    </Description>\n  </Variable>\n  <Variable input=\"true\" name=\"batchApproverElectronicSignature\">\n    <Description>\n       The name of the electronic signature object that should be used when workitems \n       are completed by the batch approver when performing batch operations.\n    </Description>\n  </Variable>\n  <Variable name=\"approvalSet\">\n    <Description>\n       This attributes is set during the \"Build Approval Set\" step,\n       which builds this list by going through the ProvisioningPlan\n       to build the line items that need to be approved,\n\n       This variable includes all ApprovalItems that are part of \n       the request process and is updated during the AfterScript\n       of the approval process by assimilating the decisions \n       and comments from the Approvals copy of the ApprovalItem.\n    </Description>\n  </Variable>\n</List>\n',NULL,'<List>\n  <Step icon=\"Start\" name=\"Start\" posX=\"25\" posY=\"131\">\n    <Transition to=\"Approve\" when=\"script:requireBatchRequestApproval\"/>\n    <Transition to=\"Launch Batch Workflows\"/>\n  </Step>\n  <Step icon=\"Task\" name=\"Approve\" posX=\"83\" posY=\"12\">\n    <Arg name=\"workItemComments\"/>\n    <Arg name=\"approvalMode\" value=\"ref:approvalMode\"/>\n    <Arg name=\"approvalScheme\" value=\"ref:approvalScheme\"/>\n    <Arg name=\"approvalSet\" value=\"ref:approvalSet\"/>\n    <Arg name=\"flow\" value=\"ref:flow\"/>\n    <Arg name=\"fallbackApprover\" value=\"ref:fallbackApprover\"/>\n    <Arg name=\"identityName\" value=\"ref:identityName\"/>\n    <Arg name=\"batchRequestId\" value=\"ref:batchRequestId\"/>\n    <Arg name=\"trace\" value=\"ref:trace\"/>\n    <Arg name=\"batchRequestApprover\" value=\"ref:batchRequestApprover\"/>\n    <Arg name=\"batchApproverElectronicSignature\" value=\"ref:batchApproverElectronicSignature\"/>\n    <Arg name=\"batchApproverEmailTemplate\" value=\"Batch Approval\"/>\n    <Description>\n      Call the standard subprocess that will handle the built-in\n      owner, manager and security officer approval schemes.\n    </Description>\n    <Return name=\"approvalSet\" to=\"approvalSet\"/>\n    <Return name=\"workItemComments\"/>\n    <WorkflowRef>\n      <Reference class=\"sailpoint.object.Workflow\" id=\"4028ab1063fdfb6d0163fdfc69380036\" name=\"Identity Request Approve\"/>\n    </WorkflowRef>\n    <Transition to=\"Batch Request Rejected\" when=\"script:approvalSet.hasRejected()\"/>\n    <Transition to=\"Launch Batch Workflows\"/>\n  </Step>\n  <Step action=\"call:launchBatchWorkflows\" icon=\"Task\" name=\"Launch Batch Workflows\" posX=\"285\" posY=\"127\">\n    <Arg name=\"batchRequestId\" value=\"ref:batchRequestId\"/>\n    <Arg name=\"background\" value=\"ref:requireBatchRequestApproval\"/>\n    <Description>\n      Call library method to launch all the workflows\n    </Description>\n    <Transition to=\"end\"/>\n  </Step>\n  <Step action=\"call:requestRejected\" icon=\"Task\" name=\"Batch Request Rejected\" posX=\"339\" posY=\"8\">\n    <Arg name=\"batchRequestId\" value=\"ref:batchRequestId\"/>\n    <Description>\n      Update request with rejected status and result\n    </Description>\n    <Transition to=\"end\"/>\n  </Step>\n  <Step icon=\"Stop\" name=\"end\" posX=\"444\" posY=\"127\"/>\n</List>\n',' ',' ','Identity,BatchRequest,IdentityRequest'),('a9fe0bbd939b1ca981939bbd630e0000',1733484700441,1739425380914,NULL,NULL,NULL,'Sample Workflow','Disable all accounts when an employee leaves the company.',NULL,NULL,_binary '\0',_binary '',_binary '\0',0,_binary '\0',NULL,NULL,'<List>\n  <Variable name=\"identityName\">\n    <Description>The name of the identity.</Description>\n  </Variable>\n  <Variable name=\"identityDisplayName\">\n    <Description>\n      The displayName of the identity being updated.\n      Query for this using a projection query and fall back to the name.\n    </Description>\n  </Variable>\n  <Variable name=\"plan\">\n    <Description>The provisioning plan, which is built by a service method. </Description>\n  </Variable>\n  <Variable initializer=\"string:Simple Workflow\" name=\"flow\">\n    <Description>The name of the identity.</Description>\n  </Variable>\n  <Variable editable=\"true\" initializer=\"false\" name=\"optimisticProvisioning\">\n    <Description>\n      Set to true to enable optimistic provisioning.  This will cause\n      changes to the entitlements compiled from role assignments to be \n      applied immediately to the identity cube rather than waiting\n      for the next refresh/reaggregation after the provisioning system\n      completes the request.\n    </Description>\n  </Variable>\n  <Variable editable=\"true\" initializer=\"true\" name=\"foregroundProvisioning\">\n    <Description>\n      Normally provisioning is done in a step that uses the \"background\"\n      option to force the workflow to be suspend and be resumed in a\n      background task thread.  This prevents the browser session from\n      hanging since provision can sometimes take a long time.  For demos\n      and testing it can be better to do this in the foreground so that\n      provisioning will have been performed when control is returned to the\n      user.  This prevents having to run the Perform Maintenance task to \n      see the results of the request.\n    </Description>\n  </Variable>\n  <Variable initializer=\"LCM\" input=\"true\" name=\"source\">\n    <Description>\n      String version of sailpoint.object.Source to indicate\n      where the request originated.  Defaults to LCM.\n    </Description>\n  </Variable>\n  <Variable initializer=\"true\" input=\"true\" name=\"trace\">\n    <Description>\n      Used for debugging this workflow and when set to true trace\n      will be sent to stdout.\n    </Description>\n  </Variable>\n  <Variable name=\"cart\" output=\"true\">\n    <Description>\n       This variable includes all ApprovalItems that are part of \n       the request process and is updated during the AfterScript\n       of the approval process by assimilating the decisions \n       and comments from the Approvals copy of the ApprovalItem.\n    </Description>\n  </Variable>\n</List>\n',NULL,'<List>\n  <Step icon=\"Start\" name=\"Start\" posX=\"28\" posY=\"10\">\n    <Transition to=\"Simple Step\"/>\n  </Step>\n  <Step icon=\"Message\" name=\"Simple Step\" posX=\"148\" posY=\"10\" resultVariable=\"plan\">\n    <Description>Simple Step.</Description>\n    <Script>\n      <Source>\n		import sailpoint.object.Identity;\n		import sailpoint.object.ProvisioningPlan;\n		import sailpoint.object.ProvisioningPlan.AccountRequest;\n		import sailpoint.object.ProvisioningPlan.AttributeRequest;\n		import sailpoint.object.ProvisioningPlan.Operation;\n		import sailpoint.object.ProvisioningPlan.AccountRequest.Operation;\n		import sailpoint.api.Provisioner;\n		import sailpoint.api.*;\n		import sailpoint.object.QueryOptions;\n		import sailpoint.object.Filter;\n		import sailpoint.workflow.WorkflowContext;\n	\n		System.out.println(\"identityName: \"+identityName);\n		Identity identity = context.getObjectByName(Identity.class, identityName);\n\n  \n		System.out.println(\"identity: \"+identity);\n		\n		  String app = \"HR System\"; //LDAP\n		  String nativeIdentity = identityName;\n		\n\n		\n		  ProvisioningPlan plan = new ProvisioningPlan();\n		  // Set identity to the plan\n		  plan.setIdentity(identity);\n		\n		  AccountRequest accReq = new AccountRequest();\n		  accReq.setOperation(AccountRequest.Operation.Disable);\n		  accReq.setApplication(app);\n		  accReq.setNativeIdentity(nativeIdentity);\n		\n		  plan.add(accReq);\n		\n		  //Provisioner p = new Provisioner(context);\n		  //p.execute(plan);\n		\n		  System.out.println(\"Plan \"+plan.toXml());\n		  workflow.put(\"plan\", plan);\n		\n		\n		return plan;\n		\n      </Source>\n    </Script>\n    <Transition to=\"end\"/>\n  </Step>\n  <Step icon=\"Stop\" name=\"end\" posX=\"540\" posY=\"10\"/>\n</List>\n',' ',' ','Identity'),('a9fe0bbd94591a788194592c723a0050',1736662872634,1739425381245,NULL,NULL,NULL,'Simple Form Workflow','Disable all accounts when an employee leaves the company.',NULL,NULL,_binary '\0',_binary '',_binary '\0',0,_binary '\0',NULL,NULL,'<List>\n  <Variable input=\"true\" name=\"trigger\">\n    <Description>The IdentityTrigger</Description>\n  </Variable>\n  <Variable input=\"true\" name=\"event\">\n    <Description>\n      The IdentityChangeEvent.  It can be used to build\n      the provisioning plan, but does not need to be\n      persisted with the case, so marked as transient.\n    </Description>\n  </Variable>\n  <Variable name=\"identityName\">\n    <Description>The name of the identity.</Description>\n  </Variable>\n  <Variable name=\"formModel\"/>\n  <Variable name=\"identityDisplayName\">\n    <Description>\n      The displayName of the identity being updated.\n      Query for this using a projection query and fall back to the name.\n    </Description>\n  </Variable>\n  <Variable name=\"plan\">\n    <Description>The provisioning plan, which is built by a service method. </Description>\n  </Variable>\n  <Variable initializer=\"string:Immediate Termination\" name=\"flow\">\n    <Description>The name of the identity.</Description>\n  </Variable>\n  <Variable editable=\"true\" initializer=\"false\" name=\"optimisticProvisioning\">\n    <Description>\n      Set to true to enable optimistic provisioning.  This will cause\n      changes to the entitlements compiled from role assignments to be \n      applied immediately to the identity cube rather than waiting\n      for the next refresh/reaggregation after the provisioning system\n      completes the request.\n    </Description>\n  </Variable>\n  <Variable editable=\"true\" initializer=\"true\" name=\"foregroundProvisioning\">\n    <Description>\n      Normally provisioning is done in a step that uses the \"background\"\n      option to force the workflow to be suspend and be resumed in a\n      background task thread.  This prevents the browser session from\n      hanging since provision can sometimes take a long time.  For demos\n      and testing it can be better to do this in the foreground so that\n      provisioning will have been performed when control is returned to the\n      user.  This prevents having to run the Perform Maintenance task to \n      see the results of the request.\n    </Description>\n  </Variable>\n  <Variable initializer=\"spadmin\" input=\"true\" name=\"fallbackApprover\">\n    <Description>\n      A String that specifies the name of the Identity that will \n      be assigned any approvals where the owner of the approver \n      can\'t be resolved. Example if the scheme is \"owner\" and the \n      application doesn\'t specify and owner.\n    </Description>\n  </Variable>\n  <Variable initializer=\"LCM\" input=\"true\" name=\"source\">\n    <Description>\n      String version of sailpoint.object.Source to indicate\n      where the request originated.  Defaults to LCM.\n    </Description>\n  </Variable>\n  <Variable initializer=\"true\" input=\"true\" name=\"trace\">\n    <Description>\n      Used for debugging this workflow and when set to true trace\n      will be sent to stdout.\n    </Description>\n  </Variable>\n  <Variable name=\"project\">\n    <Description>\n      ProvisioningProject which is just a compiled version of the ProvisioningPlan.\n    </Description>\n  </Variable>\n  <Variable name=\"identityRequestId\" output=\"true\">\n    <Description>\n      The sequence id of the Identity request object which is stored in \n      the name field of the identity request.\n    </Description>\n  </Variable>\n  <Variable name=\"cart\" output=\"true\">\n    <Description>\n      This variable includes all ApprovalItems that are part of \n      the request process and is updated during the AfterScript\n      of the approval process by assimilating the decisions \n      and comments from the Approvals copy of the ApprovalItem.\n    </Description>\n  </Variable>\n  <Variable initializer=\"Normal\" input=\"true\" name=\"workItemPriority\">\n    <Description>\n      The String version of a WorkItem.Priority. This variable is \n      used to set the priority on all of the workitems generated \n      as part of this workflow and also set on the IdentityRequest\n      object.\n    </Description>\n  </Variable>\n</List>\n',NULL,'<List>\n  <Step icon=\"Start\" name=\"Start\" posX=\"28\" posY=\"10\">\n    <Transition to=\"Update Form Model\"/>\n  </Step>\n  <Step name=\"Update Form Model\" posX=\"232\" posY=\"22\" resultVariable=\"formModel\">\n    <Description>Initialize the data for the identity that we are creating.</Description>\n    <Script>\n      <Source>\n        import sailpoint.object.*;\n        import sailpoint.transformer.*;\n\n        HashMap formModel=new HashMap();	\n        formModel.put(\"transformerClass\",\"sailpoint.transformer.IdentityTransformer\");		\n        IdentityTransformer transformer = new IdentityTransformer(context);\n\n        formModel.put(IdentityTransformer.ATTR_TRANSFORMER_CLASS, transformer.getClass().getName());\n        formModel.put(IdentityTransformer.ATTR_TRANSFORMER_OPTIONS, \"sailpoint.transformer.IdentityTransformerOptions\");\n        formModel.put(IdentityTransformer.OP_IDENTITY_EXPAND, Boolean.FALSE);\n        formModel.put(IdentityTransformer.OPT_LINK_EXPAND, Boolean.FALSE);\n\n        System.out.println(\"formModel\"+formModel);\n        return formModel;\n      </Source>\n    </Script>\n    <Transition to=\"ShowForm\"/>\n  </Step>\n  <Step name=\"ShowForm\">\n    <Approval owner=\"ref:launcher\" return=\"formModel\" send=\"formModel\">\n      <Arg name=\"workItemForm\" value=\"Simple User Form\"/>\n      <Arg name=\"workItemDescription\" value=\"Simple User Form\"/>\n      <Arg name=\"launcher\" value=\"ref:launcher\"/>\n      <Arg name=\"workItemFormBasePath\" value=\"formModel\"/>\n    </Approval>\n    <Transition to=\"Set Identity Name\"/>\n  </Step>\n  <Step icon=\"Default\" name=\"Set Identity Name\" posX=\"143\" posY=\"62\" resultVariable=\"identityName\">\n    <Script>\n      <Source>\n        import sailpoint.object.*;\n        return formModel.get(\"user\");            \n      </Source>\n    </Script>\n    <Transition to=\"Set Identity Display Name\"/>\n  </Step>\n  <Step icon=\"Default\" name=\"Set Identity Display Name\" posX=\"143\" posY=\"62\" resultVariable=\"identityDisplayName\">\n    <Script>\n      <Source>\n        import sailpoint.object.*;\n        Identity id = null;\n        if(null != identityName) {\n        id = context.getObjectByName(Identity.class, identityName);\n        return id.getDisplayName();\n        }\n\n      </Source>\n    </Script>\n    <Transition to=\"ResetPassword\"/>\n  </Step>\n  <Step icon=\"Message\" name=\"ResetPassword\" posX=\"148\" posY=\"10\" resultVariable=\"plan\">\n    <Description>Process the user that joined.</Description>\n    <Script>\n      <Source>\n        import sailpoint.object.Identity;;\n\n        Identity identity = context.getObjectByName(Identity.class, identityName);\n        identity.setPassword(\"TermUser@123\");\n        context.saveObject(identity);\n        context.commitTransaction();\n\n\n      </Source>\n    </Script>\n    <Transition to=\"end\"/>\n  </Step>\n  <Step icon=\"Stop\" name=\"end\" posX=\"540\" posY=\"10\"/>\n</List>\n',' ',' ','Identity'),('a9fe0bbd95ea1ee68196139f461908a9',1744085927481,NULL,NULL,NULL,NULL,'WorkflowCase Cleanup Workflow',NULL,NULL,NULL,_binary '\0',_binary '',_binary '\0',0,_binary '\0',NULL,NULL,'<List>\n  <Variable editable=\"true\" name=\"commitFrequency\"/>\n  <Variable editable=\"true\" name=\"deleteCap\"/>\n  <Variable input=\"true\" name=\"quickLinkIdentityId\"/>\n  <Variable editable=\"true\" name=\"daysGap\"/>\n  <Variable editable=\"true\" name=\"emailIdentities\"/>\n  <Variable editable=\"true\" name=\"simulation\"/>\n  <Variable editable=\"true\" name=\"identityName\"/>\n  <Variable initializer=\"true\" name=\"transient\">\n    <Description>Makes the workflow not leave records for each run</Description>\n  </Variable>\n</List>\n',NULL,'<List>\n  <Step icon=\"Start\" name=\"Start\" posX=\"20\" posY=\"21\">\n    <Transition to=\"Prepare\"/>\n  </Step>\n  <Step icon=\"Default\" name=\"Send Form\" posX=\"188\" posY=\"119\">\n    <Approval name=\"Workflow Cleanup Form\" owner=\"ref:identityName\" return=\"simulation,emailIdentities,daysGap,deleteCap,commitFrequency\" send=\"\">\n      <Form name=\"Workflow Cleanup Form\">\n        <Attributes>\n          <Map>\n            <entry key=\"pageTitle\" value=\"Workflow Cleanup Form\"/>\n          </Map>\n        </Attributes>\n        <Section name=\"Workflow Cleanup Form\">\n          <Field displayName=\"Simulation\" helpKey=\"Simulated delete vs actual delete\" name=\"simulation\" type=\"boolean\" value=\"true\"/>\n          <Field displayName=\"Users to Notify\" helpKey=\"Identity Names for the people who will receive the results a an emailed CSV file\" multi=\"true\" name=\"emailIdentities\" type=\"sailpoint.object.Identity\"/>\n          <Field displayName=\"Number of Days delete threshold\" helpKey=\"The number of days in the past after which we will not be deleting workflows. If 30 is entered here, we will only delete workflowcases older than 30 days\" name=\"daysGap\" required=\"true\" type=\"int\">\n            <Script>\n              <Source>return 180;</Source>\n            </Script>\n          </Field>\n          <Field displayName=\"Delete cap (Maximum allowed at one time is 200)\" helpKey=\"Maximum number of WorkflowCase objects to delete (Maximum allowed at one time is 200).\" name=\"deleteCap\" required=\"true\" type=\"int\">\n            <Script>\n              <Source>return 200;</Source>\n            </Script>\n          </Field>\n          <Field displayName=\"Transaction Commit Frequency\" helpKey=\"How many iterations after which the code will commit the transaction\" name=\"commitFrequency\" required=\"true\" type=\"int\">\n            <Script>\n              <Source>return 200;</Source>\n            </Script>\n          </Field>\n        </Section>\n        <Button action=\"cancel\" label=\"Cancel\"/>\n        <Button action=\"next\" label=\"Next\"/>\n      </Form>\n    </Approval>\n    <Arg name=\"identityName\" value=\"ref:identityName\"/>\n    <Arg name=\"emailIdentities\" value=\"ref:emailIdentities\"/>\n    <Arg name=\"simulation\" value=\"ref:simulation\"/>\n    <Arg name=\"deleteCap\" value=\"ref:deleteCap\"/>\n    <Arg name=\"daysGap\" value=\"ref:daysGap\"/>\n    <Arg name=\"commitFrequency\" value=\"ref:commitFrequency\"/>\n    <Transition to=\"Delete and Report\"/>\n  </Step>\n  <Step icon=\"Default\" name=\"Delete and Report\" posX=\"283\" posY=\"104\">\n    <Arg name=\"emailIdentities\" value=\"ref:emailIdentities\"/>\n    <Arg name=\"simulation\" value=\"ref:simulation\"/>\n    <Arg name=\"deleteCap\" value=\"ref:deleteCap\"/>\n    <Arg name=\"daysGap\" value=\"ref:daysGap\"/>\n    <Arg name=\"commitFrequency\" value=\"ref:commitFrequency\"/>\n    <Script>\n      <Source>\nimport sailpoint.object.QueryOptions;\nimport sailpoint.object.Filter;\nimport sailpoint.object.WorkflowCase;\nimport sailpoint.object.AuditEvent;\nimport sailpoint.object.TaskResult;\nimport sailpoint.object.TaskDefinition;\nimport sailpoint.object.Filter.CompositeFilter;\nimport sailpoint.object.Custom;\n\nimport sailpoint.api.TaskManager;\nimport sailpoint.api.Terminator;\n\nimport java.text.DateFormat;\nimport java.text.SimpleDateFormat;\n\nimport java.util.*;\nimport org.apache.log4j.Logger;\nimport org.apache.log4j.Level;\n\nimport java.lang.Exception;\n\n\n  Logger logger = Logger.getLogger(\"workflow.DeleteOldWorkflowCases\"); // TODO: Add to log4j2.properties file and ensure this logger matches their naming convention\n  logger.debug(\"WorkflowCase Cleanup Workflow Start\");\n\n  Terminator term = new Terminator(context);\n\n  boolean simu = simulation;\n  // The value found in the Audit so it\'s clear whether a delete ACTUALLY happened\n  String simString = \"Deleted\";\n  if(simu)\n    simString=\"Simulated\";\n\n  logger.debug(\"WorkflowCase Cleanup Workflow simString: \" + simString);\n  // Set this Integer to the days how long workflowCases should be kept. ex.: 1 = delete all WFCases older than 1 day // Integer.parseInt(\n  int daysGapToDelete = daysGap; \n	logger.debug(\"WorkflowCase Cleanup Workflow daysGapToDelete: \" + daysGapToDelete);\n  // The maximum number of workflowCase objects that should be deleted by this process in 1 run\n  int maxDeleted = -1;\n  \n  // A flag to tell us whether the delete cap configuration is set at all\n  boolean maxD = true;\n\n // if(config.get(\"deleteCap\") != null &amp;&amp; !\"\".equals(deleteCap))\n  if(deleteCap != null)\n    maxDeleted = deleteCap; \n  else \n    maxDeleted = 200;\n // else\n   // maxD = false;\n\n  // How many iterations we are spacing commits by in loops below\n  int transactionCommitFrequency = commitFrequency;\n\n  // Just to count the total\n  int countDeletedWorkflows = 0;\n\n  // Now subtract the gap days\n  Calendar cal = new GregorianCalendar();\n  cal.add(Calendar.DATE, -daysGapToDelete);\n  Date cutOffDate = cal.getTime();\n  logger.debug(\"WorkflowCase Cleanup Workflow cutOffDate: \" + cutOffDate);\n\n  QueryOptions qo = new QueryOptions();\n  qo.addFilter(Filter.lt(\"created\", cutOffDate ));\n  qo.setCloneResults(true);\n\n  Iterator it = context.search(WorkflowCase.class, qo, \"id,name,created,targetName\"); \n\n  // Keep track of the ones we want to delete\n  List deleteList = new ArrayList();\n  List deleteTaskResultList = new ArrayList();\n        \n  // Method for generating an Audit we will use in our report, below\n  boolean generateAudit(Object[] itArray)\n  {\n      DateFormat formatter = new SimpleDateFormat(\"dd/MM/yyyy HH:mm:ss\");\n\n      String id = (String) itArray[0];\n      String wfcName = (String) itArray[1];\n      Date wfcCreated = (Date) itArray[2];\n      String wfcTargetName = (String) itArray[3];\n\n      //logger.debug(\"Identity: \" + wfcTargetName + \" --> deleting old workflow case \" + id + \" - \" + wfcName);\n\n      AuditEvent ae = new AuditEvent(\"WorkflowCleanup\",\"Delete\", wfcName);\n      ae.setString1(wfcTargetName);\n      ae.setString2(formatter.format(wfcCreated));\n      ae.setString3(\"Current time: \" + formatter.format(new Date())); \n      ae.setString4(simString);\n\n      context.saveObject(ae);\n\n      return true;\n  }\n\n  try{\n    // Iterate through every WorkflowCase before the time threshold\n    while(it.hasNext() &amp;&amp; (!maxD || maxDeleted > 0)) { \n      maxDeleted--;\n      int audits = 0;\n\n      Object[] itArray = it.next();\n      \n      generateAudit(itArray);\n\n      audits++;\n      if(audits%transactionCommitFrequency == 0)\n        context.commitTransaction();\n\n      deleteList.add((String) itArray[0]);\n      countDeletedWorkflows++;\n\n    } \n  }\n  catch (Exception ex) {\n      logger.error(\"Error: \" + ex.getMessage());\n  }\n  finally\n  {\n    sailpoint.tools.Util.flushIterator(it); \n  }\n\n  logger.debug(\"WorkflowCase Cleanup Workflow countDeletedWorkflows: \" + countDeletedWorkflows);\n  context.commitTransaction();\n\n  if(!simu){\n      try {\n        int deleted = 0;\n        // Delete the WorkflowCase objects. \n        for(String wfcId : deleteList)\n        {\n          WorkflowCase wfCase = context.getObjectById(WorkflowCase.class, wfcId);\n          // Track TaskResult ID for delete action in the next for loop\n          String tresId = wfCase.getTaskResultId();\n          if (tresId != null)\n            deleteTaskResultList.add(tresId);\n          // The actual Delete statement \n          term.deleteObject(wfCase);\n          // Instead of committing every transaction, we only do so after a certain number of iterations. This is better performance\n          deleted++;\n          if(deleted % transactionCommitFrequency == 0) \n            context.commitTransaction();\n        }\n        \n        if( deleteTaskResultList != null &amp;&amp; !deleteTaskResultList.isEmpty())\n        	logger.debug(\"WorkflowCase Cleanup deleteTaskResultList: \" + deleteTaskResultList.size());\n        \n        logger.debug(\"WorkflowCase Cleanup Workflow deleted cases: \" + deleted);\n        // In case we ended on a number that was not captured by our % statement we need to do one final commit\n        context.commitTransaction();\n        // Deleting the TaskResults. Terminator class should also delete all dependent objects for the WorkflowCase objects above, including TaskResult, but CapOne says they\'ve seen this not working in their environment so we are doing an extra check\n        for(String trId : deleteTaskResultList) \n        {\n          TaskResult tr = context.getObjectById(TaskResult.class, trId);\n          // Checking whether the TaskResult was left un-deleted by the Terminator operation above\n          if(tr != null)\n          {\n            term.deleteObject(tr);\n          // Instead of committing every transaction, we only do so after a certain number of iterations. This is better performance\n            deleted++;\n            if(deleted % transactionCommitFrequency == 0)\n              context.commitTransaction();\n          }\n        }\n        \n        logger.debug(\"WorkflowCase Cleanup Workflow deleted task results: \" + deleted);\n        // In case we ended on a number that was not captured by our % statement we need to do one final commit\n        context.commitTransaction();\n      }\n      catch (Exception ex)\n      {\n        logger.error(\"Error: \" + ex.getMessage());\n      }\n    } else{\n      logger.debug(\"Simulation is true --> no commits\");\n    }\n\n\n  // The actual work is already done, the rest of the Rule is about creating the Report\n  TaskDefinition report = context.getObjectByName(TaskDefinition.class, \"WorkflowCase Cleanup Audit Report\");\n\n  List emailList = emailIdentities;\n\n  // Setting the list of Identities who will be emailed\n  report.setArgument(\"emailIdentities\",emailList);\n  \n  // Definining our new filters using the old filters as a base, maybe it isn\'t necessary to do it this way but it isn\'t harmful either and if we modify in the future it might be convenient\n  CompositeFilter cf = report.getArgument(\"SearchReportFilters\"); // TODO: Define this as a new object because there\'s no reason to pull the filters from the report because we\'re overwriting them\n\n  List newChildren = new ArrayList();\n  // Filter based on Delete action\n  newChildren.add(Filter.ignoreCase(Filter.eq(\"action\",\"Delete\")));\n  // Filter based on whether the source was this rule\n  newChildren.add(Filter.ignoreCase(Filter.like(\"source\",\"WorkflowCleanup\",Filter.MatchMode.START)));\n  // Update the startDate to only show results from the last 24 hours, usually in Prod this should only be our current run but if we\'ve had multiple within 24 hours they may show up too. You can use Value 3 in the report to see the time the report was generated and distinguish different runs from one another\n  Calendar cal2 = new GregorianCalendar();\n  cal2.add(Calendar.DATE, -1);\n  newChildren.add(Filter.gt(\"created\",cal2.getTime()));\n  // Sets the new filters\n  cf.setChildren(newChildren);\n  \n  report.setArgument(\"SearchReportFilters\",cf);\n\n  TaskManager taskmanager = new TaskManager(context);\n  // Run the report\n  taskmanager.run(report, null);\n  \n      </Source>\n    </Script>\n    <Transition to=\"Stop\"/>\n  </Step>\n  <Step icon=\"Stop\" name=\"Stop\" posX=\"362\" posY=\"47\"/>\n  <Step icon=\"Default\" name=\"Prepare\" posX=\"69\" posY=\"99\" resultVariable=\"identityName\">\n    <Arg name=\"quickLinkIdentityId\" value=\"ref:quickLinkIdentityId\"/>\n    <Script>\n      <Source>import sailpoint.object.Identity;\n\nIdentity identity = context.getObjectById(Identity.class, quickLinkIdentityId);\n\nString idName = identity.getName();\n\ncontext.decache(identity);\n\nreturn idName;</Source>\n    </Script>\n    <Transition to=\"Send Form\"/>\n  </Step>\n</List>\n',' ',' ',NULL),('a9fe0bbd95ea1ee6819613cc9f3c0906',1744088899388,NULL,NULL,NULL,NULL,'Service Account Owner Search Workflow',NULL,NULL,NULL,_binary '\0',_binary '',_binary '\0',0,_binary '\0',NULL,NULL,' ',NULL,'<List>\n  <Step icon=\"Start\" name=\"Start\" posX=\"28\" posY=\"10\">\n    <Transition to=\"Form\"/>\n  </Step>\n  <Step icon=\"Default\" name=\"Form\" posX=\"98\" posY=\"126\">\n    <Approval name=\"Form\" owner=\"ref:launcher\" return=\"application\" send=\"launcher\">\n      <Arg name=\"workItemForm\" value=\"Service Account Owner Search Form\"/>\n      <Arg name=\"launcher\" value=\"ref:launcher\"/>\n    </Approval>\n    <Transition to=\"Stop\"/>\n  </Step>\n  <Step icon=\"Stop\" name=\"Stop\" posX=\"294\" posY=\"126\"/>\n</List>\n',' ',' ',NULL),('a9fedb66924113af81926fc22ae10843',1728451848956,1739425377921,NULL,NULL,NULL,'Immediate Termination','Disable all accounts when an employee leaves the company.','IdentityLifecycle',NULL,_binary '\0',_binary '',_binary '\0',0,_binary '\0',NULL,NULL,'<List>\n  <Variable input=\"true\" name=\"trigger\">\n    <Description>The IdentityTrigger</Description>\n  </Variable>\n  <Variable input=\"true\" name=\"event\" transient=\"true\">\n    <Description>\n      The IdentityChangeEvent.  It can be used to build\n      the provisioning plan, but does not need to be\n      persisted with the case, so marked as transient.\n    </Description>\n  </Variable>\n  <Variable name=\"identityName\">\n    <Description>The name of the identity.</Description>\n  </Variable>\n  <Variable name=\"identityDisplayName\">\n    <Description>\n      The displayName of the identity being updated.\n      Query for this using a projection query and fall back to the name.\n    </Description>\n  </Variable>\n  <Variable name=\"plan\">\n    <Description>The provisioning plan, which is built by a service method. </Description>\n  </Variable>\n  <Variable initializer=\"string:Immediate Termination\" name=\"flow\">\n    <Description>The name of the identity.</Description>\n  </Variable>\n  <Variable editable=\"true\" initializer=\"false\" name=\"optimisticProvisioning\">\n    <Description>\n      Set to true to enable optimistic provisioning.  This will cause\n      changes to the entitlements compiled from role assignments to be \n      applied immediately to the identity cube rather than waiting\n      for the next refresh/reaggregation after the provisioning system\n      completes the request.\n    </Description>\n  </Variable>\n  <Variable editable=\"true\" initializer=\"true\" name=\"foregroundProvisioning\">\n    <Description>\n      Normally provisioning is done in a step that uses the \"background\"\n      option to force the workflow to be suspend and be resumed in a\n      background task thread.  This prevents the browser session from\n      hanging since provision can sometimes take a long time.  For demos\n      and testing it can be better to do this in the foreground so that\n      provisioning will have been performed when control is returned to the\n      user.  This prevents having to run the Perform Maintenance task to \n      see the results of the request.\n    </Description>\n  </Variable>\n  <Variable initializer=\"spadmin\" input=\"true\" name=\"fallbackApprover\">\n    <Description>\n      A String that specifies the name of the Identity that will \n      be assigned any approvals where the owner of the approver \n      can\'t be resolved. Example if the scheme is \"owner\" and the \n      application doesn\'t specify and owner.\n    </Description>\n  </Variable>\n  <Variable initializer=\"LCM\" input=\"true\" name=\"source\">\n    <Description>\n      String version of sailpoint.object.Source to indicate\n      where the request originated.  Defaults to LCM.\n    </Description>\n  </Variable>\n  <Variable initializer=\"false\" input=\"true\" name=\"trace\">\n    <Description>\n      Used for debugging this workflow and when set to true trace\n      will be sent to stdout.\n    </Description>\n  </Variable>\n  <Variable name=\"project\">\n    <Description>\n      ProvisioningProject which is just a compiled version of the ProvisioningPlan.\n    </Description>\n  </Variable>\n  <Variable name=\"identityRequestId\" output=\"true\">\n    <Description>\n       The sequence id of the Identity request object which is stored in \n       the name field of the identity request.\n    </Description>\n  </Variable>\n  <Variable name=\"cart\" output=\"true\">\n    <Description>\n       This variable includes all ApprovalItems that are part of \n       the request process and is updated during the AfterScript\n       of the approval process by assimilating the decisions \n       and comments from the Approvals copy of the ApprovalItem.\n    </Description>\n  </Variable>\n  <Variable initializer=\"Normal\" input=\"true\" name=\"workItemPriority\">\n    <Description>\n       The String version of a WorkItem.Priority. This variable is \n       used to set the priority on all of the workitems generated \n       as part of this workflow and also set on the IdentityRequest\n       object.\n    </Description>\n  </Variable>\n</List>\n',NULL,'<List>\n  <Step icon=\"Start\" name=\"Start\" posX=\"28\" posY=\"10\">\n    <Transition to=\"Get Identity Model\"/>\n  </Step>\n  <Step action=\"call:getIdentityModel\" name=\"Get Identity Model\" posX=\"232\" posY=\"22\" resultVariable=\"identityModel\">\n    <Description>Initialize the data for the identity that we are creating.</Description>\n    <Transition to=\"ShowForm\"/>\n  </Step>\n  <Step name=\"ShowForm\">\n    <Approval owner=\"ref:launcher\" return=\"identityModel\">\n      <Arg name=\"workItemForm\" value=\"Terminate User Form\"/>\n      <Arg name=\"workItemDescription\" value=\"Terminate User Form\"/>\n      <Arg name=\"launcher\" value=\"ref:launcher\"/>\n      <Arg name=\"workItemFormBasePath\" value=\"identityModel\"/>\n      <Arg name=\"identityModel\" value=\"ref:identityModel\"/>\n    </Approval>\n    <Arg name=\"identityModel\" value=\"ref:identityModel\"/>\n    <Transition to=\"Set Identity Name\"/>\n  </Step>\n  <Step icon=\"Default\" name=\"Set Identity Name\" posX=\"143\" posY=\"62\" resultVariable=\"identityName\">\n    <Script>\n      <Source>\n		import sailpoint.object.*;\n		return identityModel.get(\"user\");            \n	</Source>\n    </Script>\n    <Transition to=\"Set Identity Display Name\"/>\n  </Step>\n  <Step icon=\"Default\" name=\"Set Identity Display Name\" posX=\"143\" posY=\"62\" resultVariable=\"identityDisplayName\">\n    <Script>\n      <Source>\n		import sailpoint.object.*;\n		Identity id = null;\n		if(null != identityName) {\n			id = context.getObjectByName(Identity.class, identityName);\n			return id.getDisplayName();\n		}\n		            \n	</Source>\n    </Script>\n    <Transition to=\"ResetPassword\"/>\n  </Step>\n  <Step icon=\"Message\" name=\"ResetPassword\" posX=\"148\" posY=\"10\" resultVariable=\"plan\">\n    <Description>Process the user that joined.</Description>\n    <Script>\n      <Source>\n		import sailpoint.object.Identity;;\n\n		Identity identity = context.getObjectByName(Identity.class, identityName);\n		identity.setPassword(\"TermUser@123\");\n		context.saveObject(identity);\n		context.commitTransaction();\n		\n		\n      </Source>\n    </Script>\n    <Transition to=\"Build Plan\"/>\n  </Step>\n  <Step icon=\"Message\" name=\"Build Plan\" posX=\"148\" posY=\"10\" resultVariable=\"plan\">\n    <Description>Process the user that joined.</Description>\n    <Script>\n      <Source>\n		import org.apache.commons.logging.Log;\n		import org.apache.commons.logging.LogFactory;\n		import org.apache.commons.lang.StringUtils;\n		import sailpoint.object.AttributeAssignment;\n		import sailpoint.api.IdentityService;\n		import sailpoint.api.ObjectUtil;\n		import sailpoint.api.SailPointContext;\n		import sailpoint.api.SailPointFactory;\n		import sailpoint.api.Provisioner;\n		import sailpoint.api.*;\n		import java.util.Calendar;\n		import sailpoint.object.IdentityEntitlement;\n		import sailpoint.object.ApprovalItem.ProvisioningState;\n		import sailpoint.object.Application;\n		import sailpoint.object.ApprovalItem;\n		import sailpoint.object.AuditEvent;\n		import sailpoint.object.Attributes;\n		import sailpoint.object.AuthenticationAnswer;\n		import sailpoint.object.AuthenticationQuestion;\n		import sailpoint.object.Bundle;\n		import sailpoint.object.Certification;\n		import sailpoint.object.CertificationEntity;\n		import sailpoint.object.Custom;\n		import sailpoint.object.EmailOptions;\n		import sailpoint.object.EmailTemplate;\n		import sailpoint.object.Filter;\n		import sailpoint.object.Form;\n		import sailpoint.object.Identity;\n		import sailpoint.object.IdentityRequest;\n		import sailpoint.object.IdentityRequestItem;\n		import sailpoint.object.Link;\n		import sailpoint.object.ManagedAttribute;\n		import sailpoint.object.ProvisioningPlan;\n		import sailpoint.object.ProvisioningPlan.AccountRequest;\n		import sailpoint.object.ProvisioningPlan.AttributeRequest;\n		import sailpoint.object.ProvisioningPlan.Operation;\n		import sailpoint.object.ProvisioningPlan.AccountRequest.Operation;\n		import sailpoint.object.ProvisioningProject;\n		import sailpoint.object.ProvisioningResult;\n		import sailpoint.object.QueryOptions;\n		import sailpoint.object.RoleAssignment;\n		import sailpoint.object.Field;\n		import sailpoint.object.Filter;\n		import sailpoint.object.Form;\n		import sailpoint.object.WorkItem;\n		import sailpoint.object.Form.Section;\n		import sailpoint.object.*;\n		import sailpoint.object.Request;\n		import sailpoint.object.Filter.LeafFilter;\n		import sailpoint.object.Filter.CompositeFilter;\n		import sailpoint.object.Profile;\n		import sailpoint.workflow.WorkflowContext;\n\n\n		import sailpoint.tools.GeneralException;\n		import sailpoint.tools.Message;\n		import sailpoint.tools.Util;\n		import sailpoint.tools.xml.XMLObjectFactory;\n\n		import java.util.ArrayList;\n		import java.util.HashMap;\n		import java.util.Iterator;\n		import java.util.List;\n		import java.util.Map;\n		import java.util.Arrays;\n		\n		//System.out.println(\"User getting terminated from the system: \" + identityName);\n\n        Identity identity = context.getObjectByName(Identity.class, identityName);\n\n        ProvisioningPlan plan = new ProvisioningPlan();\n        // Set identity to the plan\n        plan.setIdentity(identity);\n\n        List acctReqs = new ArrayList();\n\n        List links = identity.getLinks();\n\n        for(Iterator iterator = links.iterator(); iterator.hasNext();){\n        	Link link = (Link) iterator.next();\n        	System.out.println(\"User App: \" + link.getApplicationName());\n          if(link.getApplicationName().equalsIgnoreCase(\"LDAP\")){\n            AccountRequest ldapAcctReq = new AccountRequest();\n            ldapAcctReq.setOperation(AccountRequest.Operation.Modify);\n            ldapAcctReq.setNativeIdentity(link.getNativeIdentity());\n            ldapAcctReq.setApplication(\"LDAP\");\n            ldapAcctReq.add(new AttributeRequest(\"description\", ProvisioningPlan.Operation.Set, \"Inactive\"));\n            acctReqs.add(ldapAcctReq);\n          }\n\n        if(link.getApplicationName().equalsIgnoreCase(\"HR System\")){\n          AccountRequest jdbcAcctReq = new AccountRequest();\n          jdbcAcctReq.setOperation(AccountRequest.Operation.Disable);\n          jdbcAcctReq.setNativeIdentity(link.getNativeIdentity());\n          jdbcAcctReq.setApplication(\"HR System\");\n          acctReqs.add(jdbcAcctReq);\n          }\n        }\n\n\n        plan.setAccountRequests(acctReqs);\n\n        workflow.put(\"plan\", plan);\n\n        return plan;\n      </Source>\n    </Script>\n    <Transition to=\"Initialize\"/>\n  </Step>\n  <Step icon=\"Task\" name=\"Initialize\" posX=\"170\" posY=\"10\">\n    <Arg name=\"formTemplate\" value=\"Identity Update\"/>\n    <Arg name=\"identityName\" value=\"ref:identityName\"/>\n    <Arg name=\"identityDisplayName\" value=\"ref:identityDisplayName\"/>\n    <Arg name=\"launcher\" value=\"ref:launcher\"/>\n    <Arg name=\"optimisticProvisioning\" value=\"ref:optimisticProvisioning\"/>\n    <Arg name=\"plan\" value=\"ref:plan\"/>\n    <Arg name=\"policyScheme\" value=\"none\"/>\n    <Arg name=\"priority\" value=\"ref:workItemPriority\"/>\n    <Arg name=\"source\" value=\"ref:source\"/>\n    <Arg name=\"trace\" value=\"ref:trace\"/>\n    <Arg name=\"flow\" value=\"Lifecycle\"/>\n    <Description>\n      Call the standard subprocess to initialize the request, this includes\n      auditing, building the approvalset, compiling the plan into \n       project and checking policy violations.\n    </Description>\n    <Return name=\"project\" to=\"project\"/>\n    <Return name=\"approvalSet\" to=\"cart\"/>\n    <Return name=\"identityRequestId\" to=\"identityRequestId\"/>\n    <Return name=\"policyViolations\" to=\"policyViolations\"/>\n    <WorkflowRef>\n      <Reference class=\"sailpoint.object.Workflow\" id=\"4028ab1063fdfb6d0163fdfc68a90035\" name=\"Identity Request Initialize\"/>\n    </WorkflowRef>\n    <Transition to=\"Provision\"/>\n  </Step>\n  <Step condition=\"script:!((size(policyViolations) > 0 ) &amp;&amp; (policyScheme.equals(&quot;fail&quot;)))\" icon=\"Task\" name=\"Provision\" posX=\"290\" posY=\"10\">\n    <Arg name=\"approvalScheme\" value=\"ref:approvalScheme\"/>\n    <Arg name=\"fallbackApprover\" value=\"ref:fallbackApprover\"/>\n    <Arg name=\"foregroundProvisioning\" value=\"ref:foregroundProvisioning\"/>\n    <Arg name=\"formTemplate\" value=\"Identity Update\"/>\n    <Arg name=\"identityDisplayName\" value=\"ref:identityDisplayName\"/>\n    <Arg name=\"identityName\" value=\"ref:identityName\"/>\n    <Arg name=\"identityRequestId\" value=\"ref:identityRequestId\"/>\n    <Arg name=\"launcher\" value=\"ref:launcher\"/>\n    <Arg name=\"manualActionsEmailTemplate\" value=\"Pending Manual Changes\"/>\n    <Arg name=\"optimisticProvisioning\" value=\"ref:optimisticProvisioning\"/>\n    <Arg name=\"priority\" value=\"ref:workItemPriority\"/>\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Arg name=\"policyScheme\" value=\"none\"/>\n    <Arg name=\"trace\" value=\"ref:trace\"/>\n    <Description>\n      Call the standard subprocess that will process the \n      approval decisions and do provisioning.  This\n      includes calling any configured provisioning \n      connectors and building manual actions.\n    </Description>\n    <Return name=\"project\" to=\"project\"/>\n    <WorkflowRef>\n      <Reference class=\"sailpoint.object.Workflow\" id=\"4028ab1063fdfb6d0163fdfc6aa00038\" name=\"Identity Request Provision\"/>\n    </WorkflowRef>\n    <Transition to=\"Finalize\"/>\n  </Step>\n  <Step catches=\"complete\" condition=\"script:!((size(policyViolations) > 0 ) &amp;&amp; (policyScheme.equals(&quot;fail&quot;)))\" icon=\"Task\" name=\"Finalize\" posX=\"410\" posY=\"10\">\n    <Arg name=\"approvalSet\" value=\"ref:cart\"/>\n    <Arg name=\"project\" value=\"ref:project\"/>\n    <Arg name=\"priority\" value=\"ref:workItemPriority\"/>\n    <Arg name=\"trace\" value=\"ref:trace\"/>\n    <Arg name=\"identityRequestId\" value=\"ref:identityRequestId\"/>\n    <Description>\n      Call the standard subprocess that can audit/finalize the request.\n    </Description>\n    <WorkflowRef>\n      <Reference class=\"sailpoint.object.Workflow\" id=\"4028ab1063fdfb6d0163fdfc6b2b0039\" name=\"Identity Request Finalize\"/>\n    </WorkflowRef>\n    <Transition to=\"end\"/>\n  </Step>\n  <Step icon=\"Stop\" name=\"end\" posX=\"540\" posY=\"10\"/>\n</List>\n',' ',' ','Identity');
/*!40000 ALTER TABLE `spt_workflow` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2025-08-18 12:50:09
