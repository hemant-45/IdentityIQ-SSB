<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="Service Account Owner Search Field Value Rule" type="FieldValue">
  <Description>This rule can be used to generate a field value (eg - an account name) using data from the given Identity. If this rule is run in the context of a workflow step then the arguments passed into the step will also be available. Also, any field values that have been processed so far from the policy related to the Application/Role will be available.</Description>
  <Signature returnType="String">
    <Inputs>
      <Argument name="log">
        <Description>
          The log object associated with the SailPointContext.
        </Description>
      </Argument>
      <Argument name="context">
        <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
      </Argument>
      <Argument name="identity" type="Identity">
        <Description>
          The Identity object that represents the user needing the field value.
        </Description>
      </Argument>
      <Argument name="link" type="Link">
        <Description>
          The sailpoint.object.Link that is being acted upon. If the link is not applicable,
          this value will be null.
        </Description>
      </Argument>
      <Argument name="group" type="ManagedAttribute">
        <Description>
          The sailpoint.object.ManagedAttribute that is being acted upon. If the managed attribute
          is not applicable, the value will be null.
        </Description>
      </Argument>
      <Argument name="project" type="ProvisioningProject">
        <Description>
          The provisioning project being acted upon. If a provisioning project is not applicable,
          the value will be null.
        </Description>
      </Argument>
      <Argument name="accountRequest" type="ProvisioningPlan.AccountRequest">
        <Description>
          The account request. If an account request is not applicable, the value will be null.
        </Description>
      </Argument>
      <Argument name="objectRequest" type="ProvisioningPlan.ObjectRequest">
        <Description>
          The object request. If an object request is not applicable, the value will be null.
        </Description>
      </Argument>
      <Argument name="role" type="Bundle">
        <Description>
          The role with the template we are compiling. If the role is
          not applicable, the value will be null.
        </Description>
      </Argument>
      <Argument name="application" type="Application">
        <Description>
          The sailpont.object.Application with the template we are compiling. If the application
          is not applicable, the value will be null.
        </Description>
      </Argument>
      <Argument name="template" type="Template">
        <Description>
          The Template that contains this field.
        </Description>
      </Argument>
      <Argument name="field" type="Field">
        <Description>
          The current field being computed.
        </Description>
      </Argument>
      <Argument name="current" type="Object">
        <Description>
          The current value corresponding to the identity or account attribute that the field represents.
          If no current value is set, this value will be null.
        </Description>
      </Argument>
      <Argument name="operation" type="ProvisioningPlan.Operation">
        <Description>
          The operation being performed.
        </Description>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="value">
        <Description>
          The string value created.
        </Description>
      </Argument>
    </Returns>
  </Signature>
  <Source>
    <![CDATA[
    import java.sql.Connection;
    import java.sql.PreparedStatement;
    import java.sql.ResultSet;
	import org.apache.commons.logging.Log;
	import sailpoint.object.Filter;
	import sailpoint.object.Identity;
	import sailpoint.object.Link;
	import sailpoint.object.QueryOptions;
	
		String applicationName = field.getApplication();
        String fieldName = field.getName();
        Object returnValue = "";

        //sometimes IIQ will pass over the field name as <application>:<fieldName>, so we have to remove this
        String currentField = fieldName.substring(fieldName.lastIndexOf(':') + 1);
        log.debug("currentField: " + currentField);

        if("serviceIdentity".equals(currentField)){
            if(application != null && !application.isEmpty()
				&& nativeIdentity != null && !nativeIdentity.isEmpty()
			){
                QueryOptions queryOptions = new QueryOptions();
                Filter filter = Filter.eq("application.id", application);
                filter = Filter.and(filter, Filter.eq("nativeIdentity", nativeIdentity.trim()));

                queryOptions.addFilter(filter);

                Iterator iterator = null;
                try{
                    iterator = context.search(Link.class, queryOptions, "identity.id");

                    //tell user we cannot find an account
                    if(!iterator.hasNext()){
                        returnValue = "Cannot find account";
                    }
                    else{
                        Object[] props = (Object[])iterator.next();

                        //tell user we cannot find a unique account
                        if(iterator.hasNext()){
                            returnValue = "Cannot find unique account";
                        }
                        //other wise get the identity
                        else{
                            String id = (String)props[0];
                            Identity serviceIdentity = context.getObject(Identity.class, id);

                            //tell user this is not a service identity
                            if(!"Service".equals(serviceIdentity.getAttribute("employeeType"))){
                                returnValue = "Account is not correlated to a Service Identity [" + serviceIdentity.getName() + "]";
                            }
                            //else return the service identity name
                            else{
                                returnValue = serviceIdentity.getName();
                            }
                        }
                    }
                    sailpoint.tools.Util.flushIterator(iterator);
                }catch (Exception ex){
                    sailpoint.tools.Util.flushIterator(iterator);
                    throw ex;
                }
            }


        }
        else if("manager".equals(currentField)){		
            if(serviceIdentity != null){
                Identity identity = null;
                if (serviceIdentity != null) {
                    identity = context.getObjectByName(Identity.class, serviceIdentity);
                    if(identity != null){
                        returnValue = identity.getManager();
                        if(returnValue == null || "".equals(returnValue)){
                            returnValue = "Could not find Service Identity owner";
                        }
                    }
                }
            }

        }
        
        //all other cases, log an error
        else{
            log.error("Unsupported Field Name " + currentField);
            returnValue = null;
        }

        log.debug(currentField + " = " + returnValue);
		
        log.info("Exit rule Service Account Owner Search Field Value Rule");
        return returnValue;
    ]]>
  </Source>
</Rule>
