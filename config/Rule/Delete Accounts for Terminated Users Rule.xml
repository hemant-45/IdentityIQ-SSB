<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="Delete Accounts for Terminated Users Rule">
  <ReferencedRules>
    <Reference class="sailpoint.object.Rule" name="Delete Accounts for Terminated Users Rule Library"/>
  </ReferencedRules>
  <Source><![CDATA[

  import java.util.Locale;
  import java.util.TimeZone;
  import java.util.Calendar;
  import sailpoint.object.Attributes;
  import sailpoint.object.IdentityRequest;
  import sailpoint.object.TaskResult;
  import sailpoint.object.WorkItem;
  import sailpoint.object.WorkflowCase;
  import sailpoint.api.Terminator;
  import sailpoint.object.Custom;
  import sailpoint.object.TaskDefinition;
  import sailpoint.api.TaskManager;
  import java.text.ParseException;
  import java.text.SimpleDateFormat;
  import java.util.ArrayList;
  import java.util.HashMap;
  import java.util.Map;
  import java.util.Date;
  import java.util.Iterator;
  import java.util.List;
  import java.util.HashSet;
  import sailpoint.api.IdentityService;
  import sailpoint.api.Provisioner;
  import sailpoint.api.SailPointContext;
  import sailpoint.object.Application;
  import sailpoint.object.Filter;
  import sailpoint.object.Identity;
  import sailpoint.object.Link;
  import sailpoint.object.ProvisioningPlan;
  import sailpoint.object.ProvisioningPlan.AccountRequest;
  import sailpoint.object.ProvisioningProject;
  import sailpoint.object.ProvisioningResult;
  import sailpoint.object.QueryOptions;
  import sailpoint.tools.GeneralException;
  import sailpoint.tools.Message;
  import sailpoint.tools.Util;
  import sailpoint.object.AuditEvent;
  import sailpoint.server.Auditor;
  import org.apache.commons.logging.Log;
  import org.apache.commons.logging.LogFactory;
  import sailpoint.object.Custom;

  Log logger = LogFactory.getLog("DeleteAccountsRule");
  
  logger.debug("Starting Rule Delete Accounts for Terminated Users Rule");

  int identitiesScanned = 0;
  int identitiesProcessed = 0;
  String userName= "";
  String reason = "";
  String launcher = taskResult.getLauncher();
  List list = new ArrayList();

  ProvisioningPlan plan = null;
  IdentityService idService = new IdentityService(context);
  Attributes attributes = new Attributes();

  String applicationName = (String) config.get("applicationName");
  if(Util.isNotNullOrEmpty(applicationName))
  {
    Application applicationObj = context.getObject(Application.class, applicationName);
	if( applicationObj != null)
	{
	Custom customObject = context.getObject(Custom.class, "Terminated Users Custom Object");
	if( customObject != null)
	{
	List <String> terminatedUsers = (List) customObject.get("terminatedUsers");
	logger.debug("list of identities are "+terminatedUsers);
	if (Util.nullSafeSize(terminatedUsers) > 0) {
			for (String userName : terminatedUsers) {
			if(Util.isNotNullOrEmpty(userName))
			{
			identitiesScanned++;
			Identity idObject = context.getObject(Identity.class, userName);
			if( idObject != null)
			{
            List applicationLinks = getDisabledLinks(idObject, applicationObj);
            if(Util.nullSafeSize(applicationLinks) > 0)
            {
              identitiesProcessed++;
              list.add(userName);
              for (Link applicationLink : applicationLinks) {
                String accountName = applicationLink.getDisplayName();
                String nativeIdentity = applicationLink.getNativeIdentity();
                
                
                //Build Plan
                plan = buildPlan(applicationName, nativeIdentity, userName, idObject);
                
                //Execute Plan
                ProvisioningResult result = executePlan(plan); 
                if(result != null)
                {
                  String status = result.getStatus();
                  logger.debug("ProvisioningResult is "+status);
                  if(Util.nullSafeCaseInsensitiveEq(status, "committed"))
                  {
                    if(Util.isNotNullOrEmpty(nativeIdentity) @and Util.isNotNullOrEmpty(accountName) @and Util.isNotNullOrEmpty(status)  @and Util.isNotNullOrEmpty(applicationName) @and Util.isNotNullOrEmpty(userName) @and Util.isNotNullOrEmpty(launcher))
                    {
                      createAuditEvent(applicationName, nativeIdentity, userName, accountName, status, launcher);
                    }
                  }
                  else
                  {
                    List errors = result.getErrors();
                    String errorMessages = Util.listToCsv(errors);
                    if(Util.isNotNullOrEmpty(nativeIdentity) @and Util.isNotNullOrEmpty(accountName) @and Util.isNotNullOrEmpty(status)  @and Util.isNotNullOrEmpty(applicationName) @and Util.isNotNullOrEmpty(userName) @and Util.isNotNullOrEmpty(launcher))
                    {
                      createAuditEvent(applicationName, nativeIdentity, userName, accountName, errorMessages, launcher);
                    }
                  }
                }
              }
            }
            else
            {
              reason = "User doesn't have disabled links";
              createAuditEvent(applicationName, userName, reason);
            }
          }
        }
       }
      }
     }
    }
   }
  
  

  List returnList = new ArrayList(new HashSet(list));

  if(taskResult  != null){
    attributes.put("numberOfIdentitesProcessed", identitiesProcessed);
    attributes.put("numberOfIdentitesScanned", identitiesScanned);
    attributes.put("listOfIdentities", Util.listToCsv(returnList));
    taskResult.setAttributes(attributes);
  }
  
  logger.debug("Ending Rule Delete Accounts for Terminated Users Rule");

]]>

  </Source>
</Rule>
