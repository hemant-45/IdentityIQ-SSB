<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="Rule Library">
  <Source>
	
	import org.apache.commons.logging.Log;
	import org.apache.commons.logging.LogFactory;
	import org.apache.commons.lang.StringUtils;
	import sailpoint.object.AttributeAssignment;
	import sailpoint.api.IdentityService;
	import sailpoint.api.ObjectUtil;
	import sailpoint.api.SailPointContext;
	import sailpoint.api.SailPointFactory;
	import sailpoint.api.Provisioner;
	import sailpoint.api.*;
	import java.util.Calendar;
	import sailpoint.object.IdentityEntitlement;
	import sailpoint.object.ApprovalItem.ProvisioningState;
	import sailpoint.object.Application;
	import sailpoint.object.ApprovalItem;
	import sailpoint.object.AuditEvent;
	import sailpoint.object.Attributes;
	import sailpoint.object.AuthenticationAnswer;
	import sailpoint.object.AuthenticationQuestion;
	import sailpoint.object.Bundle;
	import sailpoint.object.Certification;
	import sailpoint.object.CertificationEntity;
	import sailpoint.object.Custom;
	import sailpoint.object.EmailOptions;
	import sailpoint.object.EmailTemplate;
	import sailpoint.object.Filter;
	import sailpoint.object.Form;
	import sailpoint.object.Identity;
	import sailpoint.object.IdentityRequest;
	import sailpoint.object.IdentityRequestItem;
	import sailpoint.object.Link;
	import sailpoint.object.ManagedAttribute;
	import sailpoint.object.ProvisioningPlan;
	import sailpoint.object.ProvisioningPlan.AccountRequest;
	import sailpoint.object.ProvisioningPlan.AttributeRequest;
	import sailpoint.object.ProvisioningPlan.Operation;
	import sailpoint.object.ProvisioningPlan.AccountRequest.Operation;
	import sailpoint.object.ProvisioningProject;
	import sailpoint.object.ProvisioningResult;
	import sailpoint.object.QueryOptions;
	import sailpoint.object.RoleAssignment;
	import sailpoint.object.Field;
	import sailpoint.object.Filter;
	import sailpoint.object.Form;
	import sailpoint.object.WorkItem;
	import sailpoint.object.Form.Section;
	import sailpoint.object.*;
	import sailpoint.object.Request;
	import sailpoint.object.Filter.LeafFilter;
	import sailpoint.object.Filter.CompositeFilter;
	import sailpoint.object.Profile;
	import sailpoint.workflow.WorkflowContext;


	import sailpoint.tools.GeneralException;
	import sailpoint.tools.Message;
	import sailpoint.tools.Util;
	import sailpoint.tools.xml.XMLObjectFactory;

	import java.util.ArrayList;
	import java.util.HashMap;
	import java.util.Iterator;
	import java.util.List;
	import java.util.Map;
	import java.util.Arrays;


	String[] ENTITLEMENT_CLEANUP_APPS = { "Active Directory" };
	String[] RELATED_APPS = {"Active Directory"};


	Log log = LogFactory.getLog("com.rules.RuleLibrary");
	
	public AccountRequest createAR(SailPointContext context, String app)
	{
	
			AccountRequest ar = new AccountRequest();
			ar.setOperation(AccountRequest.Operation.Create);
			ar.setApplication(app);
			
			return ar;
	}
	
	/***
	Get new UID
	***/
	public static String getNewUID(SailPointContext context)
	{
		Custom custom = (Custom) ObjectUtil.lockObject(context, Custom.class, null, "UID Custom Object", PersistenceManager.LOCK_TYPE_TRANSACTION);
		
		String prefix = custom.getString("prefix");
		String suffix = custom.getString("suffix");
		
		Integer suf = Integer.valueOf(suffix);
		
		if(suf == 9999){
			suf = 1;
			incrementPrefix(prefix);
		} else {
			suf++;
		}
		
		String suffix = String.format("%04d", new Object[] {suf});
		custom.put("prefix", prefix);
		custom.put("suffix", suffix);
		
		context.saveObject(custom);
		context.commitTransaction();
		
		return prefix + suffix;
	}
	
	/***
	This API will increments the prefix, ex "aaa" will return "aab", "zzz" will return "aaaa"
	***/
	public static String incrementPrefix(String s)
	{
		int length = s.length();
		char c = s.charAt(length - 1);
		
		if(c == 'z'){
			return length &gt; 1 ? incrementPrefix(s.substring(s, length - 1)) + 'a' : "aa";
		}
		
		return s.substring(s, length - 1) + ++c;
	}

	</Source>
</Rule>
