<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="BeanShell Function">
  <Source>
  import java.util.*;
  import sailpoint.object.*;
  import org.apache.commons.logging.Log;
  import org.apache.commons.logging.LogFactory;

   System.out.println("Simple Beanshell...");
  
    public void function1(){
    	//do something
    }
   //function();
    public String function2(){
    	//do something
    
    	return "";
    }
    
    public String function3(String str){
    	//do something
    
    	return "";
    }
    
    public String updateUser(String user, String attr, String value){
    	if(null != user &amp;&amp; null != value){
	      	Identity identity = context.getObjectByName(Identity.class, user);
	      	
	      	System.out.println("identity..."+identity);
	
	      	if(null != identity){
	        	identity.setAttribute(attr, value);
	        	context.saveObject(identity);
	        	context.commitTransaction();
	        	context.decache(identity);
	      	}
    	}

  		return "Updated";
    }
    
    return updateUser("2020021", "email", "Rahul.Dravid@swe.com");

	public Map executeAPI(List listOfEntIds)
    {
      
        Map resultMap = new HashMap();

        try{
        Custom  accessReccCustomObject = context.getObjectByName(Custom.class, "Access Recommendation Custom Object");
        String baseUrl = (String) accessReccCustomObject.get("accessRecommendationUrl");
        String acceptHeader = (String) accessReccCustomObject.get("acceptHeader");

        HttpPost post = new HttpPost(baseUrl + "/private");

        HttpUtil httpUtil = new HttpUtil();
        HttpEntity strUserEntity = new StringEntity(buildJsonStringEntity(listOfEntIds));
        DefaultHttpClient httpClient = new DefaultHttpClient();
        post.addHeader("Content-Type", "application/json");
        post.addHeader("ACCEPT", acceptHeader);
        post.addHeader("Authorization", getExchangeBearerToken());
        post.addHeader("client-correlation-id", getExchangeClientID());
        post.setEntity(strUserEntity);

        HttpResponse httpResponse = httpClient.execute(post);
        if(httpResponse != null)
        {
        resultMap = getResultMap(httpResponse);
        }
        }
        catch (Exception e) {
        log.error("Error in executeAPI method from Access Automation Approval Rule Library "+e.getMessage());
        }

       
        return resultMap;
    }
    
    
    private ProvisioningPlan buildAccountDeletionPlan(String eid, String app, Identity id,String nativeIden){
    List acctReqs = new ArrayList();
    ProvisioningPlan plan = new ProvisioningPlan();
    AccountRequest acctReq = new ProvisioningPlan.AccountRequest();
    acctReq.setOperation(AccountRequest.Operation.Delete);
    acctReq.setApplication(app);
    acctReq.setNativeIdentity(nativeIden);
    Attributes attr = new Attributes();
    attr.put("comments", "Auto Revoke");
    acctReq.setArguments(attr);
    acctReqs.add(acctReq);
    plan.setIdentity(id);
    plan.setSource("LCM");
    plan.setAccountRequests(acctReqs);
    return plan;

  }
  
  
  		return idList;



  </Source>
</Rule>
